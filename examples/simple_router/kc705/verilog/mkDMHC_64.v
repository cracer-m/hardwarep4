//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Wed May 31 23:51:41 CST 2017
//
// BVI format method schedule info:
// schedule is_enabled  CF ( is_enabled,
// 			  flush,
// 			  lookup_key,
// 			  get_value,
// 			  is_hit,
// 			  new_key_value );
//
// schedule flush  CF ( is_enabled,
// 		     flush,
// 		     lookup_key,
// 		     get_value,
// 		     is_hit,
// 		     new_key_value );
//
// schedule lookup_key  CF ( is_enabled, flush, get_value, is_hit );
// schedule lookup_key  SBR ( new_key_value );
// schedule lookup_key  C ( lookup_key );
//
// schedule get_value  CF ( is_enabled,
// 			 flush,
// 			 lookup_key,
// 			 get_value,
// 			 is_hit,
// 			 new_key_value );
//
// schedule is_hit  CF ( is_enabled,
// 		      flush,
// 		      lookup_key,
// 		      get_value,
// 		      is_hit,
// 		      new_key_value );
//
// schedule new_key_value  CF ( is_enabled, flush, get_value, is_hit );
// schedule new_key_value  C ( new_key_value );
//
//
// Ports:
// Name                         I/O  size props
// is_enabled                     O     1 reg
// RDY_is_enabled                 O     1 const
// RDY_flush                      O     1 const
// RDY_lookup_key                 O     1
// get_value                      O    64
// RDY_get_value                  O     1 const
// is_hit                         O     1
// RDY_is_hit                     O     1 const
// RDY_new_key_value              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// lookup_key_key                 I    64
// new_key_value_k                I    64 reg
// new_key_value_v                I    64 reg
// EN_flush                       I     1 unused
// EN_lookup_key                  I     1
// EN_new_key_value               I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDMHC_64(CLK,
		 RST_N,

		 is_enabled,
		 RDY_is_enabled,

		 EN_flush,
		 RDY_flush,

		 lookup_key_key,
		 EN_lookup_key,
		 RDY_lookup_key,

		 get_value,
		 RDY_get_value,

		 is_hit,
		 RDY_is_hit,

		 new_key_value_k,
		 new_key_value_v,
		 EN_new_key_value,
		 RDY_new_key_value);
  input  CLK;
  input  RST_N;

  // value method is_enabled
  output is_enabled;
  output RDY_is_enabled;

  // action method flush
  input  EN_flush;
  output RDY_flush;

  // action method lookup_key
  input  [63 : 0] lookup_key_key;
  input  EN_lookup_key;
  output RDY_lookup_key;

  // value method get_value
  output [63 : 0] get_value;
  output RDY_get_value;

  // value method is_hit
  output is_hit;
  output RDY_is_hit;

  // action method new_key_value
  input  [63 : 0] new_key_value_k;
  input  [63 : 0] new_key_value_v;
  input  EN_new_key_value;
  output RDY_new_key_value;

  // signals for module outputs
  wire [63 : 0] get_value;
  wire RDY_flush,
       RDY_get_value,
       RDY_is_enabled,
       RDY_is_hit,
       RDY_lookup_key,
       RDY_new_key_value,
       is_enabled,
       is_hit;

  // inlined wires
  wire is_hit_wire_wget,
       ldvn_start_wire_whas,
       ldvn_state_set_pw_whas,
       mslot_replacement_start_wire_whas,
       mslot_replacement_state_set_pw_whas,
       rec_value_whas;

  // register evictee_gslots_0
  reg [85 : 0] evictee_gslots_0;
  wire [85 : 0] evictee_gslots_0_D_IN;
  wire evictee_gslots_0_EN;

  // register evictee_gslots_1
  reg [85 : 0] evictee_gslots_1;
  wire [85 : 0] evictee_gslots_1_D_IN;
  wire evictee_gslots_1_EN;

  // register evictee_gslots_2
  reg [85 : 0] evictee_gslots_2;
  wire [85 : 0] evictee_gslots_2_D_IN;
  wire evictee_gslots_2_EN;

  // register evictee_gslots_3
  reg [85 : 0] evictee_gslots_3;
  wire [85 : 0] evictee_gslots_3_D_IN;
  wire evictee_gslots_3_EN;

  // register evictee_hvals_0
  reg [10 : 0] evictee_hvals_0;
  wire [10 : 0] evictee_hvals_0_D_IN;
  wire evictee_hvals_0_EN;

  // register evictee_hvals_1
  reg [10 : 0] evictee_hvals_1;
  wire [10 : 0] evictee_hvals_1_D_IN;
  wire evictee_hvals_1_EN;

  // register evictee_hvals_2
  reg [10 : 0] evictee_hvals_2;
  wire [10 : 0] evictee_hvals_2_D_IN;
  wire evictee_hvals_2_EN;

  // register evictee_hvals_3
  reg [10 : 0] evictee_hvals_3;
  wire [10 : 0] evictee_hvals_3_D_IN;
  wire evictee_hvals_3_EN;

  // register evictee_mslot
  reg [128 : 0] evictee_mslot;
  wire [128 : 0] evictee_mslot_D_IN;
  wire evictee_mslot_EN;

  // register hash_units_0_gslot_counter
  reg [10 : 0] hash_units_0_gslot_counter;
  wire [10 : 0] hash_units_0_gslot_counter_D_IN;
  wire hash_units_0_gslot_counter_EN;

  // register hash_units_0_init
  reg hash_units_0_init;
  wire hash_units_0_init_D_IN, hash_units_0_init_EN;

  // register hash_units_0_is_miss
  reg hash_units_0_is_miss;
  wire hash_units_0_is_miss_D_IN, hash_units_0_is_miss_EN;

  // register hash_units_1_gslot_counter
  reg [10 : 0] hash_units_1_gslot_counter;
  wire [10 : 0] hash_units_1_gslot_counter_D_IN;
  wire hash_units_1_gslot_counter_EN;

  // register hash_units_1_init
  reg hash_units_1_init;
  wire hash_units_1_init_D_IN, hash_units_1_init_EN;

  // register hash_units_1_is_miss
  reg hash_units_1_is_miss;
  wire hash_units_1_is_miss_D_IN, hash_units_1_is_miss_EN;

  // register hash_units_2_gslot_counter
  reg [10 : 0] hash_units_2_gslot_counter;
  wire [10 : 0] hash_units_2_gslot_counter_D_IN;
  wire hash_units_2_gslot_counter_EN;

  // register hash_units_2_init
  reg hash_units_2_init;
  wire hash_units_2_init_D_IN, hash_units_2_init_EN;

  // register hash_units_2_is_miss
  reg hash_units_2_is_miss;
  wire hash_units_2_is_miss_D_IN, hash_units_2_is_miss_EN;

  // register hash_units_3_gslot_counter
  reg [10 : 0] hash_units_3_gslot_counter;
  wire [10 : 0] hash_units_3_gslot_counter_D_IN;
  wire hash_units_3_gslot_counter_EN;

  // register hash_units_3_init
  reg hash_units_3_init;
  wire hash_units_3_init_D_IN, hash_units_3_init_EN;

  // register hash_units_3_is_miss
  reg hash_units_3_is_miss;
  wire hash_units_3_is_miss_D_IN, hash_units_3_is_miss_EN;

  // register inited
  reg inited;
  wire inited_D_IN, inited_EN;

  // register ldvn_start_reg
  reg ldvn_start_reg;
  wire ldvn_start_reg_D_IN, ldvn_start_reg_EN;

  // register ldvn_start_reg_1
  reg ldvn_start_reg_1;
  wire ldvn_start_reg_1_D_IN, ldvn_start_reg_1_EN;

  // register ldvn_state_can_overlap
  reg ldvn_state_can_overlap;
  wire ldvn_state_can_overlap_D_IN, ldvn_state_can_overlap_EN;

  // register ldvn_state_fired
  reg ldvn_state_fired;
  wire ldvn_state_fired_D_IN, ldvn_state_fired_EN;

  // register ldvn_state_mkFSMstate
  reg [3 : 0] ldvn_state_mkFSMstate;
  reg [3 : 0] ldvn_state_mkFSMstate_D_IN;
  wire ldvn_state_mkFSMstate_EN;

  // register miss_service
  reg miss_service;
  wire miss_service_D_IN, miss_service_EN;

  // register mslot_counter
  reg [9 : 0] mslot_counter;
  wire [9 : 0] mslot_counter_D_IN;
  wire mslot_counter_EN;

  // register mslot_replacement_start_reg
  reg mslot_replacement_start_reg;
  wire mslot_replacement_start_reg_D_IN, mslot_replacement_start_reg_EN;

  // register mslot_replacement_start_reg_1
  reg mslot_replacement_start_reg_1;
  wire mslot_replacement_start_reg_1_D_IN, mslot_replacement_start_reg_1_EN;

  // register mslot_replacement_state_can_overlap
  reg mslot_replacement_state_can_overlap;
  wire mslot_replacement_state_can_overlap_D_IN,
       mslot_replacement_state_can_overlap_EN;

  // register mslot_replacement_state_fired
  reg mslot_replacement_state_fired;
  wire mslot_replacement_state_fired_D_IN, mslot_replacement_state_fired_EN;

  // register mslot_replacement_state_mkFSMstate
  reg [3 : 0] mslot_replacement_state_mkFSMstate;
  reg [3 : 0] mslot_replacement_state_mkFSMstate_D_IN;
  wire mslot_replacement_state_mkFSMstate_EN;

  // register mslot_to_repair
  reg [128 : 0] mslot_to_repair;
  wire [128 : 0] mslot_to_repair_D_IN;
  wire mslot_to_repair_EN;

  // register new_gslots_0
  reg [85 : 0] new_gslots_0;
  wire [85 : 0] new_gslots_0_D_IN;
  wire new_gslots_0_EN;

  // register new_gslots_1
  reg [85 : 0] new_gslots_1;
  wire [85 : 0] new_gslots_1_D_IN;
  wire new_gslots_1_EN;

  // register new_gslots_2
  reg [85 : 0] new_gslots_2;
  wire [85 : 0] new_gslots_2_D_IN;
  wire new_gslots_2_EN;

  // register new_gslots_3
  reg [85 : 0] new_gslots_3;
  wire [85 : 0] new_gslots_3_D_IN;
  wire new_gslots_3_EN;

  // register new_hvals_0
  reg [10 : 0] new_hvals_0;
  wire [10 : 0] new_hvals_0_D_IN;
  wire new_hvals_0_EN;

  // register new_hvals_1
  reg [10 : 0] new_hvals_1;
  wire [10 : 0] new_hvals_1_D_IN;
  wire new_hvals_1_EN;

  // register new_hvals_2
  reg [10 : 0] new_hvals_2;
  wire [10 : 0] new_hvals_2_D_IN;
  wire new_hvals_2_EN;

  // register new_hvals_3
  reg [10 : 0] new_hvals_3;
  wire [10 : 0] new_hvals_3_D_IN;
  wire new_hvals_3_EN;

  // register new_mslot
  reg [128 : 0] new_mslot;
  wire [128 : 0] new_mslot_D_IN;
  wire new_mslot_EN;

  // register repair_g_index
  reg [1 : 0] repair_g_index;
  wire [1 : 0] repair_g_index_D_IN;
  wire repair_g_index_EN;

  // register repair_gslot
  reg [85 : 0] repair_gslot;
  wire [85 : 0] repair_gslot_D_IN;
  wire repair_gslot_EN;

  // register repair_gslots_0
  reg [85 : 0] repair_gslots_0;
  wire [85 : 0] repair_gslots_0_D_IN;
  wire repair_gslots_0_EN;

  // register repair_gslots_1
  reg [85 : 0] repair_gslots_1;
  wire [85 : 0] repair_gslots_1_D_IN;
  wire repair_gslots_1_EN;

  // register repair_gslots_2
  reg [85 : 0] repair_gslots_2;
  wire [85 : 0] repair_gslots_2_D_IN;
  wire repair_gslots_2_EN;

  // register repair_gslots_3
  reg [85 : 0] repair_gslots_3;
  wire [85 : 0] repair_gslots_3_D_IN;
  wire repair_gslots_3_EN;

  // register repair_hvals_0
  reg [10 : 0] repair_hvals_0;
  wire [10 : 0] repair_hvals_0_D_IN;
  wire repair_hvals_0_EN;

  // register repair_hvals_1
  reg [10 : 0] repair_hvals_1;
  wire [10 : 0] repair_hvals_1_D_IN;
  wire repair_hvals_1_EN;

  // register repair_hvals_2
  reg [10 : 0] repair_hvals_2;
  wire [10 : 0] repair_hvals_2_D_IN;
  wire repair_hvals_2_EN;

  // register repair_hvals_3
  reg [10 : 0] repair_hvals_3;
  wire [10 : 0] repair_hvals_3_D_IN;
  wire repair_hvals_3_EN;

  // register repair_mslot
  reg [128 : 0] repair_mslot;
  wire [128 : 0] repair_mslot_D_IN;
  wire repair_mslot_EN;

  // register stage
  reg [1 : 0] stage;
  wire [1 : 0] stage_D_IN;
  wire stage_EN;

  // register victim_g_index
  reg [1 : 0] victim_g_index;
  wire [1 : 0] victim_g_index_D_IN;
  wire victim_g_index_EN;

  // register victim_gslot
  reg [85 : 0] victim_gslot;
  wire [85 : 0] victim_gslot_D_IN;
  wire victim_gslot_EN;

  // register victim_mslot
  reg [128 : 0] victim_mslot;
  wire [128 : 0] victim_mslot_D_IN;
  wire victim_mslot_EN;

  // register victim_mslot_addr
  reg [9 : 0] victim_mslot_addr;
  wire [9 : 0] victim_mslot_addr_D_IN;
  wire victim_mslot_addr_EN;

  // ports of submodule hash_units_0_g_table
  reg [85 : 0] hash_units_0_g_table_DIA, hash_units_0_g_table_DIB;
  reg [10 : 0] hash_units_0_g_table_ADDRA, hash_units_0_g_table_ADDRB;
  wire [85 : 0] hash_units_0_g_table_DOA;
  wire hash_units_0_g_table_ENA,
       hash_units_0_g_table_ENB,
       hash_units_0_g_table_WEA,
       hash_units_0_g_table_WEB;

  // ports of submodule hash_units_1_g_table
  reg [85 : 0] hash_units_1_g_table_DIA, hash_units_1_g_table_DIB;
  reg [10 : 0] hash_units_1_g_table_ADDRA, hash_units_1_g_table_ADDRB;
  wire [85 : 0] hash_units_1_g_table_DOA;
  wire hash_units_1_g_table_ENA,
       hash_units_1_g_table_ENB,
       hash_units_1_g_table_WEA,
       hash_units_1_g_table_WEB;

  // ports of submodule hash_units_2_g_table
  reg [85 : 0] hash_units_2_g_table_DIA, hash_units_2_g_table_DIB;
  reg [10 : 0] hash_units_2_g_table_ADDRA, hash_units_2_g_table_ADDRB;
  wire [85 : 0] hash_units_2_g_table_DOA;
  wire hash_units_2_g_table_ENA,
       hash_units_2_g_table_ENB,
       hash_units_2_g_table_WEA,
       hash_units_2_g_table_WEB;

  // ports of submodule hash_units_3_g_table
  reg [85 : 0] hash_units_3_g_table_DIA, hash_units_3_g_table_DIB;
  reg [10 : 0] hash_units_3_g_table_ADDRA, hash_units_3_g_table_ADDRB;
  wire [85 : 0] hash_units_3_g_table_DOA;
  wire hash_units_3_g_table_ENA,
       hash_units_3_g_table_ENB,
       hash_units_3_g_table_WEA,
       hash_units_3_g_table_WEB;

  // ports of submodule m_table
  reg [128 : 0] m_table_DIB;
  wire [128 : 0] m_table_DIA, m_table_DOA;
  wire [9 : 0] m_table_ADDRA, m_table_ADDRB;
  wire m_table_ENA, m_table_ENB, m_table_WEA, m_table_WEB;

  // ports of submodule stage1_ff
  wire [63 : 0] stage1_ff_D_IN, stage1_ff_D_OUT;
  wire stage1_ff_CLR,
       stage1_ff_DEQ,
       stage1_ff_EMPTY_N,
       stage1_ff_ENQ,
       stage1_ff_FULL_N;

  // ports of submodule stage2_ff
  wire [63 : 0] stage2_ff_D_IN, stage2_ff_D_OUT;
  wire stage2_ff_CLR,
       stage2_ff_DEQ,
       stage2_ff_EMPTY_N,
       stage2_ff_ENQ,
       stage2_ff_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_mslot_replacement_action_l258c9,
       WILL_FIRE_RL_ldvn_action_l22c9,
       WILL_FIRE_RL_ldvn_action_l30c9,
       WILL_FIRE_RL_ldvn_action_l99c9,
       WILL_FIRE_RL_ldvn_fsm_start,
       WILL_FIRE_RL_ldvn_idle_l20c1,
       WILL_FIRE_RL_lookup_gtables,
       WILL_FIRE_RL_lookup_mtable,
       WILL_FIRE_RL_mslot_replacement_action_l121c9,
       WILL_FIRE_RL_mslot_replacement_action_l128c9,
       WILL_FIRE_RL_mslot_replacement_action_l164c9,
       WILL_FIRE_RL_mslot_replacement_action_l172c9,
       WILL_FIRE_RL_mslot_replacement_action_l243c9,
       WILL_FIRE_RL_mslot_replacement_action_l251c9,
       WILL_FIRE_RL_mslot_replacement_action_l258c9,
       WILL_FIRE_RL_mslot_replacement_fsm_start,
       WILL_FIRE_RL_mslot_replacement_idle_l119c1;

  // inputs to muxes for submodule ports
  reg [85 : 0] MUX_evictee_gslots_0_write_1__VAL_1,
	       MUX_evictee_gslots_1_write_1__VAL_1,
	       MUX_evictee_gslots_2_write_1__VAL_1,
	       MUX_evictee_gslots_3_write_1__VAL_1;
  wire [85 : 0] MUX_new_gslots_0_write_1__VAL_2,
		MUX_new_gslots_1_write_1__VAL_2,
		MUX_new_gslots_2_write_1__VAL_2,
		MUX_new_gslots_3_write_1__VAL_2,
		MUX_repair_gslots_0_write_1__VAL_2,
		MUX_repair_gslots_1_write_1__VAL_2,
		MUX_repair_gslots_2_write_1__VAL_2,
		MUX_repair_gslots_3_write_1__VAL_2;
  wire [10 : 0] MUX_hash_units_0_g_table_a_put_2__VAL_1,
		MUX_hash_units_0_g_table_a_put_2__VAL_2,
		MUX_hash_units_0_g_table_a_put_2__VAL_3,
		MUX_hash_units_0_g_table_a_put_2__VAL_4,
		MUX_hash_units_1_g_table_a_put_2__VAL_1,
		MUX_hash_units_1_g_table_a_put_2__VAL_2,
		MUX_hash_units_1_g_table_a_put_2__VAL_3,
		MUX_hash_units_1_g_table_a_put_2__VAL_4,
		MUX_hash_units_2_g_table_a_put_2__VAL_1,
		MUX_hash_units_2_g_table_a_put_2__VAL_2,
		MUX_hash_units_2_g_table_a_put_2__VAL_3,
		MUX_hash_units_2_g_table_a_put_2__VAL_4,
		MUX_hash_units_3_g_table_a_put_2__VAL_1,
		MUX_hash_units_3_g_table_a_put_2__VAL_2,
		MUX_hash_units_3_g_table_a_put_2__VAL_3,
		MUX_hash_units_3_g_table_a_put_2__VAL_4;
  wire [9 : 0] MUX_mslot_counter_write_1__VAL_1;
  wire MUX_evictee_gslots_2_write_1__SEL_1,
       MUX_inited_write_1__SEL_1,
       MUX_ldvn_start_reg_write_1__SEL_1,
       MUX_m_table_b_put_1__SEL_1,
       MUX_m_table_b_put_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h108784, v__h109448, v__h110011, v__h110190;
  wire [85 : 0] IF_new_gslots_2_36_BITS_1_TO_0_37_ULT_IF_new_g_ETC___d948,
		IF_repair_gslots_2_00_BITS_1_TO_0_01_ULT_IF_re_ETC___d312;
  wire [63 : 0] _theResult_____2_fst_value__h106781,
		_theResult_____2_fst_value__h106785,
		_theResult_____2_fst_value__h106789,
		_theResult_____2_fst_value__h106805,
		_theResult_____2_fst_value__h106809,
		_theResult_____2_fst_value__h106813,
		_theResult_____2_fst_value__h106817,
		_theResult_____2_fst_value__h40178,
		_theResult_____2_fst_value__h40182,
		_theResult_____2_fst_value__h40186,
		_theResult_____2_fst_value__h40202,
		_theResult_____2_fst_value__h40206,
		_theResult_____2_fst_value__h40210,
		_theResult_____2_fst_value__h40214,
		n_value__h106740,
		n_value__h40141,
		re_value__h109723,
		x_wget__h2141;
  wire [10 : 0] IF_evictee_mslot_28_BIT_107_28_THEN_1_ELSE_0___d625,
		IF_evictee_mslot_28_BIT_109_47_THEN_1_ELSE_0___d560,
		IF_evictee_mslot_28_BIT_118_30_THEN_1_ELSE_0___d628,
		IF_evictee_mslot_28_BIT_119_38_THEN_2_ELSE_0___d631,
		IF_evictee_mslot_28_BIT_120_35_THEN_1_ELSE_0___d563,
		IF_evictee_mslot_28_BIT_65_40_THEN_1_ELSE_0___d549,
		IF_evictee_mslot_28_BIT_74_23_THEN_1_ELSE_0___d617,
		IF_evictee_mslot_28_BIT_76_41_THEN_1_ELSE_0___d551,
		IF_evictee_mslot_28_BIT_85_24_THEN_1_ELSE_0___d619,
		IF_evictee_mslot_28_BIT_87_43_THEN_1_ELSE_0___d554,
		IF_evictee_mslot_28_BIT_96_26_THEN_1_ELSE_0___d622,
		IF_evictee_mslot_28_BIT_98_45_THEN_1_ELSE_0___d557,
		IF_evictee_mslot_BIT_102_THEN_1_ELSE_0__q10,
		IF_evictee_mslot_BIT_113_THEN_1_ELSE_0__q11,
		IF_evictee_mslot_BIT_124_THEN_1_ELSE_0__q12,
		IF_evictee_mslot_BIT_69_THEN_1_ELSE_0__q7,
		IF_evictee_mslot_BIT_80_THEN_1_ELSE_0__q8,
		IF_evictee_mslot_BIT_91_THEN_1_ELSE_0__q9,
		IF_lookup_key_key_BIT_10_169_THEN_1_ELSE_0___d1263,
		IF_lookup_key_key_BIT_12_087_THEN_1_ELSE_0___d1197,
		IF_lookup_key_key_BIT_16_THEN_1_ELSE_0__q20,
		IF_lookup_key_key_BIT_1_086_THEN_1_ELSE_0___d1195,
		IF_lookup_key_key_BIT_21_170_THEN_1_ELSE_0___d1265,
		IF_lookup_key_key_BIT_23_089_THEN_1_ELSE_0___d1200,
		IF_lookup_key_key_BIT_27_THEN_1_ELSE_0__q21,
		IF_lookup_key_key_BIT_32_172_THEN_1_ELSE_0___d1268,
		IF_lookup_key_key_BIT_34_091_THEN_1_ELSE_0___d1203,
		IF_lookup_key_key_BIT_38_THEN_1_ELSE_0__q22,
		IF_lookup_key_key_BIT_43_174_THEN_1_ELSE_0___d1271,
		IF_lookup_key_key_BIT_45_093_THEN_1_ELSE_0___d1206,
		IF_lookup_key_key_BIT_49_THEN_1_ELSE_0__q23,
		IF_lookup_key_key_BIT_54_176_THEN_1_ELSE_0___d1274,
		IF_lookup_key_key_BIT_55_084_THEN_2_ELSE_0___d1277,
		IF_lookup_key_key_BIT_56_181_THEN_1_ELSE_0___d1209,
		IF_lookup_key_key_BIT_5_THEN_1_ELSE_0__q19,
		IF_lookup_key_key_BIT_60_THEN_1_ELSE_0__q24,
		IF_mslot_to_repair_4_BIT_107_64_THEN_1_ELSE_0___d261,
		IF_mslot_to_repair_4_BIT_109_3_THEN_1_ELSE_0___d196,
		IF_mslot_to_repair_4_BIT_118_66_THEN_1_ELSE_0___d264,
		IF_mslot_to_repair_4_BIT_119_4_THEN_2_ELSE_0___d267,
		IF_mslot_to_repair_4_BIT_120_71_THEN_1_ELSE_0___d199,
		IF_mslot_to_repair_4_BIT_65_6_THEN_1_ELSE_0___d185,
		IF_mslot_to_repair_4_BIT_74_59_THEN_1_ELSE_0___d253,
		IF_mslot_to_repair_4_BIT_76_7_THEN_1_ELSE_0___d187,
		IF_mslot_to_repair_4_BIT_85_60_THEN_1_ELSE_0___d255,
		IF_mslot_to_repair_4_BIT_87_9_THEN_1_ELSE_0___d190,
		IF_mslot_to_repair_4_BIT_96_62_THEN_1_ELSE_0___d258,
		IF_mslot_to_repair_4_BIT_98_1_THEN_1_ELSE_0___d193,
		IF_mslot_to_repair_BIT_102_THEN_1_ELSE_0__q4,
		IF_mslot_to_repair_BIT_113_THEN_1_ELSE_0__q5,
		IF_mslot_to_repair_BIT_124_THEN_1_ELSE_0__q6,
		IF_mslot_to_repair_BIT_69_THEN_1_ELSE_0__q1,
		IF_mslot_to_repair_BIT_80_THEN_1_ELSE_0__q2,
		IF_mslot_to_repair_BIT_91_THEN_1_ELSE_0__q3,
		IF_new_mslot_04_BIT_107_04_THEN_1_ELSE_0___d901,
		IF_new_mslot_04_BIT_109_23_THEN_1_ELSE_0___d836,
		IF_new_mslot_04_BIT_118_06_THEN_1_ELSE_0___d904,
		IF_new_mslot_04_BIT_119_14_THEN_2_ELSE_0___d907,
		IF_new_mslot_04_BIT_120_11_THEN_1_ELSE_0___d839,
		IF_new_mslot_04_BIT_65_16_THEN_1_ELSE_0___d825,
		IF_new_mslot_04_BIT_74_99_THEN_1_ELSE_0___d893,
		IF_new_mslot_04_BIT_76_17_THEN_1_ELSE_0___d827,
		IF_new_mslot_04_BIT_85_00_THEN_1_ELSE_0___d895,
		IF_new_mslot_04_BIT_87_19_THEN_1_ELSE_0___d830,
		IF_new_mslot_04_BIT_96_02_THEN_1_ELSE_0___d898,
		IF_new_mslot_04_BIT_98_21_THEN_1_ELSE_0___d833,
		IF_new_mslot_BIT_102_THEN_1_ELSE_0__q16,
		IF_new_mslot_BIT_113_THEN_1_ELSE_0__q17,
		IF_new_mslot_BIT_124_THEN_1_ELSE_0__q18,
		IF_new_mslot_BIT_69_THEN_1_ELSE_0__q13,
		IF_new_mslot_BIT_80_THEN_1_ELSE_0__q14,
		IF_new_mslot_BIT_91_THEN_1_ELSE_0__q15;
  wire [9 : 0] _theResult_____2_fst_maddr__h106782,
	       _theResult_____2_fst_maddr__h106786,
	       _theResult_____2_fst_maddr__h106790,
	       _theResult_____2_fst_maddr__h106806,
	       _theResult_____2_fst_maddr__h106810,
	       _theResult_____2_fst_maddr__h106814,
	       _theResult_____2_fst_maddr__h40179,
	       _theResult_____2_fst_maddr__h40183,
	       _theResult_____2_fst_maddr__h40187,
	       _theResult_____2_fst_maddr__h40203,
	       _theResult_____2_fst_maddr__h40207,
	       _theResult_____2_fst_maddr__h40211,
	       _theResult_____3_fst_mslot__h105896,
	       _theResult_____3_fst_mslot__h105917,
	       evictee_mslot_28_BIT_65_40_XOR_evictee_mslot_2_ETC___d534,
	       lookup_key_key_BIT_1_086_XOR_lookup_key_key_BI_ETC___d1180,
	       mslot__h40163,
	       mslot__h40435,
	       mslot__h40560,
	       mslot__h40685,
	       mslot_to_repair_4_BIT_65_6_XOR_mslot_to_repair_ETC___d170,
	       n_maddr__h106741,
	       n_maddr__h40142,
	       new_mslot_04_BIT_65_16_XOR_new_mslot_04_BIT_76_ETC___d810,
	       re_maddr__h109722,
	       tmp_gslot_maddr__h106778,
	       tmp_gslot_maddr__h40175,
	       x__h108376;
  wire [8 : 0] evictee_mslot_28_BIT_66_49_XOR_evictee_mslot_2_ETC___d652,
	       evictee_mslot_28_BIT_73_14_XOR_evictee_mslot_2_ETC___d585,
	       lookup_key_key_BIT_2_095_XOR_lookup_key_key_BI_ETC___d1298,
	       lookup_key_key_BIT_9_160_XOR_lookup_key_key_BI_ETC___d1231,
	       mslot_to_repair_4_BIT_66_5_XOR_mslot_to_repair_ETC___d288,
	       mslot_to_repair_4_BIT_73_50_XOR_mslot_to_repai_ETC___d221,
	       new_mslot_04_BIT_66_25_XOR_new_mslot_04_BIT_77_ETC___d928,
	       new_mslot_04_BIT_73_90_XOR_new_mslot_04_BIT_84_ETC___d861;
  wire [4 : 0] evictee_mslot_28_BIT_69_77_XOR_evictee_mslot_2_ETC___d578,
	       evictee_mslot_28_BIT_70_86_XOR_evictee_mslot_2_ETC___d645,
	       lookup_key_key_BIT_5_123_XOR_lookup_key_key_BI_ETC___d1224,
	       lookup_key_key_BIT_6_132_XOR_lookup_key_key_BI_ETC___d1291,
	       mslot_to_repair_4_BIT_69_13_XOR_mslot_to_repai_ETC___d214,
	       mslot_to_repair_4_BIT_70_22_XOR_mslot_to_repai_ETC___d281,
	       new_mslot_04_BIT_69_53_XOR_new_mslot_04_BIT_80_ETC___d854,
	       new_mslot_04_BIT_70_62_XOR_new_mslot_04_BIT_81_ETC___d921;
  wire [1 : 0] _theResult_____3_fst_degree__h105897,
	       _theResult_____3_fst_degree__h105918,
	       _theResult_____3_fst_degree__h39415,
	       _theResult_____3_fst_degree__h39436,
	       n_degree__h106750,
	       n_degree__h107047,
	       n_degree__h107195,
	       n_degree__h107343,
	       x_degree__h83255,
	       x_degree__h83554,
	       x_degree__h83853,
	       x_degree__h84152;
  wire IF_evictee_mslot_28_BIT_65_40_THEN_1_ELSE_0_49_ETC___d559,
       IF_evictee_mslot_28_BIT_65_40_THEN_1_ELSE_0_49_ETC___d575,
       IF_evictee_mslot_28_BIT_74_23_THEN_1_ELSE_0_17_ETC___d627,
       IF_evictee_mslot_28_BIT_74_23_THEN_1_ELSE_0_17_ETC___d642,
       IF_lookup_key_key_BIT_10_169_THEN_1_ELSE_0_263_ETC___d1273,
       IF_lookup_key_key_BIT_10_169_THEN_1_ELSE_0_263_ETC___d1288,
       IF_lookup_key_key_BIT_1_086_THEN_1_ELSE_0_195__ETC___d1205,
       IF_lookup_key_key_BIT_1_086_THEN_1_ELSE_0_195__ETC___d1221,
       IF_mslot_to_repair_4_BIT_65_6_THEN_1_ELSE_0_85_ETC___d195,
       IF_mslot_to_repair_4_BIT_65_6_THEN_1_ELSE_0_85_ETC___d211,
       IF_mslot_to_repair_4_BIT_74_59_THEN_1_ELSE_0_5_ETC___d263,
       IF_mslot_to_repair_4_BIT_74_59_THEN_1_ELSE_0_5_ETC___d278,
       IF_new_mslot_04_BIT_65_16_THEN_1_ELSE_0_25_BIT_ETC___d835,
       IF_new_mslot_04_BIT_65_16_THEN_1_ELSE_0_25_BIT_ETC___d851,
       IF_new_mslot_04_BIT_74_99_THEN_1_ELSE_0_93_BIT_ETC___d903,
       IF_new_mslot_04_BIT_74_99_THEN_1_ELSE_0_93_BIT_ETC___d918,
       evictee_mslot_28_BIT_64_29_XOR_evictee_mslot_2_ETC___d437,
       evictee_mslot_28_BIT_66_49_XOR_evictee_mslot_2_ETC___d457,
       evictee_mslot_28_BIT_67_58_XOR_evictee_mslot_2_ETC___d466,
       evictee_mslot_28_BIT_68_68_XOR_evictee_mslot_2_ETC___d476,
       evictee_mslot_28_BIT_69_77_XOR_evictee_mslot_2_ETC___d485,
       evictee_mslot_28_BIT_70_86_XOR_evictee_mslot_2_ETC___d494,
       evictee_mslot_28_BIT_71_95_XOR_evictee_mslot_2_ETC___d503,
       evictee_mslot_28_BIT_72_05_XOR_evictee_mslot_2_ETC___d513,
       evictee_mslot_28_BIT_72_05_XOR_evictee_mslot_2_ETC___d566,
       evictee_mslot_28_BIT_73_14_XOR_evictee_mslot_2_ETC___d522,
       evictee_mslot_28_BIT_74_23_XOR_evictee_mslot_2_ETC___d531,
       hash_units_0_init_AND_hash_units_1_init_AND_ha_ETC___d373,
       ldvn_abort_whas__8_AND_ldvn_abort_wget__9_0_OR_ETC___d387,
       lookup_key_key_BIT_0_075_XOR_lookup_key_key_BI_ETC___d1083,
       lookup_key_key_BIT_10_169_XOR_lookup_key_key_B_ETC___d1177,
       lookup_key_key_BIT_2_095_XOR_lookup_key_key_BI_ETC___d1103,
       lookup_key_key_BIT_3_104_XOR_lookup_key_key_BI_ETC___d1112,
       lookup_key_key_BIT_4_114_XOR_lookup_key_key_BI_ETC___d1122,
       lookup_key_key_BIT_5_123_XOR_lookup_key_key_BI_ETC___d1131,
       lookup_key_key_BIT_6_132_XOR_lookup_key_key_BI_ETC___d1140,
       lookup_key_key_BIT_7_141_XOR_lookup_key_key_BI_ETC___d1149,
       lookup_key_key_BIT_8_151_XOR_lookup_key_key_BI_ETC___d1159,
       lookup_key_key_BIT_8_151_XOR_lookup_key_key_BI_ETC___d1212,
       lookup_key_key_BIT_9_160_XOR_lookup_key_key_BI_ETC___d1168,
       mslot_replacement_abort_whas__93_AND_mslot_rep_ETC___d1037,
       mslot_to_repair_4_BIT_64_5_XOR_mslot_to_repair_ETC___d73,
       mslot_to_repair_4_BIT_66_5_XOR_mslot_to_repair_ETC___d93,
       mslot_to_repair_4_BIT_67_4_XOR_mslot_to_repair_ETC___d102,
       mslot_to_repair_4_BIT_68_04_XOR_mslot_to_repai_ETC___d112,
       mslot_to_repair_4_BIT_69_13_XOR_mslot_to_repai_ETC___d121,
       mslot_to_repair_4_BIT_70_22_XOR_mslot_to_repai_ETC___d130,
       mslot_to_repair_4_BIT_71_31_XOR_mslot_to_repai_ETC___d139,
       mslot_to_repair_4_BIT_72_41_XOR_mslot_to_repai_ETC___d149,
       mslot_to_repair_4_BIT_72_41_XOR_mslot_to_repai_ETC___d202,
       mslot_to_repair_4_BIT_73_50_XOR_mslot_to_repai_ETC___d158,
       mslot_to_repair_4_BIT_74_59_XOR_mslot_to_repai_ETC___d167,
       new_gslots_1_38_BITS_1_TO_0_39_ULT_new_gslots__ETC___d942,
       new_gslots_2_36_BITS_1_TO_0_37_ULT_IF_new_gslo_ETC___d944,
       new_gslots_3_34_BITS_1_TO_0_35_ULT_IF_new_gslo_ETC___d946,
       new_mslot_04_BIT_64_05_XOR_new_mslot_04_BIT_75_ETC___d713,
       new_mslot_04_BIT_66_25_XOR_new_mslot_04_BIT_77_ETC___d733,
       new_mslot_04_BIT_67_34_XOR_new_mslot_04_BIT_78_ETC___d742,
       new_mslot_04_BIT_68_44_XOR_new_mslot_04_BIT_79_ETC___d752,
       new_mslot_04_BIT_69_53_XOR_new_mslot_04_BIT_80_ETC___d761,
       new_mslot_04_BIT_70_62_XOR_new_mslot_04_BIT_81_ETC___d770,
       new_mslot_04_BIT_71_71_XOR_new_mslot_04_BIT_82_ETC___d779,
       new_mslot_04_BIT_72_81_XOR_new_mslot_04_BIT_83_ETC___d789,
       new_mslot_04_BIT_72_81_XOR_new_mslot_04_BIT_83_ETC___d842,
       new_mslot_04_BIT_73_90_XOR_new_mslot_04_BIT_84_ETC___d798,
       new_mslot_04_BIT_74_99_XOR_new_mslot_04_BIT_85_ETC___d807,
       repair_gslots_1_02_BITS_1_TO_0_03_ULT_repair_g_ETC___d306,
       repair_gslots_2_00_BITS_1_TO_0_01_ULT_IF_repai_ETC___d308,
       repair_gslots_3_98_BITS_1_TO_0_99_ULT_IF_repai_ETC___d310;

  // value method is_enabled
  assign is_enabled = inited ;
  assign RDY_is_enabled = 1'd1 ;

  // action method flush
  assign RDY_flush = 1'd1 ;

  // action method lookup_key
  assign RDY_lookup_key = inited && stage1_ff_FULL_N ;

  // value method get_value
  assign get_value = rec_value_whas ? x_wget__h2141 : 64'd0 ;
  assign RDY_get_value = 1'd1 ;

  // value method is_hit
  assign is_hit = WILL_FIRE_RL_lookup_mtable && is_hit_wire_wget ;
  assign RDY_is_hit = 1'd1 ;

  // action method new_key_value
  assign RDY_new_key_value =
	     inited &&
	     (miss_service ||
	      mslot_replacement_abort_whas__93_AND_mslot_rep_ETC___d1037 &&
	      !mslot_replacement_start_reg) ;

  // submodule hash_units_0_g_table
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd86),
	  .MEMSIZE(12'd2048)) hash_units_0_g_table(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(hash_units_0_g_table_ADDRA),
						   .ADDRB(hash_units_0_g_table_ADDRB),
						   .DIA(hash_units_0_g_table_DIA),
						   .DIB(hash_units_0_g_table_DIB),
						   .WEA(hash_units_0_g_table_WEA),
						   .WEB(hash_units_0_g_table_WEB),
						   .ENA(hash_units_0_g_table_ENA),
						   .ENB(hash_units_0_g_table_ENB),
						   .DOA(hash_units_0_g_table_DOA),
						   .DOB());

  // submodule hash_units_1_g_table
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd86),
	  .MEMSIZE(12'd2048)) hash_units_1_g_table(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(hash_units_1_g_table_ADDRA),
						   .ADDRB(hash_units_1_g_table_ADDRB),
						   .DIA(hash_units_1_g_table_DIA),
						   .DIB(hash_units_1_g_table_DIB),
						   .WEA(hash_units_1_g_table_WEA),
						   .WEB(hash_units_1_g_table_WEB),
						   .ENA(hash_units_1_g_table_ENA),
						   .ENB(hash_units_1_g_table_ENB),
						   .DOA(hash_units_1_g_table_DOA),
						   .DOB());

  // submodule hash_units_2_g_table
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd86),
	  .MEMSIZE(12'd2048)) hash_units_2_g_table(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(hash_units_2_g_table_ADDRA),
						   .ADDRB(hash_units_2_g_table_ADDRB),
						   .DIA(hash_units_2_g_table_DIA),
						   .DIB(hash_units_2_g_table_DIB),
						   .WEA(hash_units_2_g_table_WEA),
						   .WEB(hash_units_2_g_table_WEB),
						   .ENA(hash_units_2_g_table_ENA),
						   .ENB(hash_units_2_g_table_ENB),
						   .DOA(hash_units_2_g_table_DOA),
						   .DOB());

  // submodule hash_units_3_g_table
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd86),
	  .MEMSIZE(12'd2048)) hash_units_3_g_table(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(hash_units_3_g_table_ADDRA),
						   .ADDRB(hash_units_3_g_table_ADDRB),
						   .DIA(hash_units_3_g_table_DIA),
						   .DIB(hash_units_3_g_table_DIB),
						   .WEA(hash_units_3_g_table_WEA),
						   .WEB(hash_units_3_g_table_WEB),
						   .ENA(hash_units_3_g_table_ENA),
						   .ENB(hash_units_3_g_table_ENB),
						   .DOA(hash_units_3_g_table_DOA),
						   .DOB());

  // submodule m_table
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd129),
	  .MEMSIZE(11'd1024)) m_table(.CLKA(CLK),
				      .CLKB(CLK),
				      .ADDRA(m_table_ADDRA),
				      .ADDRB(m_table_ADDRB),
				      .DIA(m_table_DIA),
				      .DIB(m_table_DIB),
				      .WEA(m_table_WEA),
				      .WEB(m_table_WEB),
				      .ENA(m_table_ENA),
				      .ENB(m_table_ENB),
				      .DOA(m_table_DOA),
				      .DOB());

  // submodule stage1_ff
  FIFO2 #(.width(32'd64), .guarded(32'd1)) stage1_ff(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(stage1_ff_D_IN),
						     .ENQ(stage1_ff_ENQ),
						     .DEQ(stage1_ff_DEQ),
						     .CLR(stage1_ff_CLR),
						     .D_OUT(stage1_ff_D_OUT),
						     .FULL_N(stage1_ff_FULL_N),
						     .EMPTY_N(stage1_ff_EMPTY_N));

  // submodule stage2_ff
  FIFO2 #(.width(32'd64), .guarded(32'd1)) stage2_ff(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(stage2_ff_D_IN),
						     .ENQ(stage2_ff_ENQ),
						     .DEQ(stage2_ff_DEQ),
						     .CLR(stage2_ff_CLR),
						     .D_OUT(stage2_ff_D_OUT),
						     .FULL_N(stage2_ff_FULL_N),
						     .EMPTY_N(stage2_ff_EMPTY_N));

  // rule RL_lookup_gtables
  assign WILL_FIRE_RL_lookup_gtables =
	     stage1_ff_EMPTY_N && stage2_ff_FULL_N && inited ;

  // rule RL_lookup_mtable
  assign WILL_FIRE_RL_lookup_mtable =
	     stage2_ff_EMPTY_N && inited && !WILL_FIRE_RL_lookup_gtables ;

  // rule RL_ldvn_action_l30c9
  assign WILL_FIRE_RL_ldvn_action_l30c9 =
	     ldvn_state_mkFSMstate == 4'd1 && !EN_lookup_key ;

  // rule RL_ldvn_action_l99c9
  assign WILL_FIRE_RL_ldvn_action_l99c9 =
	     hash_units_0_init_AND_hash_units_1_init_AND_ha_ETC___d373 &&
	     ldvn_state_mkFSMstate == 4'd5 ;

  // rule RL_ldvn_fsm_start
  assign WILL_FIRE_RL_ldvn_fsm_start =
	     ldvn_abort_whas__8_AND_ldvn_abort_wget__9_0_OR_ETC___d387 &&
	     ldvn_start_reg ;

  // rule RL_ldvn_action_l22c9
  assign WILL_FIRE_RL_ldvn_action_l22c9 =
	     ldvn_start_wire_whas &&
	     (ldvn_state_mkFSMstate == 4'd0 ||
	      ldvn_state_mkFSMstate == 4'd7) ;

  // rule RL_ldvn_idle_l20c1
  assign WILL_FIRE_RL_ldvn_idle_l20c1 =
	     !ldvn_start_wire_whas && ldvn_state_mkFSMstate == 4'd7 ;

  // rule RL_mslot_replacement_action_l128c9
  assign WILL_FIRE_RL_mslot_replacement_action_l128c9 =
	     mslot_replacement_state_mkFSMstate == 4'd1 &&
	     !WILL_FIRE_RL_ldvn_action_l30c9 &&
	     !EN_lookup_key ;

  // rule RL_mslot_replacement_action_l164c9
  assign WILL_FIRE_RL_mslot_replacement_action_l164c9 =
	     hash_units_0_init_AND_hash_units_1_init_AND_ha_ETC___d373 &&
	     mslot_replacement_state_mkFSMstate == 4'd4 &&
	     !WILL_FIRE_RL_ldvn_action_l99c9 ;

  // rule RL_mslot_replacement_action_l172c9
  assign WILL_FIRE_RL_mslot_replacement_action_l172c9 =
	     mslot_replacement_state_mkFSMstate == 4'd5 &&
	     !WILL_FIRE_RL_ldvn_action_l30c9 &&
	     !EN_lookup_key ;

  // rule RL_mslot_replacement_action_l243c9
  assign WILL_FIRE_RL_mslot_replacement_action_l243c9 =
	     hash_units_0_init_AND_hash_units_1_init_AND_ha_ETC___d373 &&
	     mslot_replacement_state_mkFSMstate == 4'd9 &&
	     !WILL_FIRE_RL_ldvn_action_l99c9 ;

  // rule RL_mslot_replacement_action_l251c9
  assign WILL_FIRE_RL_mslot_replacement_action_l251c9 =
	     mslot_replacement_state_mkFSMstate == 4'd10 && !(!inited) &&
	     !EN_new_key_value ;

  // rule RL_mslot_replacement_action_l258c9
  assign CAN_FIRE_RL_mslot_replacement_action_l258c9 =
	     (victim_gslot[1:0] == 2'd0 ||
	      ldvn_abort_whas__8_AND_ldvn_abort_wget__9_0_OR_ETC___d387 &&
	      !ldvn_start_reg) &&
	     mslot_replacement_state_mkFSMstate == 4'd11 ;
  assign WILL_FIRE_RL_mslot_replacement_action_l258c9 =
	     CAN_FIRE_RL_mslot_replacement_action_l258c9 &&
	     !WILL_FIRE_RL_ldvn_fsm_start &&
	     !(!inited) &&
	     !WILL_FIRE_RL_lookup_gtables ;

  // rule RL_mslot_replacement_fsm_start
  assign WILL_FIRE_RL_mslot_replacement_fsm_start =
	     mslot_replacement_abort_whas__93_AND_mslot_rep_ETC___d1037 &&
	     mslot_replacement_start_reg &&
	     !EN_new_key_value ;

  // rule RL_mslot_replacement_action_l121c9
  assign WILL_FIRE_RL_mslot_replacement_action_l121c9 =
	     mslot_replacement_start_wire_whas &&
	     (mslot_replacement_state_mkFSMstate == 4'd0 ||
	      mslot_replacement_state_mkFSMstate == 4'd12) ;

  // rule RL_mslot_replacement_idle_l119c1
  assign WILL_FIRE_RL_mslot_replacement_idle_l119c1 =
	     !mslot_replacement_start_wire_whas &&
	     mslot_replacement_state_mkFSMstate == 4'd12 ;

  // inputs to muxes for submodule ports
  assign MUX_evictee_gslots_2_write_1__SEL_1 =
	     mslot_replacement_state_mkFSMstate == 4'd3 &&
	     evictee_mslot[128] ;
  assign MUX_inited_write_1__SEL_1 =
	     WILL_FIRE_RL_mslot_replacement_action_l258c9 &&
	     victim_gslot[1:0] == 2'd0 ;
  assign MUX_ldvn_start_reg_write_1__SEL_1 =
	     WILL_FIRE_RL_mslot_replacement_action_l258c9 &&
	     victim_gslot[1:0] != 2'd0 ;
  assign MUX_m_table_b_put_1__SEL_1 =
	     !inited && (hash_units_0_init || mslot_counter != 10'd1023) ;
  assign MUX_m_table_b_put_1__SEL_2 = EN_new_key_value && !miss_service ;
  always@(evictee_gslots_0 or x_degree__h83255)
  begin
    case (evictee_gslots_0[1:0])
      2'd0, 2'd1: MUX_evictee_gslots_0_write_1__VAL_1 = 86'd0;
      default: MUX_evictee_gslots_0_write_1__VAL_1 =
		   { evictee_gslots_0[85:2], x_degree__h83255 };
    endcase
  end
  always@(evictee_gslots_1 or x_degree__h83554)
  begin
    case (evictee_gslots_1[1:0])
      2'd0, 2'd1: MUX_evictee_gslots_1_write_1__VAL_1 = 86'd0;
      default: MUX_evictee_gslots_1_write_1__VAL_1 =
		   { evictee_gslots_1[85:2], x_degree__h83554 };
    endcase
  end
  always@(evictee_gslots_2 or x_degree__h83853)
  begin
    case (evictee_gslots_2[1:0])
      2'd0, 2'd1: MUX_evictee_gslots_2_write_1__VAL_1 = 86'd0;
      default: MUX_evictee_gslots_2_write_1__VAL_1 =
		   { evictee_gslots_2[85:2], x_degree__h83853 };
    endcase
  end
  always@(evictee_gslots_3 or x_degree__h84152)
  begin
    case (evictee_gslots_3[1:0])
      2'd0, 2'd1: MUX_evictee_gslots_3_write_1__VAL_1 = 86'd0;
      default: MUX_evictee_gslots_3_write_1__VAL_1 =
		   { evictee_gslots_3[85:2], x_degree__h84152 };
    endcase
  end
  assign MUX_hash_units_0_g_table_a_put_2__VAL_1 =
	     { mslot_to_repair_4_BIT_64_5_XOR_mslot_to_repair_ETC___d73 ^
	       mslot_to_repair[119],
	       mslot_to_repair_4_BIT_65_6_XOR_mslot_to_repair_ETC___d170 ^
	       { mslot_to_repair[120],
		 mslot_to_repair[121],
		 mslot_to_repair[122],
		 mslot_to_repair[123],
		 mslot_to_repair[124],
		 mslot_to_repair[125],
		 mslot_to_repair[126],
		 mslot_to_repair[127],
		 2'd0 } } ;
  assign MUX_hash_units_0_g_table_a_put_2__VAL_2 =
	     { evictee_mslot_28_BIT_64_29_XOR_evictee_mslot_2_ETC___d437 ^
	       evictee_mslot[119],
	       evictee_mslot_28_BIT_65_40_XOR_evictee_mslot_2_ETC___d534 ^
	       { evictee_mslot[120],
		 evictee_mslot[121],
		 evictee_mslot[122],
		 evictee_mslot[123],
		 evictee_mslot[124],
		 evictee_mslot[125],
		 evictee_mslot[126],
		 evictee_mslot[127],
		 2'd0 } } ;
  assign MUX_hash_units_0_g_table_a_put_2__VAL_3 =
	     { new_mslot_04_BIT_64_05_XOR_new_mslot_04_BIT_75_ETC___d713 ^
	       new_mslot[119],
	       new_mslot_04_BIT_65_16_XOR_new_mslot_04_BIT_76_ETC___d810 ^
	       { new_mslot[120],
		 new_mslot[121],
		 new_mslot[122],
		 new_mslot[123],
		 new_mslot[124],
		 new_mslot[125],
		 new_mslot[126],
		 new_mslot[127],
		 2'd0 } } ;
  assign MUX_hash_units_0_g_table_a_put_2__VAL_4 =
	     { lookup_key_key_BIT_0_075_XOR_lookup_key_key_BI_ETC___d1083 ^
	       lookup_key_key[55],
	       lookup_key_key_BIT_1_086_XOR_lookup_key_key_BI_ETC___d1180 ^
	       { lookup_key_key[56],
		 lookup_key_key[57],
		 lookup_key_key[58],
		 lookup_key_key[59],
		 lookup_key_key[60],
		 lookup_key_key[61],
		 lookup_key_key[62],
		 lookup_key_key[63],
		 2'd0 } } ;
  assign MUX_hash_units_1_g_table_a_put_2__VAL_1 =
	     { IF_mslot_to_repair_4_BIT_65_6_THEN_1_ELSE_0_85_ETC___d195 ^
	       IF_mslot_to_repair_4_BIT_109_3_THEN_1_ELSE_0___d196[10] ^
	       IF_mslot_to_repair_4_BIT_120_71_THEN_1_ELSE_0___d199[10],
	       mslot_to_repair_4_BIT_72_41_XOR_mslot_to_repai_ETC___d202,
	       mslot_to_repair_4_BIT_73_50_XOR_mslot_to_repai_ETC___d221 } ;
  assign MUX_hash_units_1_g_table_a_put_2__VAL_2 =
	     { IF_evictee_mslot_28_BIT_65_40_THEN_1_ELSE_0_49_ETC___d559 ^
	       IF_evictee_mslot_28_BIT_109_47_THEN_1_ELSE_0___d560[10] ^
	       IF_evictee_mslot_28_BIT_120_35_THEN_1_ELSE_0___d563[10],
	       evictee_mslot_28_BIT_72_05_XOR_evictee_mslot_2_ETC___d566,
	       evictee_mslot_28_BIT_73_14_XOR_evictee_mslot_2_ETC___d585 } ;
  assign MUX_hash_units_1_g_table_a_put_2__VAL_3 =
	     { IF_new_mslot_04_BIT_65_16_THEN_1_ELSE_0_25_BIT_ETC___d835 ^
	       IF_new_mslot_04_BIT_109_23_THEN_1_ELSE_0___d836[10] ^
	       IF_new_mslot_04_BIT_120_11_THEN_1_ELSE_0___d839[10],
	       new_mslot_04_BIT_72_81_XOR_new_mslot_04_BIT_83_ETC___d842,
	       new_mslot_04_BIT_73_90_XOR_new_mslot_04_BIT_84_ETC___d861 } ;
  assign MUX_hash_units_1_g_table_a_put_2__VAL_4 =
	     { IF_lookup_key_key_BIT_1_086_THEN_1_ELSE_0_195__ETC___d1205 ^
	       IF_lookup_key_key_BIT_45_093_THEN_1_ELSE_0___d1206[10] ^
	       IF_lookup_key_key_BIT_56_181_THEN_1_ELSE_0___d1209[10],
	       lookup_key_key_BIT_8_151_XOR_lookup_key_key_BI_ETC___d1212,
	       lookup_key_key_BIT_9_160_XOR_lookup_key_key_BI_ETC___d1231 } ;
  assign MUX_hash_units_2_g_table_a_put_2__VAL_1 =
	     { IF_mslot_to_repair_BIT_69_THEN_1_ELSE_0__q1[10:6] ^
	       IF_mslot_to_repair_BIT_80_THEN_1_ELSE_0__q2[10:6] ^
	       IF_mslot_to_repair_BIT_91_THEN_1_ELSE_0__q3[10:6] ^
	       IF_mslot_to_repair_BIT_102_THEN_1_ELSE_0__q4[10:6] ^
	       IF_mslot_to_repair_BIT_113_THEN_1_ELSE_0__q5[10:6] ^
	       IF_mslot_to_repair_BIT_124_THEN_1_ELSE_0__q6[10:6],
	       mslot_to_repair_4_BIT_74_59_XOR_mslot_to_repai_ETC___d167,
	       mslot_to_repair_4_BIT_72_41_XOR_mslot_to_repai_ETC___d202,
	       mslot_to_repair[71:68] ^ mslot_to_repair[82:79] ^
	       mslot_to_repair[93:90] ^
	       mslot_to_repair[104:101] ^
	       mslot_to_repair[115:112] ^
	       mslot_to_repair[126:123] } ;
  assign MUX_hash_units_2_g_table_a_put_2__VAL_2 =
	     { IF_evictee_mslot_BIT_69_THEN_1_ELSE_0__q7[10:6] ^
	       IF_evictee_mslot_BIT_80_THEN_1_ELSE_0__q8[10:6] ^
	       IF_evictee_mslot_BIT_91_THEN_1_ELSE_0__q9[10:6] ^
	       IF_evictee_mslot_BIT_102_THEN_1_ELSE_0__q10[10:6] ^
	       IF_evictee_mslot_BIT_113_THEN_1_ELSE_0__q11[10:6] ^
	       IF_evictee_mslot_BIT_124_THEN_1_ELSE_0__q12[10:6],
	       evictee_mslot_28_BIT_74_23_XOR_evictee_mslot_2_ETC___d531,
	       evictee_mslot_28_BIT_72_05_XOR_evictee_mslot_2_ETC___d566,
	       evictee_mslot[71:68] ^ evictee_mslot[82:79] ^
	       evictee_mslot[93:90] ^
	       evictee_mslot[104:101] ^
	       evictee_mslot[115:112] ^
	       evictee_mslot[126:123] } ;
  assign MUX_hash_units_2_g_table_a_put_2__VAL_3 =
	     { IF_new_mslot_BIT_69_THEN_1_ELSE_0__q13[10:6] ^
	       IF_new_mslot_BIT_80_THEN_1_ELSE_0__q14[10:6] ^
	       IF_new_mslot_BIT_91_THEN_1_ELSE_0__q15[10:6] ^
	       IF_new_mslot_BIT_102_THEN_1_ELSE_0__q16[10:6] ^
	       IF_new_mslot_BIT_113_THEN_1_ELSE_0__q17[10:6] ^
	       IF_new_mslot_BIT_124_THEN_1_ELSE_0__q18[10:6],
	       new_mslot_04_BIT_74_99_XOR_new_mslot_04_BIT_85_ETC___d807,
	       new_mslot_04_BIT_72_81_XOR_new_mslot_04_BIT_83_ETC___d842,
	       new_mslot[71:68] ^ new_mslot[82:79] ^ new_mslot[93:90] ^
	       new_mslot[104:101] ^
	       new_mslot[115:112] ^
	       new_mslot[126:123] } ;
  assign MUX_hash_units_2_g_table_a_put_2__VAL_4 =
	     { IF_lookup_key_key_BIT_5_THEN_1_ELSE_0__q19[10:6] ^
	       IF_lookup_key_key_BIT_16_THEN_1_ELSE_0__q20[10:6] ^
	       IF_lookup_key_key_BIT_27_THEN_1_ELSE_0__q21[10:6] ^
	       IF_lookup_key_key_BIT_38_THEN_1_ELSE_0__q22[10:6] ^
	       IF_lookup_key_key_BIT_49_THEN_1_ELSE_0__q23[10:6] ^
	       IF_lookup_key_key_BIT_60_THEN_1_ELSE_0__q24[10:6],
	       lookup_key_key_BIT_10_169_XOR_lookup_key_key_B_ETC___d1177,
	       lookup_key_key_BIT_8_151_XOR_lookup_key_key_BI_ETC___d1212,
	       lookup_key_key[7:4] ^ lookup_key_key[18:15] ^
	       lookup_key_key[29:26] ^
	       lookup_key_key[40:37] ^
	       lookup_key_key[51:48] ^
	       lookup_key_key[62:59] } ;
  assign MUX_hash_units_3_g_table_a_put_2__VAL_1 =
	     { IF_mslot_to_repair_4_BIT_74_59_THEN_1_ELSE_0_5_ETC___d263 ^
	       IF_mslot_to_repair_4_BIT_118_66_THEN_1_ELSE_0___d264[10] ^
	       IF_mslot_to_repair_4_BIT_119_4_THEN_2_ELSE_0___d267[10],
	       mslot_to_repair_4_BIT_72_41_XOR_mslot_to_repai_ETC___d202,
	       mslot_to_repair_4_BIT_66_5_XOR_mslot_to_repair_ETC___d288 } ;
  assign MUX_hash_units_3_g_table_a_put_2__VAL_2 =
	     { IF_evictee_mslot_28_BIT_74_23_THEN_1_ELSE_0_17_ETC___d627 ^
	       IF_evictee_mslot_28_BIT_118_30_THEN_1_ELSE_0___d628[10] ^
	       IF_evictee_mslot_28_BIT_119_38_THEN_2_ELSE_0___d631[10],
	       evictee_mslot_28_BIT_72_05_XOR_evictee_mslot_2_ETC___d566,
	       evictee_mslot_28_BIT_66_49_XOR_evictee_mslot_2_ETC___d652 } ;
  assign MUX_hash_units_3_g_table_a_put_2__VAL_3 =
	     { IF_new_mslot_04_BIT_74_99_THEN_1_ELSE_0_93_BIT_ETC___d903 ^
	       IF_new_mslot_04_BIT_118_06_THEN_1_ELSE_0___d904[10] ^
	       IF_new_mslot_04_BIT_119_14_THEN_2_ELSE_0___d907[10],
	       new_mslot_04_BIT_72_81_XOR_new_mslot_04_BIT_83_ETC___d842,
	       new_mslot_04_BIT_66_25_XOR_new_mslot_04_BIT_77_ETC___d928 } ;
  assign MUX_hash_units_3_g_table_a_put_2__VAL_4 =
	     { IF_lookup_key_key_BIT_10_169_THEN_1_ELSE_0_263_ETC___d1273 ^
	       IF_lookup_key_key_BIT_54_176_THEN_1_ELSE_0___d1274[10] ^
	       IF_lookup_key_key_BIT_55_084_THEN_2_ELSE_0___d1277[10],
	       lookup_key_key_BIT_8_151_XOR_lookup_key_key_BI_ETC___d1212,
	       lookup_key_key_BIT_2_095_XOR_lookup_key_key_BI_ETC___d1298 } ;
  assign MUX_mslot_counter_write_1__VAL_1 =
	     (mslot_counter == 10'd1023) ? 10'd0 : x__h108376 ;
  assign MUX_new_gslots_0_write_1__VAL_2 =
	     (victim_g_index == 2'd0) ?
	       { n_value__h106740, n_maddr__h106741, mslot_counter, 2'd1 } :
	       { new_gslots_0[85:12], mslot_counter, n_degree__h106750 } ;
  assign MUX_new_gslots_1_write_1__VAL_2 =
	     (victim_g_index == 2'd1) ?
	       { n_value__h106740, n_maddr__h106741, mslot_counter, 2'd1 } :
	       { new_gslots_1[85:12], mslot_counter, n_degree__h107047 } ;
  assign MUX_new_gslots_2_write_1__VAL_2 =
	     (victim_g_index == 2'd2) ?
	       { n_value__h106740, n_maddr__h106741, mslot_counter, 2'd1 } :
	       { new_gslots_2[85:12], mslot_counter, n_degree__h107195 } ;
  assign MUX_new_gslots_3_write_1__VAL_2 =
	     (victim_g_index == 2'd3) ?
	       { n_value__h106740, n_maddr__h106741, mslot_counter, 2'd1 } :
	       { new_gslots_3[85:12], mslot_counter, n_degree__h107343 } ;
  assign MUX_repair_gslots_0_write_1__VAL_2 =
	     (repair_g_index == 2'd0) ?
	       { n_value__h40141, n_maddr__h40142, 12'd1 } :
	       { repair_gslots_0[85:12],
		 mslot__h40163,
		 repair_gslots_0[1:0] } ;
  assign MUX_repair_gslots_1_write_1__VAL_2 =
	     (repair_g_index == 2'd1) ?
	       { n_value__h40141, n_maddr__h40142, 12'd1 } :
	       { repair_gslots_1[85:12],
		 mslot__h40435,
		 repair_gslots_1[1:0] } ;
  assign MUX_repair_gslots_2_write_1__VAL_2 =
	     (repair_g_index == 2'd2) ?
	       { n_value__h40141, n_maddr__h40142, 12'd1 } :
	       { repair_gslots_2[85:12],
		 mslot__h40560,
		 repair_gslots_2[1:0] } ;
  assign MUX_repair_gslots_3_write_1__VAL_2 =
	     (repair_g_index == 2'd3) ?
	       { n_value__h40141, n_maddr__h40142, 12'd1 } :
	       { repair_gslots_3[85:12],
		 mslot__h40685,
		 repair_gslots_3[1:0] } ;

  // inlined wires
  assign is_hit_wire_wget = stage2_ff_D_OUT == m_table_DOA[127:64] ;
  assign rec_value_whas =
	     WILL_FIRE_RL_lookup_gtables || WILL_FIRE_RL_lookup_mtable ;
  assign ldvn_start_wire_whas =
	     WILL_FIRE_RL_ldvn_fsm_start ||
	     ldvn_start_reg_1 && !ldvn_state_fired ;
  assign mslot_replacement_start_wire_whas =
	     WILL_FIRE_RL_mslot_replacement_fsm_start ||
	     mslot_replacement_start_reg_1 && !mslot_replacement_state_fired ;
  assign ldvn_state_set_pw_whas =
	     WILL_FIRE_RL_ldvn_idle_l20c1 || ldvn_state_mkFSMstate == 4'd6 ||
	     WILL_FIRE_RL_ldvn_action_l99c9 ||
	     ldvn_state_mkFSMstate == 4'd4 ||
	     ldvn_state_mkFSMstate == 4'd3 ||
	     ldvn_state_mkFSMstate == 4'd2 ||
	     WILL_FIRE_RL_ldvn_action_l30c9 ||
	     WILL_FIRE_RL_ldvn_action_l22c9 ;
  assign mslot_replacement_state_set_pw_whas =
	     WILL_FIRE_RL_mslot_replacement_idle_l119c1 ||
	     WILL_FIRE_RL_mslot_replacement_action_l258c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l251c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l243c9 ||
	     mslot_replacement_state_mkFSMstate == 4'd8 ||
	     mslot_replacement_state_mkFSMstate == 4'd7 ||
	     mslot_replacement_state_mkFSMstate == 4'd6 ||
	     WILL_FIRE_RL_mslot_replacement_action_l172c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l164c9 ||
	     mslot_replacement_state_mkFSMstate == 4'd3 ||
	     mslot_replacement_state_mkFSMstate == 4'd2 ||
	     WILL_FIRE_RL_mslot_replacement_action_l128c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l121c9 ;

  // register evictee_gslots_0
  assign evictee_gslots_0_D_IN =
	     MUX_evictee_gslots_2_write_1__SEL_1 ?
	       MUX_evictee_gslots_0_write_1__VAL_1 :
	       hash_units_0_g_table_DOA ;
  assign evictee_gslots_0_EN =
	     mslot_replacement_state_mkFSMstate == 4'd3 &&
	     evictee_mslot[128] ||
	     mslot_replacement_state_mkFSMstate == 4'd2 ;

  // register evictee_gslots_1
  assign evictee_gslots_1_D_IN =
	     MUX_evictee_gslots_2_write_1__SEL_1 ?
	       MUX_evictee_gslots_1_write_1__VAL_1 :
	       hash_units_1_g_table_DOA ;
  assign evictee_gslots_1_EN =
	     mslot_replacement_state_mkFSMstate == 4'd3 &&
	     evictee_mslot[128] ||
	     mslot_replacement_state_mkFSMstate == 4'd2 ;

  // register evictee_gslots_2
  assign evictee_gslots_2_D_IN =
	     MUX_evictee_gslots_2_write_1__SEL_1 ?
	       MUX_evictee_gslots_2_write_1__VAL_1 :
	       hash_units_2_g_table_DOA ;
  assign evictee_gslots_2_EN =
	     mslot_replacement_state_mkFSMstate == 4'd3 &&
	     evictee_mslot[128] ||
	     mslot_replacement_state_mkFSMstate == 4'd2 ;

  // register evictee_gslots_3
  assign evictee_gslots_3_D_IN =
	     MUX_evictee_gslots_2_write_1__SEL_1 ?
	       MUX_evictee_gslots_3_write_1__VAL_1 :
	       hash_units_3_g_table_DOA ;
  assign evictee_gslots_3_EN =
	     mslot_replacement_state_mkFSMstate == 4'd3 &&
	     evictee_mslot[128] ||
	     mslot_replacement_state_mkFSMstate == 4'd2 ;

  // register evictee_hvals_0
  assign evictee_hvals_0_D_IN = MUX_hash_units_0_g_table_a_put_2__VAL_2 ;
  assign evictee_hvals_0_EN = WILL_FIRE_RL_mslot_replacement_action_l128c9 ;

  // register evictee_hvals_1
  assign evictee_hvals_1_D_IN = MUX_hash_units_1_g_table_a_put_2__VAL_2 ;
  assign evictee_hvals_1_EN = WILL_FIRE_RL_mslot_replacement_action_l128c9 ;

  // register evictee_hvals_2
  assign evictee_hvals_2_D_IN = MUX_hash_units_2_g_table_a_put_2__VAL_2 ;
  assign evictee_hvals_2_EN = WILL_FIRE_RL_mslot_replacement_action_l128c9 ;

  // register evictee_hvals_3
  assign evictee_hvals_3_D_IN = MUX_hash_units_3_g_table_a_put_2__VAL_2 ;
  assign evictee_hvals_3_EN = WILL_FIRE_RL_mslot_replacement_action_l128c9 ;

  // register evictee_mslot
  assign evictee_mslot_D_IN = m_table_DOA ;
  assign evictee_mslot_EN = WILL_FIRE_RL_mslot_replacement_action_l121c9 ;

  // register hash_units_0_gslot_counter
  assign hash_units_0_gslot_counter_D_IN =
	     hash_units_0_gslot_counter + 11'd1 ;
  assign hash_units_0_gslot_counter_EN =
	     !hash_units_0_init && hash_units_0_gslot_counter != 11'd2047 ;

  // register hash_units_0_init
  assign hash_units_0_init_D_IN = 1'd1 ;
  assign hash_units_0_init_EN =
	     !hash_units_0_init && hash_units_0_gslot_counter == 11'd2047 ;

  // register hash_units_0_is_miss
  assign hash_units_0_is_miss_D_IN = 1'b0 ;
  assign hash_units_0_is_miss_EN = 1'b0 ;

  // register hash_units_1_gslot_counter
  assign hash_units_1_gslot_counter_D_IN =
	     hash_units_1_gslot_counter + 11'd1 ;
  assign hash_units_1_gslot_counter_EN =
	     !hash_units_1_init && hash_units_1_gslot_counter != 11'd2047 ;

  // register hash_units_1_init
  assign hash_units_1_init_D_IN = 1'd1 ;
  assign hash_units_1_init_EN =
	     !hash_units_1_init && hash_units_1_gslot_counter == 11'd2047 ;

  // register hash_units_1_is_miss
  assign hash_units_1_is_miss_D_IN = 1'b0 ;
  assign hash_units_1_is_miss_EN = 1'b0 ;

  // register hash_units_2_gslot_counter
  assign hash_units_2_gslot_counter_D_IN =
	     hash_units_2_gslot_counter + 11'd1 ;
  assign hash_units_2_gslot_counter_EN =
	     !hash_units_2_init && hash_units_2_gslot_counter != 11'd2047 ;

  // register hash_units_2_init
  assign hash_units_2_init_D_IN = 1'd1 ;
  assign hash_units_2_init_EN =
	     !hash_units_2_init && hash_units_2_gslot_counter == 11'd2047 ;

  // register hash_units_2_is_miss
  assign hash_units_2_is_miss_D_IN = 1'b0 ;
  assign hash_units_2_is_miss_EN = 1'b0 ;

  // register hash_units_3_gslot_counter
  assign hash_units_3_gslot_counter_D_IN =
	     hash_units_3_gslot_counter + 11'd1 ;
  assign hash_units_3_gslot_counter_EN =
	     !hash_units_3_init && hash_units_3_gslot_counter != 11'd2047 ;

  // register hash_units_3_init
  assign hash_units_3_init_D_IN = 1'd1 ;
  assign hash_units_3_init_EN =
	     !hash_units_3_init && hash_units_3_gslot_counter == 11'd2047 ;

  // register hash_units_3_is_miss
  assign hash_units_3_is_miss_D_IN = 1'b0 ;
  assign hash_units_3_is_miss_EN = 1'b0 ;

  // register inited
  assign inited_D_IN = 1'd1 ;
  assign inited_EN =
	     WILL_FIRE_RL_mslot_replacement_action_l258c9 &&
	     victim_gslot[1:0] == 2'd0 ||
	     !inited && mslot_counter == 10'd1023 && hash_units_0_init ||
	     ldvn_state_mkFSMstate == 4'd6 ;

  // register ldvn_start_reg
  assign ldvn_start_reg_D_IN = MUX_ldvn_start_reg_write_1__SEL_1 ;
  assign ldvn_start_reg_EN =
	     WILL_FIRE_RL_mslot_replacement_action_l258c9 &&
	     victim_gslot[1:0] != 2'd0 ||
	     WILL_FIRE_RL_ldvn_fsm_start ;

  // register ldvn_start_reg_1
  assign ldvn_start_reg_1_D_IN = ldvn_start_wire_whas ;
  assign ldvn_start_reg_1_EN = 1'd1 ;

  // register ldvn_state_can_overlap
  assign ldvn_state_can_overlap_D_IN =
	     ldvn_state_set_pw_whas || ldvn_state_can_overlap ;
  assign ldvn_state_can_overlap_EN = 1'd1 ;

  // register ldvn_state_fired
  assign ldvn_state_fired_D_IN = ldvn_state_set_pw_whas ;
  assign ldvn_state_fired_EN = 1'd1 ;

  // register ldvn_state_mkFSMstate
  always@(WILL_FIRE_RL_ldvn_idle_l20c1 or
	  WILL_FIRE_RL_ldvn_action_l22c9 or
	  WILL_FIRE_RL_ldvn_action_l30c9 or
	  ldvn_state_mkFSMstate or WILL_FIRE_RL_ldvn_action_l99c9)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ldvn_idle_l20c1: ldvn_state_mkFSMstate_D_IN = 4'd0;
      WILL_FIRE_RL_ldvn_action_l22c9: ldvn_state_mkFSMstate_D_IN = 4'd1;
      WILL_FIRE_RL_ldvn_action_l30c9: ldvn_state_mkFSMstate_D_IN = 4'd2;
      ldvn_state_mkFSMstate == 4'd2: ldvn_state_mkFSMstate_D_IN = 4'd3;
      ldvn_state_mkFSMstate == 4'd3: ldvn_state_mkFSMstate_D_IN = 4'd4;
      ldvn_state_mkFSMstate == 4'd4: ldvn_state_mkFSMstate_D_IN = 4'd5;
      WILL_FIRE_RL_ldvn_action_l99c9: ldvn_state_mkFSMstate_D_IN = 4'd6;
      ldvn_state_mkFSMstate == 4'd6: ldvn_state_mkFSMstate_D_IN = 4'd7;
      default: ldvn_state_mkFSMstate_D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign ldvn_state_mkFSMstate_EN =
	     WILL_FIRE_RL_ldvn_idle_l20c1 || WILL_FIRE_RL_ldvn_action_l22c9 ||
	     WILL_FIRE_RL_ldvn_action_l30c9 ||
	     ldvn_state_mkFSMstate == 4'd2 ||
	     ldvn_state_mkFSMstate == 4'd3 ||
	     ldvn_state_mkFSMstate == 4'd4 ||
	     WILL_FIRE_RL_ldvn_action_l99c9 ||
	     ldvn_state_mkFSMstate == 4'd6 ;

  // register miss_service
  assign miss_service_D_IN =
	     !MUX_inited_write_1__SEL_1 && ldvn_state_mkFSMstate != 4'd6 ;
  assign miss_service_EN =
	     WILL_FIRE_RL_mslot_replacement_action_l258c9 &&
	     victim_gslot[1:0] == 2'd0 ||
	     EN_new_key_value && !miss_service ||
	     ldvn_state_mkFSMstate == 4'd6 ;

  // register mslot_counter
  assign mslot_counter_D_IN =
	     MUX_m_table_b_put_1__SEL_1 ?
	       MUX_mslot_counter_write_1__VAL_1 :
	       x__h108376 ;
  assign mslot_counter_EN =
	     !inited && (hash_units_0_init || mslot_counter != 10'd1023) ||
	     WILL_FIRE_RL_mslot_replacement_action_l251c9 ;

  // register mslot_replacement_start_reg
  assign mslot_replacement_start_reg_D_IN = MUX_m_table_b_put_1__SEL_2 ;
  assign mslot_replacement_start_reg_EN =
	     EN_new_key_value && !miss_service ||
	     WILL_FIRE_RL_mslot_replacement_fsm_start ;

  // register mslot_replacement_start_reg_1
  assign mslot_replacement_start_reg_1_D_IN =
	     mslot_replacement_start_wire_whas ;
  assign mslot_replacement_start_reg_1_EN = 1'd1 ;

  // register mslot_replacement_state_can_overlap
  assign mslot_replacement_state_can_overlap_D_IN =
	     mslot_replacement_state_set_pw_whas ||
	     mslot_replacement_state_can_overlap ;
  assign mslot_replacement_state_can_overlap_EN = 1'd1 ;

  // register mslot_replacement_state_fired
  assign mslot_replacement_state_fired_D_IN =
	     mslot_replacement_state_set_pw_whas ;
  assign mslot_replacement_state_fired_EN = 1'd1 ;

  // register mslot_replacement_state_mkFSMstate
  always@(WILL_FIRE_RL_mslot_replacement_idle_l119c1 or
	  WILL_FIRE_RL_mslot_replacement_action_l121c9 or
	  WILL_FIRE_RL_mslot_replacement_action_l128c9 or
	  mslot_replacement_state_mkFSMstate or
	  WILL_FIRE_RL_mslot_replacement_action_l164c9 or
	  WILL_FIRE_RL_mslot_replacement_action_l172c9 or
	  WILL_FIRE_RL_mslot_replacement_action_l243c9 or
	  WILL_FIRE_RL_mslot_replacement_action_l251c9 or
	  WILL_FIRE_RL_mslot_replacement_action_l258c9)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_mslot_replacement_idle_l119c1:
	  mslot_replacement_state_mkFSMstate_D_IN = 4'd0;
      WILL_FIRE_RL_mslot_replacement_action_l121c9:
	  mslot_replacement_state_mkFSMstate_D_IN = 4'd1;
      WILL_FIRE_RL_mslot_replacement_action_l128c9:
	  mslot_replacement_state_mkFSMstate_D_IN = 4'd2;
      mslot_replacement_state_mkFSMstate == 4'd2:
	  mslot_replacement_state_mkFSMstate_D_IN = 4'd3;
      mslot_replacement_state_mkFSMstate == 4'd3:
	  mslot_replacement_state_mkFSMstate_D_IN = 4'd4;
      WILL_FIRE_RL_mslot_replacement_action_l164c9:
	  mslot_replacement_state_mkFSMstate_D_IN = 4'd5;
      WILL_FIRE_RL_mslot_replacement_action_l172c9:
	  mslot_replacement_state_mkFSMstate_D_IN = 4'd6;
      mslot_replacement_state_mkFSMstate == 4'd6:
	  mslot_replacement_state_mkFSMstate_D_IN = 4'd7;
      mslot_replacement_state_mkFSMstate == 4'd7:
	  mslot_replacement_state_mkFSMstate_D_IN = 4'd8;
      mslot_replacement_state_mkFSMstate == 4'd8:
	  mslot_replacement_state_mkFSMstate_D_IN = 4'd9;
      WILL_FIRE_RL_mslot_replacement_action_l243c9:
	  mslot_replacement_state_mkFSMstate_D_IN = 4'd10;
      WILL_FIRE_RL_mslot_replacement_action_l251c9:
	  mslot_replacement_state_mkFSMstate_D_IN = 4'd11;
      WILL_FIRE_RL_mslot_replacement_action_l258c9:
	  mslot_replacement_state_mkFSMstate_D_IN = 4'd12;
      default: mslot_replacement_state_mkFSMstate_D_IN =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign mslot_replacement_state_mkFSMstate_EN =
	     WILL_FIRE_RL_mslot_replacement_idle_l119c1 ||
	     WILL_FIRE_RL_mslot_replacement_action_l121c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l128c9 ||
	     mslot_replacement_state_mkFSMstate == 4'd2 ||
	     mslot_replacement_state_mkFSMstate == 4'd3 ||
	     WILL_FIRE_RL_mslot_replacement_action_l164c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l172c9 ||
	     mslot_replacement_state_mkFSMstate == 4'd6 ||
	     mslot_replacement_state_mkFSMstate == 4'd7 ||
	     mslot_replacement_state_mkFSMstate == 4'd8 ||
	     WILL_FIRE_RL_mslot_replacement_action_l243c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l251c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l258c9 ;

  // register mslot_to_repair
  assign mslot_to_repair_D_IN = m_table_DOA ;
  assign mslot_to_repair_EN = WILL_FIRE_RL_ldvn_action_l22c9 ;

  // register new_gslots_0
  assign new_gslots_0_D_IN =
	     (mslot_replacement_state_mkFSMstate == 4'd6) ?
	       hash_units_0_g_table_DOA :
	       MUX_new_gslots_0_write_1__VAL_2 ;
  assign new_gslots_0_EN =
	     mslot_replacement_state_mkFSMstate == 4'd6 ||
	     mslot_replacement_state_mkFSMstate == 4'd8 ;

  // register new_gslots_1
  assign new_gslots_1_D_IN =
	     (mslot_replacement_state_mkFSMstate == 4'd6) ?
	       hash_units_1_g_table_DOA :
	       MUX_new_gslots_1_write_1__VAL_2 ;
  assign new_gslots_1_EN =
	     mslot_replacement_state_mkFSMstate == 4'd6 ||
	     mslot_replacement_state_mkFSMstate == 4'd8 ;

  // register new_gslots_2
  assign new_gslots_2_D_IN =
	     (mslot_replacement_state_mkFSMstate == 4'd6) ?
	       hash_units_2_g_table_DOA :
	       MUX_new_gslots_2_write_1__VAL_2 ;
  assign new_gslots_2_EN =
	     mslot_replacement_state_mkFSMstate == 4'd6 ||
	     mslot_replacement_state_mkFSMstate == 4'd8 ;

  // register new_gslots_3
  assign new_gslots_3_D_IN =
	     (mslot_replacement_state_mkFSMstate == 4'd6) ?
	       hash_units_3_g_table_DOA :
	       MUX_new_gslots_3_write_1__VAL_2 ;
  assign new_gslots_3_EN =
	     mslot_replacement_state_mkFSMstate == 4'd6 ||
	     mslot_replacement_state_mkFSMstate == 4'd8 ;

  // register new_hvals_0
  assign new_hvals_0_D_IN = MUX_hash_units_0_g_table_a_put_2__VAL_3 ;
  assign new_hvals_0_EN = WILL_FIRE_RL_mslot_replacement_action_l172c9 ;

  // register new_hvals_1
  assign new_hvals_1_D_IN = MUX_hash_units_1_g_table_a_put_2__VAL_3 ;
  assign new_hvals_1_EN = WILL_FIRE_RL_mslot_replacement_action_l172c9 ;

  // register new_hvals_2
  assign new_hvals_2_D_IN = MUX_hash_units_2_g_table_a_put_2__VAL_3 ;
  assign new_hvals_2_EN = WILL_FIRE_RL_mslot_replacement_action_l172c9 ;

  // register new_hvals_3
  assign new_hvals_3_D_IN = MUX_hash_units_3_g_table_a_put_2__VAL_3 ;
  assign new_hvals_3_EN = WILL_FIRE_RL_mslot_replacement_action_l172c9 ;

  // register new_mslot
  assign new_mslot_D_IN = { 1'd1, new_key_value_k, new_key_value_v } ;
  assign new_mslot_EN = MUX_m_table_b_put_1__SEL_2 ;

  // register repair_g_index
  assign repair_g_index_D_IN =
	     repair_gslots_3_98_BITS_1_TO_0_99_ULT_IF_repai_ETC___d310 ?
	       2'd3 :
	       (repair_gslots_2_00_BITS_1_TO_0_01_ULT_IF_repai_ETC___d308 ?
		  2'd2 :
		  (repair_gslots_1_02_BITS_1_TO_0_03_ULT_repair_g_ETC___d306 ?
		     2'd1 :
		     2'd0)) ;
  assign repair_g_index_EN = ldvn_state_mkFSMstate == 4'd3 ;

  // register repair_gslot
  assign repair_gslot_D_IN =
	     repair_gslots_3_98_BITS_1_TO_0_99_ULT_IF_repai_ETC___d310 ?
	       repair_gslots_3 :
	       IF_repair_gslots_2_00_BITS_1_TO_0_01_ULT_IF_re_ETC___d312 ;
  assign repair_gslot_EN = ldvn_state_mkFSMstate == 4'd3 ;

  // register repair_gslots_0
  assign repair_gslots_0_D_IN =
	     (ldvn_state_mkFSMstate == 4'd2) ?
	       hash_units_0_g_table_DOA :
	       MUX_repair_gslots_0_write_1__VAL_2 ;
  assign repair_gslots_0_EN =
	     ldvn_state_mkFSMstate == 4'd2 || ldvn_state_mkFSMstate == 4'd4 ;

  // register repair_gslots_1
  assign repair_gslots_1_D_IN =
	     (ldvn_state_mkFSMstate == 4'd2) ?
	       hash_units_1_g_table_DOA :
	       MUX_repair_gslots_1_write_1__VAL_2 ;
  assign repair_gslots_1_EN =
	     ldvn_state_mkFSMstate == 4'd2 || ldvn_state_mkFSMstate == 4'd4 ;

  // register repair_gslots_2
  assign repair_gslots_2_D_IN =
	     (ldvn_state_mkFSMstate == 4'd2) ?
	       hash_units_2_g_table_DOA :
	       MUX_repair_gslots_2_write_1__VAL_2 ;
  assign repair_gslots_2_EN =
	     ldvn_state_mkFSMstate == 4'd2 || ldvn_state_mkFSMstate == 4'd4 ;

  // register repair_gslots_3
  assign repair_gslots_3_D_IN =
	     (ldvn_state_mkFSMstate == 4'd2) ?
	       hash_units_3_g_table_DOA :
	       MUX_repair_gslots_3_write_1__VAL_2 ;
  assign repair_gslots_3_EN =
	     ldvn_state_mkFSMstate == 4'd2 || ldvn_state_mkFSMstate == 4'd4 ;

  // register repair_hvals_0
  assign repair_hvals_0_D_IN = MUX_hash_units_0_g_table_a_put_2__VAL_1 ;
  assign repair_hvals_0_EN = WILL_FIRE_RL_ldvn_action_l30c9 ;

  // register repair_hvals_1
  assign repair_hvals_1_D_IN = MUX_hash_units_1_g_table_a_put_2__VAL_1 ;
  assign repair_hvals_1_EN = WILL_FIRE_RL_ldvn_action_l30c9 ;

  // register repair_hvals_2
  assign repair_hvals_2_D_IN = MUX_hash_units_2_g_table_a_put_2__VAL_1 ;
  assign repair_hvals_2_EN = WILL_FIRE_RL_ldvn_action_l30c9 ;

  // register repair_hvals_3
  assign repair_hvals_3_D_IN = MUX_hash_units_3_g_table_a_put_2__VAL_1 ;
  assign repair_hvals_3_EN = WILL_FIRE_RL_ldvn_action_l30c9 ;

  // register repair_mslot
  assign repair_mslot_D_IN = 129'h0 ;
  assign repair_mslot_EN = 1'b0 ;

  // register stage
  assign stage_D_IN = 2'd0 ;
  assign stage_EN =
	     WILL_FIRE_RL_mslot_replacement_action_l258c9 &&
	     victim_gslot[1:0] == 2'd0 ||
	     ldvn_state_mkFSMstate == 4'd6 ;

  // register victim_g_index
  assign victim_g_index_D_IN =
	     new_gslots_3_34_BITS_1_TO_0_35_ULT_IF_new_gslo_ETC___d946 ?
	       2'd3 :
	       (new_gslots_2_36_BITS_1_TO_0_37_ULT_IF_new_gslo_ETC___d944 ?
		  2'd2 :
		  (new_gslots_1_38_BITS_1_TO_0_39_ULT_new_gslots__ETC___d942 ?
		     2'd1 :
		     2'd0)) ;
  assign victim_g_index_EN = mslot_replacement_state_mkFSMstate == 4'd7 ;

  // register victim_gslot
  assign victim_gslot_D_IN =
	     new_gslots_3_34_BITS_1_TO_0_35_ULT_IF_new_gslo_ETC___d946 ?
	       new_gslots_3 :
	       IF_new_gslots_2_36_BITS_1_TO_0_37_ULT_IF_new_g_ETC___d948 ;
  assign victim_gslot_EN = mslot_replacement_state_mkFSMstate == 4'd7 ;

  // register victim_mslot
  assign victim_mslot_D_IN = 129'h0 ;
  assign victim_mslot_EN = 1'b0 ;

  // register victim_mslot_addr
  assign victim_mslot_addr_D_IN =
	     new_gslots_3_34_BITS_1_TO_0_35_ULT_IF_new_gslo_ETC___d946 ?
	       new_gslots_3[11:2] :
	       _theResult_____3_fst_mslot__h105917 ;
  assign victim_mslot_addr_EN = mslot_replacement_state_mkFSMstate == 4'd7 ;

  // submodule hash_units_0_g_table
  always@(WILL_FIRE_RL_ldvn_action_l30c9 or
	  MUX_hash_units_0_g_table_a_put_2__VAL_1 or
	  WILL_FIRE_RL_mslot_replacement_action_l128c9 or
	  MUX_hash_units_0_g_table_a_put_2__VAL_2 or
	  WILL_FIRE_RL_mslot_replacement_action_l172c9 or
	  MUX_hash_units_0_g_table_a_put_2__VAL_3 or
	  EN_lookup_key or MUX_hash_units_0_g_table_a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ldvn_action_l30c9:
	  hash_units_0_g_table_ADDRA =
	      MUX_hash_units_0_g_table_a_put_2__VAL_1;
      WILL_FIRE_RL_mslot_replacement_action_l128c9:
	  hash_units_0_g_table_ADDRA =
	      MUX_hash_units_0_g_table_a_put_2__VAL_2;
      WILL_FIRE_RL_mslot_replacement_action_l172c9:
	  hash_units_0_g_table_ADDRA =
	      MUX_hash_units_0_g_table_a_put_2__VAL_3;
      EN_lookup_key:
	  hash_units_0_g_table_ADDRA =
	      MUX_hash_units_0_g_table_a_put_2__VAL_4;
      default: hash_units_0_g_table_ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(hash_units_0_init or
	  hash_units_0_gslot_counter or
	  WILL_FIRE_RL_ldvn_action_l99c9 or
	  repair_hvals_0 or
	  WILL_FIRE_RL_mslot_replacement_action_l164c9 or
	  evictee_hvals_0 or
	  WILL_FIRE_RL_mslot_replacement_action_l243c9 or new_hvals_0)
  begin
    case (1'b1) // synopsys parallel_case
      !hash_units_0_init:
	  hash_units_0_g_table_ADDRB = hash_units_0_gslot_counter;
      WILL_FIRE_RL_ldvn_action_l99c9:
	  hash_units_0_g_table_ADDRB = repair_hvals_0;
      WILL_FIRE_RL_mslot_replacement_action_l164c9:
	  hash_units_0_g_table_ADDRB = evictee_hvals_0;
      WILL_FIRE_RL_mslot_replacement_action_l243c9:
	  hash_units_0_g_table_ADDRB = new_hvals_0;
      default: hash_units_0_g_table_ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ldvn_action_l30c9 or
	  WILL_FIRE_RL_mslot_replacement_action_l128c9 or
	  WILL_FIRE_RL_mslot_replacement_action_l172c9 or EN_lookup_key)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ldvn_action_l30c9:
	  hash_units_0_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_mslot_replacement_action_l128c9:
	  hash_units_0_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_mslot_replacement_action_l172c9:
	  hash_units_0_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      EN_lookup_key:
	  hash_units_0_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: hash_units_0_g_table_DIA =
		   86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(hash_units_0_init or
	  WILL_FIRE_RL_ldvn_action_l99c9 or
	  repair_gslots_0 or
	  WILL_FIRE_RL_mslot_replacement_action_l164c9 or
	  evictee_gslots_0 or
	  WILL_FIRE_RL_mslot_replacement_action_l243c9 or new_gslots_0)
  begin
    case (1'b1) // synopsys parallel_case
      !hash_units_0_init: hash_units_0_g_table_DIB = 86'd0;
      WILL_FIRE_RL_ldvn_action_l99c9:
	  hash_units_0_g_table_DIB = repair_gslots_0;
      WILL_FIRE_RL_mslot_replacement_action_l164c9:
	  hash_units_0_g_table_DIB = evictee_gslots_0;
      WILL_FIRE_RL_mslot_replacement_action_l243c9:
	  hash_units_0_g_table_DIB = new_gslots_0;
      default: hash_units_0_g_table_DIB =
		   86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign hash_units_0_g_table_WEA = 1'd0 ;
  assign hash_units_0_g_table_WEB = 1'd1 ;
  assign hash_units_0_g_table_ENA =
	     WILL_FIRE_RL_ldvn_action_l30c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l128c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l172c9 ||
	     EN_lookup_key ;
  assign hash_units_0_g_table_ENB =
	     !hash_units_0_init || WILL_FIRE_RL_ldvn_action_l99c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l164c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l243c9 ;

  // submodule hash_units_1_g_table
  always@(WILL_FIRE_RL_ldvn_action_l30c9 or
	  MUX_hash_units_1_g_table_a_put_2__VAL_1 or
	  WILL_FIRE_RL_mslot_replacement_action_l128c9 or
	  MUX_hash_units_1_g_table_a_put_2__VAL_2 or
	  WILL_FIRE_RL_mslot_replacement_action_l172c9 or
	  MUX_hash_units_1_g_table_a_put_2__VAL_3 or
	  EN_lookup_key or MUX_hash_units_1_g_table_a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ldvn_action_l30c9:
	  hash_units_1_g_table_ADDRA =
	      MUX_hash_units_1_g_table_a_put_2__VAL_1;
      WILL_FIRE_RL_mslot_replacement_action_l128c9:
	  hash_units_1_g_table_ADDRA =
	      MUX_hash_units_1_g_table_a_put_2__VAL_2;
      WILL_FIRE_RL_mslot_replacement_action_l172c9:
	  hash_units_1_g_table_ADDRA =
	      MUX_hash_units_1_g_table_a_put_2__VAL_3;
      EN_lookup_key:
	  hash_units_1_g_table_ADDRA =
	      MUX_hash_units_1_g_table_a_put_2__VAL_4;
      default: hash_units_1_g_table_ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(hash_units_1_init or
	  hash_units_1_gslot_counter or
	  WILL_FIRE_RL_ldvn_action_l99c9 or
	  repair_hvals_1 or
	  WILL_FIRE_RL_mslot_replacement_action_l164c9 or
	  evictee_hvals_1 or
	  WILL_FIRE_RL_mslot_replacement_action_l243c9 or new_hvals_1)
  begin
    case (1'b1) // synopsys parallel_case
      !hash_units_1_init:
	  hash_units_1_g_table_ADDRB = hash_units_1_gslot_counter;
      WILL_FIRE_RL_ldvn_action_l99c9:
	  hash_units_1_g_table_ADDRB = repair_hvals_1;
      WILL_FIRE_RL_mslot_replacement_action_l164c9:
	  hash_units_1_g_table_ADDRB = evictee_hvals_1;
      WILL_FIRE_RL_mslot_replacement_action_l243c9:
	  hash_units_1_g_table_ADDRB = new_hvals_1;
      default: hash_units_1_g_table_ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ldvn_action_l30c9 or
	  WILL_FIRE_RL_mslot_replacement_action_l128c9 or
	  WILL_FIRE_RL_mslot_replacement_action_l172c9 or EN_lookup_key)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ldvn_action_l30c9:
	  hash_units_1_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_mslot_replacement_action_l128c9:
	  hash_units_1_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_mslot_replacement_action_l172c9:
	  hash_units_1_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      EN_lookup_key:
	  hash_units_1_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: hash_units_1_g_table_DIA =
		   86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(hash_units_1_init or
	  WILL_FIRE_RL_ldvn_action_l99c9 or
	  repair_gslots_1 or
	  WILL_FIRE_RL_mslot_replacement_action_l164c9 or
	  evictee_gslots_1 or
	  WILL_FIRE_RL_mslot_replacement_action_l243c9 or new_gslots_1)
  begin
    case (1'b1) // synopsys parallel_case
      !hash_units_1_init: hash_units_1_g_table_DIB = 86'd0;
      WILL_FIRE_RL_ldvn_action_l99c9:
	  hash_units_1_g_table_DIB = repair_gslots_1;
      WILL_FIRE_RL_mslot_replacement_action_l164c9:
	  hash_units_1_g_table_DIB = evictee_gslots_1;
      WILL_FIRE_RL_mslot_replacement_action_l243c9:
	  hash_units_1_g_table_DIB = new_gslots_1;
      default: hash_units_1_g_table_DIB =
		   86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign hash_units_1_g_table_WEA = 1'd0 ;
  assign hash_units_1_g_table_WEB = 1'd1 ;
  assign hash_units_1_g_table_ENA =
	     WILL_FIRE_RL_ldvn_action_l30c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l128c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l172c9 ||
	     EN_lookup_key ;
  assign hash_units_1_g_table_ENB =
	     !hash_units_1_init || WILL_FIRE_RL_ldvn_action_l99c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l164c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l243c9 ;

  // submodule hash_units_2_g_table
  always@(WILL_FIRE_RL_ldvn_action_l30c9 or
	  MUX_hash_units_2_g_table_a_put_2__VAL_1 or
	  WILL_FIRE_RL_mslot_replacement_action_l128c9 or
	  MUX_hash_units_2_g_table_a_put_2__VAL_2 or
	  WILL_FIRE_RL_mslot_replacement_action_l172c9 or
	  MUX_hash_units_2_g_table_a_put_2__VAL_3 or
	  EN_lookup_key or MUX_hash_units_2_g_table_a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ldvn_action_l30c9:
	  hash_units_2_g_table_ADDRA =
	      MUX_hash_units_2_g_table_a_put_2__VAL_1;
      WILL_FIRE_RL_mslot_replacement_action_l128c9:
	  hash_units_2_g_table_ADDRA =
	      MUX_hash_units_2_g_table_a_put_2__VAL_2;
      WILL_FIRE_RL_mslot_replacement_action_l172c9:
	  hash_units_2_g_table_ADDRA =
	      MUX_hash_units_2_g_table_a_put_2__VAL_3;
      EN_lookup_key:
	  hash_units_2_g_table_ADDRA =
	      MUX_hash_units_2_g_table_a_put_2__VAL_4;
      default: hash_units_2_g_table_ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(hash_units_2_init or
	  hash_units_2_gslot_counter or
	  WILL_FIRE_RL_ldvn_action_l99c9 or
	  repair_hvals_2 or
	  WILL_FIRE_RL_mslot_replacement_action_l164c9 or
	  evictee_hvals_2 or
	  WILL_FIRE_RL_mslot_replacement_action_l243c9 or new_hvals_2)
  begin
    case (1'b1) // synopsys parallel_case
      !hash_units_2_init:
	  hash_units_2_g_table_ADDRB = hash_units_2_gslot_counter;
      WILL_FIRE_RL_ldvn_action_l99c9:
	  hash_units_2_g_table_ADDRB = repair_hvals_2;
      WILL_FIRE_RL_mslot_replacement_action_l164c9:
	  hash_units_2_g_table_ADDRB = evictee_hvals_2;
      WILL_FIRE_RL_mslot_replacement_action_l243c9:
	  hash_units_2_g_table_ADDRB = new_hvals_2;
      default: hash_units_2_g_table_ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ldvn_action_l30c9 or
	  WILL_FIRE_RL_mslot_replacement_action_l128c9 or
	  WILL_FIRE_RL_mslot_replacement_action_l172c9 or EN_lookup_key)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ldvn_action_l30c9:
	  hash_units_2_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_mslot_replacement_action_l128c9:
	  hash_units_2_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_mslot_replacement_action_l172c9:
	  hash_units_2_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      EN_lookup_key:
	  hash_units_2_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: hash_units_2_g_table_DIA =
		   86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(hash_units_2_init or
	  WILL_FIRE_RL_ldvn_action_l99c9 or
	  repair_gslots_2 or
	  WILL_FIRE_RL_mslot_replacement_action_l164c9 or
	  evictee_gslots_2 or
	  WILL_FIRE_RL_mslot_replacement_action_l243c9 or new_gslots_2)
  begin
    case (1'b1) // synopsys parallel_case
      !hash_units_2_init: hash_units_2_g_table_DIB = 86'd0;
      WILL_FIRE_RL_ldvn_action_l99c9:
	  hash_units_2_g_table_DIB = repair_gslots_2;
      WILL_FIRE_RL_mslot_replacement_action_l164c9:
	  hash_units_2_g_table_DIB = evictee_gslots_2;
      WILL_FIRE_RL_mslot_replacement_action_l243c9:
	  hash_units_2_g_table_DIB = new_gslots_2;
      default: hash_units_2_g_table_DIB =
		   86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign hash_units_2_g_table_WEA = 1'd0 ;
  assign hash_units_2_g_table_WEB = 1'd1 ;
  assign hash_units_2_g_table_ENA =
	     WILL_FIRE_RL_ldvn_action_l30c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l128c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l172c9 ||
	     EN_lookup_key ;
  assign hash_units_2_g_table_ENB =
	     !hash_units_2_init || WILL_FIRE_RL_ldvn_action_l99c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l164c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l243c9 ;

  // submodule hash_units_3_g_table
  always@(WILL_FIRE_RL_ldvn_action_l30c9 or
	  MUX_hash_units_3_g_table_a_put_2__VAL_1 or
	  WILL_FIRE_RL_mslot_replacement_action_l128c9 or
	  MUX_hash_units_3_g_table_a_put_2__VAL_2 or
	  WILL_FIRE_RL_mslot_replacement_action_l172c9 or
	  MUX_hash_units_3_g_table_a_put_2__VAL_3 or
	  EN_lookup_key or MUX_hash_units_3_g_table_a_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ldvn_action_l30c9:
	  hash_units_3_g_table_ADDRA =
	      MUX_hash_units_3_g_table_a_put_2__VAL_1;
      WILL_FIRE_RL_mslot_replacement_action_l128c9:
	  hash_units_3_g_table_ADDRA =
	      MUX_hash_units_3_g_table_a_put_2__VAL_2;
      WILL_FIRE_RL_mslot_replacement_action_l172c9:
	  hash_units_3_g_table_ADDRA =
	      MUX_hash_units_3_g_table_a_put_2__VAL_3;
      EN_lookup_key:
	  hash_units_3_g_table_ADDRA =
	      MUX_hash_units_3_g_table_a_put_2__VAL_4;
      default: hash_units_3_g_table_ADDRA =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(hash_units_3_init or
	  hash_units_3_gslot_counter or
	  WILL_FIRE_RL_ldvn_action_l99c9 or
	  repair_hvals_3 or
	  WILL_FIRE_RL_mslot_replacement_action_l164c9 or
	  evictee_hvals_3 or
	  WILL_FIRE_RL_mslot_replacement_action_l243c9 or new_hvals_3)
  begin
    case (1'b1) // synopsys parallel_case
      !hash_units_3_init:
	  hash_units_3_g_table_ADDRB = hash_units_3_gslot_counter;
      WILL_FIRE_RL_ldvn_action_l99c9:
	  hash_units_3_g_table_ADDRB = repair_hvals_3;
      WILL_FIRE_RL_mslot_replacement_action_l164c9:
	  hash_units_3_g_table_ADDRB = evictee_hvals_3;
      WILL_FIRE_RL_mslot_replacement_action_l243c9:
	  hash_units_3_g_table_ADDRB = new_hvals_3;
      default: hash_units_3_g_table_ADDRB =
		   11'b01010101010 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_ldvn_action_l30c9 or
	  WILL_FIRE_RL_mslot_replacement_action_l128c9 or
	  WILL_FIRE_RL_mslot_replacement_action_l172c9 or EN_lookup_key)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ldvn_action_l30c9:
	  hash_units_3_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_mslot_replacement_action_l128c9:
	  hash_units_3_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_mslot_replacement_action_l172c9:
	  hash_units_3_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      EN_lookup_key:
	  hash_units_3_g_table_DIA =
	      86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: hash_units_3_g_table_DIA =
		   86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(hash_units_3_init or
	  WILL_FIRE_RL_ldvn_action_l99c9 or
	  repair_gslots_3 or
	  WILL_FIRE_RL_mslot_replacement_action_l164c9 or
	  evictee_gslots_3 or
	  WILL_FIRE_RL_mslot_replacement_action_l243c9 or new_gslots_3)
  begin
    case (1'b1) // synopsys parallel_case
      !hash_units_3_init: hash_units_3_g_table_DIB = 86'd0;
      WILL_FIRE_RL_ldvn_action_l99c9:
	  hash_units_3_g_table_DIB = repair_gslots_3;
      WILL_FIRE_RL_mslot_replacement_action_l164c9:
	  hash_units_3_g_table_DIB = evictee_gslots_3;
      WILL_FIRE_RL_mslot_replacement_action_l243c9:
	  hash_units_3_g_table_DIB = new_gslots_3;
      default: hash_units_3_g_table_DIB =
		   86'h2AAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign hash_units_3_g_table_WEA = 1'd0 ;
  assign hash_units_3_g_table_WEB = 1'd1 ;
  assign hash_units_3_g_table_ENA =
	     WILL_FIRE_RL_ldvn_action_l30c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l128c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l172c9 ||
	     EN_lookup_key ;
  assign hash_units_3_g_table_ENB =
	     !hash_units_3_init || WILL_FIRE_RL_ldvn_action_l99c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l164c9 ||
	     WILL_FIRE_RL_mslot_replacement_action_l243c9 ;

  // submodule m_table
  assign m_table_ADDRA =
	     MUX_ldvn_start_reg_write_1__SEL_1 ?
	       victim_mslot_addr :
	       re_maddr__h109722 ;
  assign m_table_ADDRB = mslot_counter ;
  assign m_table_DIA =
	     MUX_ldvn_start_reg_write_1__SEL_1 ?
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  always@(MUX_m_table_b_put_1__SEL_1 or
	  MUX_m_table_b_put_1__SEL_2 or
	  WILL_FIRE_RL_mslot_replacement_action_l251c9 or new_mslot)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_table_b_put_1__SEL_1: m_table_DIB = 129'd0;
      MUX_m_table_b_put_1__SEL_2:
	  m_table_DIB =
	      129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_mslot_replacement_action_l251c9: m_table_DIB = new_mslot;
      default: m_table_DIB =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign m_table_WEA = 1'd0 ;
  assign m_table_WEB = !MUX_m_table_b_put_1__SEL_2 ;
  assign m_table_ENA =
	     WILL_FIRE_RL_mslot_replacement_action_l258c9 &&
	     victim_gslot[1:0] != 2'd0 ||
	     WILL_FIRE_RL_lookup_gtables ;
  assign m_table_ENB =
	     !inited && (hash_units_0_init || mslot_counter != 10'd1023) ||
	     EN_new_key_value && !miss_service ||
	     WILL_FIRE_RL_mslot_replacement_action_l251c9 ;

  // submodule stage1_ff
  assign stage1_ff_D_IN = lookup_key_key ;
  assign stage1_ff_ENQ = EN_lookup_key ;
  assign stage1_ff_DEQ = WILL_FIRE_RL_lookup_gtables ;
  assign stage1_ff_CLR = 1'b0 ;

  // submodule stage2_ff
  assign stage2_ff_D_IN = stage1_ff_D_OUT ;
  assign stage2_ff_ENQ = WILL_FIRE_RL_lookup_gtables ;
  assign stage2_ff_DEQ = WILL_FIRE_RL_lookup_mtable ;
  assign stage2_ff_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_evictee_mslot_28_BIT_107_28_THEN_1_ELSE_0___d625 =
	     evictee_mslot[107] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_28_BIT_109_47_THEN_1_ELSE_0___d560 =
	     evictee_mslot[109] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_28_BIT_118_30_THEN_1_ELSE_0___d628 =
	     evictee_mslot[118] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_28_BIT_119_38_THEN_2_ELSE_0___d631 =
	     evictee_mslot[119] ? 11'd2 : 11'd0 ;
  assign IF_evictee_mslot_28_BIT_120_35_THEN_1_ELSE_0___d563 =
	     evictee_mslot[120] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_28_BIT_65_40_THEN_1_ELSE_0_49_ETC___d559 =
	     IF_evictee_mslot_28_BIT_65_40_THEN_1_ELSE_0___d549[10] ^
	     IF_evictee_mslot_28_BIT_76_41_THEN_1_ELSE_0___d551[10] ^
	     IF_evictee_mslot_28_BIT_87_43_THEN_1_ELSE_0___d554[10] ^
	     IF_evictee_mslot_28_BIT_98_45_THEN_1_ELSE_0___d557[10] ;
  assign IF_evictee_mslot_28_BIT_65_40_THEN_1_ELSE_0_49_ETC___d575 =
	     IF_evictee_mslot_28_BIT_65_40_THEN_1_ELSE_0___d549[0] ^
	     IF_evictee_mslot_28_BIT_76_41_THEN_1_ELSE_0___d551[0] ^
	     IF_evictee_mslot_28_BIT_87_43_THEN_1_ELSE_0___d554[0] ^
	     IF_evictee_mslot_28_BIT_98_45_THEN_1_ELSE_0___d557[0] ;
  assign IF_evictee_mslot_28_BIT_65_40_THEN_1_ELSE_0___d549 =
	     evictee_mslot[65] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_28_BIT_74_23_THEN_1_ELSE_0_17_ETC___d627 =
	     IF_evictee_mslot_28_BIT_74_23_THEN_1_ELSE_0___d617[10] ^
	     IF_evictee_mslot_28_BIT_85_24_THEN_1_ELSE_0___d619[10] ^
	     IF_evictee_mslot_28_BIT_96_26_THEN_1_ELSE_0___d622[10] ^
	     IF_evictee_mslot_28_BIT_107_28_THEN_1_ELSE_0___d625[10] ;
  assign IF_evictee_mslot_28_BIT_74_23_THEN_1_ELSE_0_17_ETC___d642 =
	     IF_evictee_mslot_28_BIT_74_23_THEN_1_ELSE_0___d617[0] ^
	     IF_evictee_mslot_28_BIT_85_24_THEN_1_ELSE_0___d619[0] ^
	     IF_evictee_mslot_28_BIT_96_26_THEN_1_ELSE_0___d622[0] ^
	     IF_evictee_mslot_28_BIT_107_28_THEN_1_ELSE_0___d625[0] ;
  assign IF_evictee_mslot_28_BIT_74_23_THEN_1_ELSE_0___d617 =
	     evictee_mslot[74] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_28_BIT_76_41_THEN_1_ELSE_0___d551 =
	     evictee_mslot[76] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_28_BIT_85_24_THEN_1_ELSE_0___d619 =
	     evictee_mslot[85] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_28_BIT_87_43_THEN_1_ELSE_0___d554 =
	     evictee_mslot[87] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_28_BIT_96_26_THEN_1_ELSE_0___d622 =
	     evictee_mslot[96] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_28_BIT_98_45_THEN_1_ELSE_0___d557 =
	     evictee_mslot[98] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_BIT_102_THEN_1_ELSE_0__q10 =
	     evictee_mslot[102] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_BIT_113_THEN_1_ELSE_0__q11 =
	     evictee_mslot[113] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_BIT_124_THEN_1_ELSE_0__q12 =
	     evictee_mslot[124] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_BIT_69_THEN_1_ELSE_0__q7 =
	     evictee_mslot[69] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_BIT_80_THEN_1_ELSE_0__q8 =
	     evictee_mslot[80] ? 11'd1 : 11'd0 ;
  assign IF_evictee_mslot_BIT_91_THEN_1_ELSE_0__q9 =
	     evictee_mslot[91] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_10_169_THEN_1_ELSE_0_263_ETC___d1273 =
	     IF_lookup_key_key_BIT_10_169_THEN_1_ELSE_0___d1263[10] ^
	     IF_lookup_key_key_BIT_21_170_THEN_1_ELSE_0___d1265[10] ^
	     IF_lookup_key_key_BIT_32_172_THEN_1_ELSE_0___d1268[10] ^
	     IF_lookup_key_key_BIT_43_174_THEN_1_ELSE_0___d1271[10] ;
  assign IF_lookup_key_key_BIT_10_169_THEN_1_ELSE_0_263_ETC___d1288 =
	     IF_lookup_key_key_BIT_10_169_THEN_1_ELSE_0___d1263[0] ^
	     IF_lookup_key_key_BIT_21_170_THEN_1_ELSE_0___d1265[0] ^
	     IF_lookup_key_key_BIT_32_172_THEN_1_ELSE_0___d1268[0] ^
	     IF_lookup_key_key_BIT_43_174_THEN_1_ELSE_0___d1271[0] ;
  assign IF_lookup_key_key_BIT_10_169_THEN_1_ELSE_0___d1263 =
	     lookup_key_key[10] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_12_087_THEN_1_ELSE_0___d1197 =
	     lookup_key_key[12] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_16_THEN_1_ELSE_0__q20 =
	     lookup_key_key[16] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_1_086_THEN_1_ELSE_0_195__ETC___d1205 =
	     IF_lookup_key_key_BIT_1_086_THEN_1_ELSE_0___d1195[10] ^
	     IF_lookup_key_key_BIT_12_087_THEN_1_ELSE_0___d1197[10] ^
	     IF_lookup_key_key_BIT_23_089_THEN_1_ELSE_0___d1200[10] ^
	     IF_lookup_key_key_BIT_34_091_THEN_1_ELSE_0___d1203[10] ;
  assign IF_lookup_key_key_BIT_1_086_THEN_1_ELSE_0_195__ETC___d1221 =
	     IF_lookup_key_key_BIT_1_086_THEN_1_ELSE_0___d1195[0] ^
	     IF_lookup_key_key_BIT_12_087_THEN_1_ELSE_0___d1197[0] ^
	     IF_lookup_key_key_BIT_23_089_THEN_1_ELSE_0___d1200[0] ^
	     IF_lookup_key_key_BIT_34_091_THEN_1_ELSE_0___d1203[0] ;
  assign IF_lookup_key_key_BIT_1_086_THEN_1_ELSE_0___d1195 =
	     lookup_key_key[1] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_21_170_THEN_1_ELSE_0___d1265 =
	     lookup_key_key[21] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_23_089_THEN_1_ELSE_0___d1200 =
	     lookup_key_key[23] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_27_THEN_1_ELSE_0__q21 =
	     lookup_key_key[27] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_32_172_THEN_1_ELSE_0___d1268 =
	     lookup_key_key[32] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_34_091_THEN_1_ELSE_0___d1203 =
	     lookup_key_key[34] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_38_THEN_1_ELSE_0__q22 =
	     lookup_key_key[38] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_43_174_THEN_1_ELSE_0___d1271 =
	     lookup_key_key[43] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_45_093_THEN_1_ELSE_0___d1206 =
	     lookup_key_key[45] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_49_THEN_1_ELSE_0__q23 =
	     lookup_key_key[49] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_54_176_THEN_1_ELSE_0___d1274 =
	     lookup_key_key[54] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_55_084_THEN_2_ELSE_0___d1277 =
	     lookup_key_key[55] ? 11'd2 : 11'd0 ;
  assign IF_lookup_key_key_BIT_56_181_THEN_1_ELSE_0___d1209 =
	     lookup_key_key[56] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_5_THEN_1_ELSE_0__q19 =
	     lookup_key_key[5] ? 11'd1 : 11'd0 ;
  assign IF_lookup_key_key_BIT_60_THEN_1_ELSE_0__q24 =
	     lookup_key_key[60] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_4_BIT_107_64_THEN_1_ELSE_0___d261 =
	     mslot_to_repair[107] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_4_BIT_109_3_THEN_1_ELSE_0___d196 =
	     mslot_to_repair[109] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_4_BIT_118_66_THEN_1_ELSE_0___d264 =
	     mslot_to_repair[118] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_4_BIT_119_4_THEN_2_ELSE_0___d267 =
	     mslot_to_repair[119] ? 11'd2 : 11'd0 ;
  assign IF_mslot_to_repair_4_BIT_120_71_THEN_1_ELSE_0___d199 =
	     mslot_to_repair[120] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_4_BIT_65_6_THEN_1_ELSE_0_85_ETC___d195 =
	     IF_mslot_to_repair_4_BIT_65_6_THEN_1_ELSE_0___d185[10] ^
	     IF_mslot_to_repair_4_BIT_76_7_THEN_1_ELSE_0___d187[10] ^
	     IF_mslot_to_repair_4_BIT_87_9_THEN_1_ELSE_0___d190[10] ^
	     IF_mslot_to_repair_4_BIT_98_1_THEN_1_ELSE_0___d193[10] ;
  assign IF_mslot_to_repair_4_BIT_65_6_THEN_1_ELSE_0_85_ETC___d211 =
	     IF_mslot_to_repair_4_BIT_65_6_THEN_1_ELSE_0___d185[0] ^
	     IF_mslot_to_repair_4_BIT_76_7_THEN_1_ELSE_0___d187[0] ^
	     IF_mslot_to_repair_4_BIT_87_9_THEN_1_ELSE_0___d190[0] ^
	     IF_mslot_to_repair_4_BIT_98_1_THEN_1_ELSE_0___d193[0] ;
  assign IF_mslot_to_repair_4_BIT_65_6_THEN_1_ELSE_0___d185 =
	     mslot_to_repair[65] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_4_BIT_74_59_THEN_1_ELSE_0_5_ETC___d263 =
	     IF_mslot_to_repair_4_BIT_74_59_THEN_1_ELSE_0___d253[10] ^
	     IF_mslot_to_repair_4_BIT_85_60_THEN_1_ELSE_0___d255[10] ^
	     IF_mslot_to_repair_4_BIT_96_62_THEN_1_ELSE_0___d258[10] ^
	     IF_mslot_to_repair_4_BIT_107_64_THEN_1_ELSE_0___d261[10] ;
  assign IF_mslot_to_repair_4_BIT_74_59_THEN_1_ELSE_0_5_ETC___d278 =
	     IF_mslot_to_repair_4_BIT_74_59_THEN_1_ELSE_0___d253[0] ^
	     IF_mslot_to_repair_4_BIT_85_60_THEN_1_ELSE_0___d255[0] ^
	     IF_mslot_to_repair_4_BIT_96_62_THEN_1_ELSE_0___d258[0] ^
	     IF_mslot_to_repair_4_BIT_107_64_THEN_1_ELSE_0___d261[0] ;
  assign IF_mslot_to_repair_4_BIT_74_59_THEN_1_ELSE_0___d253 =
	     mslot_to_repair[74] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_4_BIT_76_7_THEN_1_ELSE_0___d187 =
	     mslot_to_repair[76] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_4_BIT_85_60_THEN_1_ELSE_0___d255 =
	     mslot_to_repair[85] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_4_BIT_87_9_THEN_1_ELSE_0___d190 =
	     mslot_to_repair[87] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_4_BIT_96_62_THEN_1_ELSE_0___d258 =
	     mslot_to_repair[96] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_4_BIT_98_1_THEN_1_ELSE_0___d193 =
	     mslot_to_repair[98] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_BIT_102_THEN_1_ELSE_0__q4 =
	     mslot_to_repair[102] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_BIT_113_THEN_1_ELSE_0__q5 =
	     mslot_to_repair[113] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_BIT_124_THEN_1_ELSE_0__q6 =
	     mslot_to_repair[124] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_BIT_69_THEN_1_ELSE_0__q1 =
	     mslot_to_repair[69] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_BIT_80_THEN_1_ELSE_0__q2 =
	     mslot_to_repair[80] ? 11'd1 : 11'd0 ;
  assign IF_mslot_to_repair_BIT_91_THEN_1_ELSE_0__q3 =
	     mslot_to_repair[91] ? 11'd1 : 11'd0 ;
  assign IF_new_gslots_2_36_BITS_1_TO_0_37_ULT_IF_new_g_ETC___d948 =
	     new_gslots_2_36_BITS_1_TO_0_37_ULT_IF_new_gslo_ETC___d944 ?
	       new_gslots_2 :
	       (new_gslots_1_38_BITS_1_TO_0_39_ULT_new_gslots__ETC___d942 ?
		  new_gslots_1 :
		  new_gslots_0) ;
  assign IF_new_mslot_04_BIT_107_04_THEN_1_ELSE_0___d901 =
	     new_mslot[107] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_04_BIT_109_23_THEN_1_ELSE_0___d836 =
	     new_mslot[109] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_04_BIT_118_06_THEN_1_ELSE_0___d904 =
	     new_mslot[118] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_04_BIT_119_14_THEN_2_ELSE_0___d907 =
	     new_mslot[119] ? 11'd2 : 11'd0 ;
  assign IF_new_mslot_04_BIT_120_11_THEN_1_ELSE_0___d839 =
	     new_mslot[120] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_04_BIT_65_16_THEN_1_ELSE_0_25_BIT_ETC___d835 =
	     IF_new_mslot_04_BIT_65_16_THEN_1_ELSE_0___d825[10] ^
	     IF_new_mslot_04_BIT_76_17_THEN_1_ELSE_0___d827[10] ^
	     IF_new_mslot_04_BIT_87_19_THEN_1_ELSE_0___d830[10] ^
	     IF_new_mslot_04_BIT_98_21_THEN_1_ELSE_0___d833[10] ;
  assign IF_new_mslot_04_BIT_65_16_THEN_1_ELSE_0_25_BIT_ETC___d851 =
	     IF_new_mslot_04_BIT_65_16_THEN_1_ELSE_0___d825[0] ^
	     IF_new_mslot_04_BIT_76_17_THEN_1_ELSE_0___d827[0] ^
	     IF_new_mslot_04_BIT_87_19_THEN_1_ELSE_0___d830[0] ^
	     IF_new_mslot_04_BIT_98_21_THEN_1_ELSE_0___d833[0] ;
  assign IF_new_mslot_04_BIT_65_16_THEN_1_ELSE_0___d825 =
	     new_mslot[65] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_04_BIT_74_99_THEN_1_ELSE_0_93_BIT_ETC___d903 =
	     IF_new_mslot_04_BIT_74_99_THEN_1_ELSE_0___d893[10] ^
	     IF_new_mslot_04_BIT_85_00_THEN_1_ELSE_0___d895[10] ^
	     IF_new_mslot_04_BIT_96_02_THEN_1_ELSE_0___d898[10] ^
	     IF_new_mslot_04_BIT_107_04_THEN_1_ELSE_0___d901[10] ;
  assign IF_new_mslot_04_BIT_74_99_THEN_1_ELSE_0_93_BIT_ETC___d918 =
	     IF_new_mslot_04_BIT_74_99_THEN_1_ELSE_0___d893[0] ^
	     IF_new_mslot_04_BIT_85_00_THEN_1_ELSE_0___d895[0] ^
	     IF_new_mslot_04_BIT_96_02_THEN_1_ELSE_0___d898[0] ^
	     IF_new_mslot_04_BIT_107_04_THEN_1_ELSE_0___d901[0] ;
  assign IF_new_mslot_04_BIT_74_99_THEN_1_ELSE_0___d893 =
	     new_mslot[74] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_04_BIT_76_17_THEN_1_ELSE_0___d827 =
	     new_mslot[76] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_04_BIT_85_00_THEN_1_ELSE_0___d895 =
	     new_mslot[85] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_04_BIT_87_19_THEN_1_ELSE_0___d830 =
	     new_mslot[87] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_04_BIT_96_02_THEN_1_ELSE_0___d898 =
	     new_mslot[96] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_04_BIT_98_21_THEN_1_ELSE_0___d833 =
	     new_mslot[98] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_BIT_102_THEN_1_ELSE_0__q16 =
	     new_mslot[102] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_BIT_113_THEN_1_ELSE_0__q17 =
	     new_mslot[113] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_BIT_124_THEN_1_ELSE_0__q18 =
	     new_mslot[124] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_BIT_69_THEN_1_ELSE_0__q13 =
	     new_mslot[69] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_BIT_80_THEN_1_ELSE_0__q14 =
	     new_mslot[80] ? 11'd1 : 11'd0 ;
  assign IF_new_mslot_BIT_91_THEN_1_ELSE_0__q15 =
	     new_mslot[91] ? 11'd1 : 11'd0 ;
  assign IF_repair_gslots_2_00_BITS_1_TO_0_01_ULT_IF_re_ETC___d312 =
	     repair_gslots_2_00_BITS_1_TO_0_01_ULT_IF_repai_ETC___d308 ?
	       repair_gslots_2 :
	       (repair_gslots_1_02_BITS_1_TO_0_03_ULT_repair_g_ETC___d306 ?
		  repair_gslots_1 :
		  repair_gslots_0) ;
  assign _theResult_____2_fst_maddr__h106782 =
	     _theResult_____2_fst_maddr__h106814 ^ new_gslots_3[21:12] ;
  assign _theResult_____2_fst_maddr__h106786 =
	     _theResult_____2_fst_maddr__h106810 ^ new_gslots_2[21:12] ;
  assign _theResult_____2_fst_maddr__h106790 =
	     _theResult_____2_fst_maddr__h106806 ^ new_gslots_1[21:12] ;
  assign _theResult_____2_fst_maddr__h106806 =
	     (victim_g_index == 2'd0) ? 10'd0 : new_gslots_0[21:12] ;
  assign _theResult_____2_fst_maddr__h106810 =
	     (victim_g_index == 2'd1) ?
	       _theResult_____2_fst_maddr__h106806 :
	       _theResult_____2_fst_maddr__h106790 ;
  assign _theResult_____2_fst_maddr__h106814 =
	     (victim_g_index == 2'd2) ?
	       _theResult_____2_fst_maddr__h106810 :
	       _theResult_____2_fst_maddr__h106786 ;
  assign _theResult_____2_fst_maddr__h40179 =
	     _theResult_____2_fst_maddr__h40211 ^ repair_gslots_3[21:12] ;
  assign _theResult_____2_fst_maddr__h40183 =
	     _theResult_____2_fst_maddr__h40207 ^ repair_gslots_2[21:12] ;
  assign _theResult_____2_fst_maddr__h40187 =
	     _theResult_____2_fst_maddr__h40203 ^ repair_gslots_1[21:12] ;
  assign _theResult_____2_fst_maddr__h40203 =
	     (repair_g_index == 2'd0) ? 10'd0 : repair_gslots_0[21:12] ;
  assign _theResult_____2_fst_maddr__h40207 =
	     (repair_g_index == 2'd1) ?
	       _theResult_____2_fst_maddr__h40203 :
	       _theResult_____2_fst_maddr__h40187 ;
  assign _theResult_____2_fst_maddr__h40211 =
	     (repair_g_index == 2'd2) ?
	       _theResult_____2_fst_maddr__h40207 :
	       _theResult_____2_fst_maddr__h40183 ;
  assign _theResult_____2_fst_value__h106781 =
	     _theResult_____2_fst_value__h106813 ^ new_gslots_3[85:22] ;
  assign _theResult_____2_fst_value__h106785 =
	     _theResult_____2_fst_value__h106809 ^ new_gslots_2[85:22] ;
  assign _theResult_____2_fst_value__h106789 =
	     _theResult_____2_fst_value__h106805 ^ new_gslots_1[85:22] ;
  assign _theResult_____2_fst_value__h106805 =
	     (victim_g_index == 2'd0) ? 64'd0 : new_gslots_0[85:22] ;
  assign _theResult_____2_fst_value__h106809 =
	     (victim_g_index == 2'd1) ?
	       _theResult_____2_fst_value__h106805 :
	       _theResult_____2_fst_value__h106789 ;
  assign _theResult_____2_fst_value__h106813 =
	     (victim_g_index == 2'd2) ?
	       _theResult_____2_fst_value__h106809 :
	       _theResult_____2_fst_value__h106785 ;
  assign _theResult_____2_fst_value__h106817 =
	     (victim_g_index == 2'd3) ?
	       _theResult_____2_fst_value__h106813 :
	       _theResult_____2_fst_value__h106781 ;
  assign _theResult_____2_fst_value__h40178 =
	     _theResult_____2_fst_value__h40210 ^ repair_gslots_3[85:22] ;
  assign _theResult_____2_fst_value__h40182 =
	     _theResult_____2_fst_value__h40206 ^ repair_gslots_2[85:22] ;
  assign _theResult_____2_fst_value__h40186 =
	     _theResult_____2_fst_value__h40202 ^ repair_gslots_1[85:22] ;
  assign _theResult_____2_fst_value__h40202 =
	     (repair_g_index == 2'd0) ? 64'd0 : repair_gslots_0[85:22] ;
  assign _theResult_____2_fst_value__h40206 =
	     (repair_g_index == 2'd1) ?
	       _theResult_____2_fst_value__h40202 :
	       _theResult_____2_fst_value__h40186 ;
  assign _theResult_____2_fst_value__h40210 =
	     (repair_g_index == 2'd2) ?
	       _theResult_____2_fst_value__h40206 :
	       _theResult_____2_fst_value__h40182 ;
  assign _theResult_____2_fst_value__h40214 =
	     (repair_g_index == 2'd3) ?
	       _theResult_____2_fst_value__h40210 :
	       _theResult_____2_fst_value__h40178 ;
  assign _theResult_____3_fst_degree__h105897 =
	     new_gslots_1_38_BITS_1_TO_0_39_ULT_new_gslots__ETC___d942 ?
	       new_gslots_1[1:0] :
	       new_gslots_0[1:0] ;
  assign _theResult_____3_fst_degree__h105918 =
	     new_gslots_2_36_BITS_1_TO_0_37_ULT_IF_new_gslo_ETC___d944 ?
	       new_gslots_2[1:0] :
	       _theResult_____3_fst_degree__h105897 ;
  assign _theResult_____3_fst_degree__h39415 =
	     repair_gslots_1_02_BITS_1_TO_0_03_ULT_repair_g_ETC___d306 ?
	       repair_gslots_1[1:0] :
	       repair_gslots_0[1:0] ;
  assign _theResult_____3_fst_degree__h39436 =
	     repair_gslots_2_00_BITS_1_TO_0_01_ULT_IF_repai_ETC___d308 ?
	       repair_gslots_2[1:0] :
	       _theResult_____3_fst_degree__h39415 ;
  assign _theResult_____3_fst_mslot__h105896 =
	     new_gslots_1_38_BITS_1_TO_0_39_ULT_new_gslots__ETC___d942 ?
	       new_gslots_1[11:2] :
	       new_gslots_0[11:2] ;
  assign _theResult_____3_fst_mslot__h105917 =
	     new_gslots_2_36_BITS_1_TO_0_37_ULT_IF_new_gslo_ETC___d944 ?
	       new_gslots_2[11:2] :
	       _theResult_____3_fst_mslot__h105896 ;
  assign evictee_mslot_28_BIT_64_29_XOR_evictee_mslot_2_ETC___d437 =
	     evictee_mslot[64] ^ evictee_mslot[75] ^ evictee_mslot[86] ^
	     evictee_mslot[97] ^
	     evictee_mslot[108] ;
  assign evictee_mslot_28_BIT_65_40_XOR_evictee_mslot_2_ETC___d534 =
	     { evictee_mslot[65] ^ evictee_mslot[76] ^ evictee_mslot[87] ^
	       evictee_mslot[98] ^
	       evictee_mslot[109],
	       evictee_mslot_28_BIT_66_49_XOR_evictee_mslot_2_ETC___d457,
	       evictee_mslot_28_BIT_67_58_XOR_evictee_mslot_2_ETC___d466,
	       evictee_mslot_28_BIT_68_68_XOR_evictee_mslot_2_ETC___d476,
	       evictee_mslot_28_BIT_69_77_XOR_evictee_mslot_2_ETC___d485,
	       evictee_mslot_28_BIT_70_86_XOR_evictee_mslot_2_ETC___d494,
	       evictee_mslot_28_BIT_71_95_XOR_evictee_mslot_2_ETC___d503,
	       evictee_mslot_28_BIT_72_05_XOR_evictee_mslot_2_ETC___d513,
	       evictee_mslot_28_BIT_73_14_XOR_evictee_mslot_2_ETC___d522,
	       evictee_mslot_28_BIT_74_23_XOR_evictee_mslot_2_ETC___d531 } ;
  assign evictee_mslot_28_BIT_66_49_XOR_evictee_mslot_2_ETC___d457 =
	     evictee_mslot[66] ^ evictee_mslot[77] ^ evictee_mslot[88] ^
	     evictee_mslot[99] ^
	     evictee_mslot[110] ;
  assign evictee_mslot_28_BIT_66_49_XOR_evictee_mslot_2_ETC___d652 =
	     { evictee_mslot_28_BIT_66_49_XOR_evictee_mslot_2_ETC___d457,
	       evictee_mslot_28_BIT_70_86_XOR_evictee_mslot_2_ETC___d494,
	       evictee_mslot_28_BIT_68_68_XOR_evictee_mslot_2_ETC___d476,
	       evictee_mslot_28_BIT_68_68_XOR_evictee_mslot_2_ETC___d476,
	       evictee_mslot_28_BIT_70_86_XOR_evictee_mslot_2_ETC___d645 } ^
	     { evictee_mslot[121],
	       evictee_mslot[125],
	       evictee_mslot[123],
	       evictee_mslot[123],
	       evictee_mslot[125],
	       evictee_mslot[121],
	       evictee_mslot[127],
	       IF_evictee_mslot_28_BIT_119_38_THEN_2_ELSE_0___d631[1:0] } ;
  assign evictee_mslot_28_BIT_67_58_XOR_evictee_mslot_2_ETC___d466 =
	     evictee_mslot[67] ^ evictee_mslot[78] ^ evictee_mslot[89] ^
	     evictee_mslot[100] ^
	     evictee_mslot[111] ;
  assign evictee_mslot_28_BIT_68_68_XOR_evictee_mslot_2_ETC___d476 =
	     evictee_mslot[68] ^ evictee_mslot[79] ^ evictee_mslot[90] ^
	     evictee_mslot[101] ^
	     evictee_mslot[112] ;
  assign evictee_mslot_28_BIT_69_77_XOR_evictee_mslot_2_ETC___d485 =
	     evictee_mslot[69] ^ evictee_mslot[80] ^ evictee_mslot[91] ^
	     evictee_mslot[102] ^
	     evictee_mslot[113] ;
  assign evictee_mslot_28_BIT_69_77_XOR_evictee_mslot_2_ETC___d578 =
	     { evictee_mslot_28_BIT_69_77_XOR_evictee_mslot_2_ETC___d485,
	       evictee_mslot_28_BIT_66_49_XOR_evictee_mslot_2_ETC___d457,
	       evictee_mslot_28_BIT_67_58_XOR_evictee_mslot_2_ETC___d466,
	       evictee_mslot_28_BIT_64_29_XOR_evictee_mslot_2_ETC___d437,
	       IF_evictee_mslot_28_BIT_65_40_THEN_1_ELSE_0_49_ETC___d575 ^
	       IF_evictee_mslot_28_BIT_109_47_THEN_1_ELSE_0___d560[0] } ;
  assign evictee_mslot_28_BIT_70_86_XOR_evictee_mslot_2_ETC___d494 =
	     evictee_mslot[70] ^ evictee_mslot[81] ^ evictee_mslot[92] ^
	     evictee_mslot[103] ^
	     evictee_mslot[114] ;
  assign evictee_mslot_28_BIT_70_86_XOR_evictee_mslot_2_ETC___d645 =
	     { evictee_mslot_28_BIT_70_86_XOR_evictee_mslot_2_ETC___d494,
	       evictee_mslot_28_BIT_66_49_XOR_evictee_mslot_2_ETC___d457,
	       evictee_mslot_28_BIT_72_05_XOR_evictee_mslot_2_ETC___d513,
	       evictee_mslot_28_BIT_64_29_XOR_evictee_mslot_2_ETC___d437,
	       IF_evictee_mslot_28_BIT_74_23_THEN_1_ELSE_0_17_ETC___d642 ^
	       IF_evictee_mslot_28_BIT_118_30_THEN_1_ELSE_0___d628[0] } ;
  assign evictee_mslot_28_BIT_71_95_XOR_evictee_mslot_2_ETC___d503 =
	     evictee_mslot[71] ^ evictee_mslot[82] ^ evictee_mslot[93] ^
	     evictee_mslot[104] ^
	     evictee_mslot[115] ;
  assign evictee_mslot_28_BIT_72_05_XOR_evictee_mslot_2_ETC___d513 =
	     evictee_mslot[72] ^ evictee_mslot[83] ^ evictee_mslot[94] ^
	     evictee_mslot[105] ^
	     evictee_mslot[116] ;
  assign evictee_mslot_28_BIT_72_05_XOR_evictee_mslot_2_ETC___d566 =
	     evictee_mslot_28_BIT_72_05_XOR_evictee_mslot_2_ETC___d513 ^
	     evictee_mslot[127] ;
  assign evictee_mslot_28_BIT_73_14_XOR_evictee_mslot_2_ETC___d522 =
	     evictee_mslot[73] ^ evictee_mslot[84] ^ evictee_mslot[95] ^
	     evictee_mslot[106] ^
	     evictee_mslot[117] ;
  assign evictee_mslot_28_BIT_73_14_XOR_evictee_mslot_2_ETC___d585 =
	     { evictee_mslot_28_BIT_73_14_XOR_evictee_mslot_2_ETC___d522,
	       evictee_mslot_28_BIT_70_86_XOR_evictee_mslot_2_ETC___d494,
	       evictee_mslot_28_BIT_71_95_XOR_evictee_mslot_2_ETC___d503,
	       evictee_mslot_28_BIT_68_68_XOR_evictee_mslot_2_ETC___d476,
	       evictee_mslot_28_BIT_69_77_XOR_evictee_mslot_2_ETC___d578 } ^
	     { 1'd0,
	       evictee_mslot[125],
	       evictee_mslot[126],
	       evictee_mslot[123],
	       evictee_mslot[124],
	       evictee_mslot[121],
	       evictee_mslot[122],
	       evictee_mslot[119],
	       IF_evictee_mslot_28_BIT_120_35_THEN_1_ELSE_0___d563[0] } ;
  assign evictee_mslot_28_BIT_74_23_XOR_evictee_mslot_2_ETC___d531 =
	     evictee_mslot[74] ^ evictee_mslot[85] ^ evictee_mslot[96] ^
	     evictee_mslot[107] ^
	     evictee_mslot[118] ;
  assign hash_units_0_init_AND_hash_units_1_init_AND_ha_ETC___d373 =
	     hash_units_0_init && hash_units_1_init && hash_units_2_init &&
	     hash_units_3_init ;
  assign ldvn_abort_whas__8_AND_ldvn_abort_wget__9_0_OR_ETC___d387 =
	     (ldvn_state_mkFSMstate == 4'd0 ||
	      ldvn_state_mkFSMstate == 4'd7) &&
	     (!ldvn_start_reg_1 || ldvn_state_fired) ;
  assign lookup_key_key_BIT_0_075_XOR_lookup_key_key_BI_ETC___d1083 =
	     lookup_key_key[0] ^ lookup_key_key[11] ^ lookup_key_key[22] ^
	     lookup_key_key[33] ^
	     lookup_key_key[44] ;
  assign lookup_key_key_BIT_10_169_XOR_lookup_key_key_B_ETC___d1177 =
	     lookup_key_key[10] ^ lookup_key_key[21] ^ lookup_key_key[32] ^
	     lookup_key_key[43] ^
	     lookup_key_key[54] ;
  assign lookup_key_key_BIT_1_086_XOR_lookup_key_key_BI_ETC___d1180 =
	     { lookup_key_key[1] ^ lookup_key_key[12] ^ lookup_key_key[23] ^
	       lookup_key_key[34] ^
	       lookup_key_key[45],
	       lookup_key_key_BIT_2_095_XOR_lookup_key_key_BI_ETC___d1103,
	       lookup_key_key_BIT_3_104_XOR_lookup_key_key_BI_ETC___d1112,
	       lookup_key_key_BIT_4_114_XOR_lookup_key_key_BI_ETC___d1122,
	       lookup_key_key_BIT_5_123_XOR_lookup_key_key_BI_ETC___d1131,
	       lookup_key_key_BIT_6_132_XOR_lookup_key_key_BI_ETC___d1140,
	       lookup_key_key_BIT_7_141_XOR_lookup_key_key_BI_ETC___d1149,
	       lookup_key_key_BIT_8_151_XOR_lookup_key_key_BI_ETC___d1159,
	       lookup_key_key_BIT_9_160_XOR_lookup_key_key_BI_ETC___d1168,
	       lookup_key_key_BIT_10_169_XOR_lookup_key_key_B_ETC___d1177 } ;
  assign lookup_key_key_BIT_2_095_XOR_lookup_key_key_BI_ETC___d1103 =
	     lookup_key_key[2] ^ lookup_key_key[13] ^ lookup_key_key[24] ^
	     lookup_key_key[35] ^
	     lookup_key_key[46] ;
  assign lookup_key_key_BIT_2_095_XOR_lookup_key_key_BI_ETC___d1298 =
	     { lookup_key_key_BIT_2_095_XOR_lookup_key_key_BI_ETC___d1103,
	       lookup_key_key_BIT_6_132_XOR_lookup_key_key_BI_ETC___d1140,
	       lookup_key_key_BIT_4_114_XOR_lookup_key_key_BI_ETC___d1122,
	       lookup_key_key_BIT_4_114_XOR_lookup_key_key_BI_ETC___d1122,
	       lookup_key_key_BIT_6_132_XOR_lookup_key_key_BI_ETC___d1291 } ^
	     { lookup_key_key[57],
	       lookup_key_key[61],
	       lookup_key_key[59],
	       lookup_key_key[59],
	       lookup_key_key[61],
	       lookup_key_key[57],
	       lookup_key_key[63],
	       IF_lookup_key_key_BIT_55_084_THEN_2_ELSE_0___d1277[1:0] } ;
  assign lookup_key_key_BIT_3_104_XOR_lookup_key_key_BI_ETC___d1112 =
	     lookup_key_key[3] ^ lookup_key_key[14] ^ lookup_key_key[25] ^
	     lookup_key_key[36] ^
	     lookup_key_key[47] ;
  assign lookup_key_key_BIT_4_114_XOR_lookup_key_key_BI_ETC___d1122 =
	     lookup_key_key[4] ^ lookup_key_key[15] ^ lookup_key_key[26] ^
	     lookup_key_key[37] ^
	     lookup_key_key[48] ;
  assign lookup_key_key_BIT_5_123_XOR_lookup_key_key_BI_ETC___d1131 =
	     lookup_key_key[5] ^ lookup_key_key[16] ^ lookup_key_key[27] ^
	     lookup_key_key[38] ^
	     lookup_key_key[49] ;
  assign lookup_key_key_BIT_5_123_XOR_lookup_key_key_BI_ETC___d1224 =
	     { lookup_key_key_BIT_5_123_XOR_lookup_key_key_BI_ETC___d1131,
	       lookup_key_key_BIT_2_095_XOR_lookup_key_key_BI_ETC___d1103,
	       lookup_key_key_BIT_3_104_XOR_lookup_key_key_BI_ETC___d1112,
	       lookup_key_key_BIT_0_075_XOR_lookup_key_key_BI_ETC___d1083,
	       IF_lookup_key_key_BIT_1_086_THEN_1_ELSE_0_195__ETC___d1221 ^
	       IF_lookup_key_key_BIT_45_093_THEN_1_ELSE_0___d1206[0] } ;
  assign lookup_key_key_BIT_6_132_XOR_lookup_key_key_BI_ETC___d1140 =
	     lookup_key_key[6] ^ lookup_key_key[17] ^ lookup_key_key[28] ^
	     lookup_key_key[39] ^
	     lookup_key_key[50] ;
  assign lookup_key_key_BIT_6_132_XOR_lookup_key_key_BI_ETC___d1291 =
	     { lookup_key_key_BIT_6_132_XOR_lookup_key_key_BI_ETC___d1140,
	       lookup_key_key_BIT_2_095_XOR_lookup_key_key_BI_ETC___d1103,
	       lookup_key_key_BIT_8_151_XOR_lookup_key_key_BI_ETC___d1159,
	       lookup_key_key_BIT_0_075_XOR_lookup_key_key_BI_ETC___d1083,
	       IF_lookup_key_key_BIT_10_169_THEN_1_ELSE_0_263_ETC___d1288 ^
	       IF_lookup_key_key_BIT_54_176_THEN_1_ELSE_0___d1274[0] } ;
  assign lookup_key_key_BIT_7_141_XOR_lookup_key_key_BI_ETC___d1149 =
	     lookup_key_key[7] ^ lookup_key_key[18] ^ lookup_key_key[29] ^
	     lookup_key_key[40] ^
	     lookup_key_key[51] ;
  assign lookup_key_key_BIT_8_151_XOR_lookup_key_key_BI_ETC___d1159 =
	     lookup_key_key[8] ^ lookup_key_key[19] ^ lookup_key_key[30] ^
	     lookup_key_key[41] ^
	     lookup_key_key[52] ;
  assign lookup_key_key_BIT_8_151_XOR_lookup_key_key_BI_ETC___d1212 =
	     lookup_key_key_BIT_8_151_XOR_lookup_key_key_BI_ETC___d1159 ^
	     lookup_key_key[63] ;
  assign lookup_key_key_BIT_9_160_XOR_lookup_key_key_BI_ETC___d1168 =
	     lookup_key_key[9] ^ lookup_key_key[20] ^ lookup_key_key[31] ^
	     lookup_key_key[42] ^
	     lookup_key_key[53] ;
  assign lookup_key_key_BIT_9_160_XOR_lookup_key_key_BI_ETC___d1231 =
	     { lookup_key_key_BIT_9_160_XOR_lookup_key_key_BI_ETC___d1168,
	       lookup_key_key_BIT_6_132_XOR_lookup_key_key_BI_ETC___d1140,
	       lookup_key_key_BIT_7_141_XOR_lookup_key_key_BI_ETC___d1149,
	       lookup_key_key_BIT_4_114_XOR_lookup_key_key_BI_ETC___d1122,
	       lookup_key_key_BIT_5_123_XOR_lookup_key_key_BI_ETC___d1224 } ^
	     { 1'd0,
	       lookup_key_key[61],
	       lookup_key_key[62],
	       lookup_key_key[59],
	       lookup_key_key[60],
	       lookup_key_key[57],
	       lookup_key_key[58],
	       lookup_key_key[55],
	       IF_lookup_key_key_BIT_56_181_THEN_1_ELSE_0___d1209[0] } ;
  assign mslot__h40163 =
	     (repair_g_index == 2'd0) ?
	       repair_gslots_0[11:2] :
	       victim_mslot_addr ;
  assign mslot__h40435 =
	     (repair_g_index == 2'd1) ?
	       repair_gslots_1[11:2] :
	       victim_mslot_addr ;
  assign mslot__h40560 =
	     (repair_g_index == 2'd2) ?
	       repair_gslots_2[11:2] :
	       victim_mslot_addr ;
  assign mslot__h40685 =
	     (repair_g_index == 2'd3) ?
	       repair_gslots_3[11:2] :
	       victim_mslot_addr ;
  assign mslot_replacement_abort_whas__93_AND_mslot_rep_ETC___d1037 =
	     (mslot_replacement_state_mkFSMstate == 4'd0 ||
	      mslot_replacement_state_mkFSMstate == 4'd12) &&
	     (!mslot_replacement_start_reg_1 ||
	      mslot_replacement_state_fired) ;
  assign mslot_to_repair_4_BIT_64_5_XOR_mslot_to_repair_ETC___d73 =
	     mslot_to_repair[64] ^ mslot_to_repair[75] ^ mslot_to_repair[86] ^
	     mslot_to_repair[97] ^
	     mslot_to_repair[108] ;
  assign mslot_to_repair_4_BIT_65_6_XOR_mslot_to_repair_ETC___d170 =
	     { mslot_to_repair[65] ^ mslot_to_repair[76] ^
	       mslot_to_repair[87] ^
	       mslot_to_repair[98] ^
	       mslot_to_repair[109],
	       mslot_to_repair_4_BIT_66_5_XOR_mslot_to_repair_ETC___d93,
	       mslot_to_repair_4_BIT_67_4_XOR_mslot_to_repair_ETC___d102,
	       mslot_to_repair_4_BIT_68_04_XOR_mslot_to_repai_ETC___d112,
	       mslot_to_repair_4_BIT_69_13_XOR_mslot_to_repai_ETC___d121,
	       mslot_to_repair_4_BIT_70_22_XOR_mslot_to_repai_ETC___d130,
	       mslot_to_repair_4_BIT_71_31_XOR_mslot_to_repai_ETC___d139,
	       mslot_to_repair_4_BIT_72_41_XOR_mslot_to_repai_ETC___d149,
	       mslot_to_repair_4_BIT_73_50_XOR_mslot_to_repai_ETC___d158,
	       mslot_to_repair_4_BIT_74_59_XOR_mslot_to_repai_ETC___d167 } ;
  assign mslot_to_repair_4_BIT_66_5_XOR_mslot_to_repair_ETC___d288 =
	     { mslot_to_repair_4_BIT_66_5_XOR_mslot_to_repair_ETC___d93,
	       mslot_to_repair_4_BIT_70_22_XOR_mslot_to_repai_ETC___d130,
	       mslot_to_repair_4_BIT_68_04_XOR_mslot_to_repai_ETC___d112,
	       mslot_to_repair_4_BIT_68_04_XOR_mslot_to_repai_ETC___d112,
	       mslot_to_repair_4_BIT_70_22_XOR_mslot_to_repai_ETC___d281 } ^
	     { mslot_to_repair[121],
	       mslot_to_repair[125],
	       mslot_to_repair[123],
	       mslot_to_repair[123],
	       mslot_to_repair[125],
	       mslot_to_repair[121],
	       mslot_to_repair[127],
	       IF_mslot_to_repair_4_BIT_119_4_THEN_2_ELSE_0___d267[1:0] } ;
  assign mslot_to_repair_4_BIT_66_5_XOR_mslot_to_repair_ETC___d93 =
	     mslot_to_repair[66] ^ mslot_to_repair[77] ^ mslot_to_repair[88] ^
	     mslot_to_repair[99] ^
	     mslot_to_repair[110] ;
  assign mslot_to_repair_4_BIT_67_4_XOR_mslot_to_repair_ETC___d102 =
	     mslot_to_repair[67] ^ mslot_to_repair[78] ^ mslot_to_repair[89] ^
	     mslot_to_repair[100] ^
	     mslot_to_repair[111] ;
  assign mslot_to_repair_4_BIT_68_04_XOR_mslot_to_repai_ETC___d112 =
	     mslot_to_repair[68] ^ mslot_to_repair[79] ^ mslot_to_repair[90] ^
	     mslot_to_repair[101] ^
	     mslot_to_repair[112] ;
  assign mslot_to_repair_4_BIT_69_13_XOR_mslot_to_repai_ETC___d121 =
	     mslot_to_repair[69] ^ mslot_to_repair[80] ^ mslot_to_repair[91] ^
	     mslot_to_repair[102] ^
	     mslot_to_repair[113] ;
  assign mslot_to_repair_4_BIT_69_13_XOR_mslot_to_repai_ETC___d214 =
	     { mslot_to_repair_4_BIT_69_13_XOR_mslot_to_repai_ETC___d121,
	       mslot_to_repair_4_BIT_66_5_XOR_mslot_to_repair_ETC___d93,
	       mslot_to_repair_4_BIT_67_4_XOR_mslot_to_repair_ETC___d102,
	       mslot_to_repair_4_BIT_64_5_XOR_mslot_to_repair_ETC___d73,
	       IF_mslot_to_repair_4_BIT_65_6_THEN_1_ELSE_0_85_ETC___d211 ^
	       IF_mslot_to_repair_4_BIT_109_3_THEN_1_ELSE_0___d196[0] } ;
  assign mslot_to_repair_4_BIT_70_22_XOR_mslot_to_repai_ETC___d130 =
	     mslot_to_repair[70] ^ mslot_to_repair[81] ^ mslot_to_repair[92] ^
	     mslot_to_repair[103] ^
	     mslot_to_repair[114] ;
  assign mslot_to_repair_4_BIT_70_22_XOR_mslot_to_repai_ETC___d281 =
	     { mslot_to_repair_4_BIT_70_22_XOR_mslot_to_repai_ETC___d130,
	       mslot_to_repair_4_BIT_66_5_XOR_mslot_to_repair_ETC___d93,
	       mslot_to_repair_4_BIT_72_41_XOR_mslot_to_repai_ETC___d149,
	       mslot_to_repair_4_BIT_64_5_XOR_mslot_to_repair_ETC___d73,
	       IF_mslot_to_repair_4_BIT_74_59_THEN_1_ELSE_0_5_ETC___d278 ^
	       IF_mslot_to_repair_4_BIT_118_66_THEN_1_ELSE_0___d264[0] } ;
  assign mslot_to_repair_4_BIT_71_31_XOR_mslot_to_repai_ETC___d139 =
	     mslot_to_repair[71] ^ mslot_to_repair[82] ^ mslot_to_repair[93] ^
	     mslot_to_repair[104] ^
	     mslot_to_repair[115] ;
  assign mslot_to_repair_4_BIT_72_41_XOR_mslot_to_repai_ETC___d149 =
	     mslot_to_repair[72] ^ mslot_to_repair[83] ^ mslot_to_repair[94] ^
	     mslot_to_repair[105] ^
	     mslot_to_repair[116] ;
  assign mslot_to_repair_4_BIT_72_41_XOR_mslot_to_repai_ETC___d202 =
	     mslot_to_repair_4_BIT_72_41_XOR_mslot_to_repai_ETC___d149 ^
	     mslot_to_repair[127] ;
  assign mslot_to_repair_4_BIT_73_50_XOR_mslot_to_repai_ETC___d158 =
	     mslot_to_repair[73] ^ mslot_to_repair[84] ^ mslot_to_repair[95] ^
	     mslot_to_repair[106] ^
	     mslot_to_repair[117] ;
  assign mslot_to_repair_4_BIT_73_50_XOR_mslot_to_repai_ETC___d221 =
	     { mslot_to_repair_4_BIT_73_50_XOR_mslot_to_repai_ETC___d158,
	       mslot_to_repair_4_BIT_70_22_XOR_mslot_to_repai_ETC___d130,
	       mslot_to_repair_4_BIT_71_31_XOR_mslot_to_repai_ETC___d139,
	       mslot_to_repair_4_BIT_68_04_XOR_mslot_to_repai_ETC___d112,
	       mslot_to_repair_4_BIT_69_13_XOR_mslot_to_repai_ETC___d214 } ^
	     { 1'd0,
	       mslot_to_repair[125],
	       mslot_to_repair[126],
	       mslot_to_repair[123],
	       mslot_to_repair[124],
	       mslot_to_repair[121],
	       mslot_to_repair[122],
	       mslot_to_repair[119],
	       IF_mslot_to_repair_4_BIT_120_71_THEN_1_ELSE_0___d199[0] } ;
  assign mslot_to_repair_4_BIT_74_59_XOR_mslot_to_repai_ETC___d167 =
	     mslot_to_repair[74] ^ mslot_to_repair[85] ^ mslot_to_repair[96] ^
	     mslot_to_repair[107] ^
	     mslot_to_repair[118] ;
  assign n_degree__h106750 = new_gslots_0[1:0] + 2'd1 ;
  assign n_degree__h107047 = new_gslots_1[1:0] + 2'd1 ;
  assign n_degree__h107195 = new_gslots_2[1:0] + 2'd1 ;
  assign n_degree__h107343 = new_gslots_3[1:0] + 2'd1 ;
  assign n_maddr__h106741 = tmp_gslot_maddr__h106778 ^ mslot_counter ;
  assign n_maddr__h40142 = tmp_gslot_maddr__h40175 ^ victim_mslot_addr ;
  assign n_value__h106740 =
	     _theResult_____2_fst_value__h106817 ^ new_mslot[63:0] ;
  assign n_value__h40141 =
	     _theResult_____2_fst_value__h40214 ^ mslot_to_repair[63:0] ;
  assign new_gslots_1_38_BITS_1_TO_0_39_ULT_new_gslots__ETC___d942 =
	     new_gslots_1[1:0] < new_gslots_0[1:0] ;
  assign new_gslots_2_36_BITS_1_TO_0_37_ULT_IF_new_gslo_ETC___d944 =
	     new_gslots_2[1:0] < _theResult_____3_fst_degree__h105897 ;
  assign new_gslots_3_34_BITS_1_TO_0_35_ULT_IF_new_gslo_ETC___d946 =
	     new_gslots_3[1:0] < _theResult_____3_fst_degree__h105918 ;
  assign new_mslot_04_BIT_64_05_XOR_new_mslot_04_BIT_75_ETC___d713 =
	     new_mslot[64] ^ new_mslot[75] ^ new_mslot[86] ^ new_mslot[97] ^
	     new_mslot[108] ;
  assign new_mslot_04_BIT_65_16_XOR_new_mslot_04_BIT_76_ETC___d810 =
	     { new_mslot[65] ^ new_mslot[76] ^ new_mslot[87] ^ new_mslot[98] ^
	       new_mslot[109],
	       new_mslot_04_BIT_66_25_XOR_new_mslot_04_BIT_77_ETC___d733,
	       new_mslot_04_BIT_67_34_XOR_new_mslot_04_BIT_78_ETC___d742,
	       new_mslot_04_BIT_68_44_XOR_new_mslot_04_BIT_79_ETC___d752,
	       new_mslot_04_BIT_69_53_XOR_new_mslot_04_BIT_80_ETC___d761,
	       new_mslot_04_BIT_70_62_XOR_new_mslot_04_BIT_81_ETC___d770,
	       new_mslot_04_BIT_71_71_XOR_new_mslot_04_BIT_82_ETC___d779,
	       new_mslot_04_BIT_72_81_XOR_new_mslot_04_BIT_83_ETC___d789,
	       new_mslot_04_BIT_73_90_XOR_new_mslot_04_BIT_84_ETC___d798,
	       new_mslot_04_BIT_74_99_XOR_new_mslot_04_BIT_85_ETC___d807 } ;
  assign new_mslot_04_BIT_66_25_XOR_new_mslot_04_BIT_77_ETC___d733 =
	     new_mslot[66] ^ new_mslot[77] ^ new_mslot[88] ^ new_mslot[99] ^
	     new_mslot[110] ;
  assign new_mslot_04_BIT_66_25_XOR_new_mslot_04_BIT_77_ETC___d928 =
	     { new_mslot_04_BIT_66_25_XOR_new_mslot_04_BIT_77_ETC___d733,
	       new_mslot_04_BIT_70_62_XOR_new_mslot_04_BIT_81_ETC___d770,
	       new_mslot_04_BIT_68_44_XOR_new_mslot_04_BIT_79_ETC___d752,
	       new_mslot_04_BIT_68_44_XOR_new_mslot_04_BIT_79_ETC___d752,
	       new_mslot_04_BIT_70_62_XOR_new_mslot_04_BIT_81_ETC___d921 } ^
	     { new_mslot[121],
	       new_mslot[125],
	       new_mslot[123],
	       new_mslot[123],
	       new_mslot[125],
	       new_mslot[121],
	       new_mslot[127],
	       IF_new_mslot_04_BIT_119_14_THEN_2_ELSE_0___d907[1:0] } ;
  assign new_mslot_04_BIT_67_34_XOR_new_mslot_04_BIT_78_ETC___d742 =
	     new_mslot[67] ^ new_mslot[78] ^ new_mslot[89] ^ new_mslot[100] ^
	     new_mslot[111] ;
  assign new_mslot_04_BIT_68_44_XOR_new_mslot_04_BIT_79_ETC___d752 =
	     new_mslot[68] ^ new_mslot[79] ^ new_mslot[90] ^ new_mslot[101] ^
	     new_mslot[112] ;
  assign new_mslot_04_BIT_69_53_XOR_new_mslot_04_BIT_80_ETC___d761 =
	     new_mslot[69] ^ new_mslot[80] ^ new_mslot[91] ^ new_mslot[102] ^
	     new_mslot[113] ;
  assign new_mslot_04_BIT_69_53_XOR_new_mslot_04_BIT_80_ETC___d854 =
	     { new_mslot_04_BIT_69_53_XOR_new_mslot_04_BIT_80_ETC___d761,
	       new_mslot_04_BIT_66_25_XOR_new_mslot_04_BIT_77_ETC___d733,
	       new_mslot_04_BIT_67_34_XOR_new_mslot_04_BIT_78_ETC___d742,
	       new_mslot_04_BIT_64_05_XOR_new_mslot_04_BIT_75_ETC___d713,
	       IF_new_mslot_04_BIT_65_16_THEN_1_ELSE_0_25_BIT_ETC___d851 ^
	       IF_new_mslot_04_BIT_109_23_THEN_1_ELSE_0___d836[0] } ;
  assign new_mslot_04_BIT_70_62_XOR_new_mslot_04_BIT_81_ETC___d770 =
	     new_mslot[70] ^ new_mslot[81] ^ new_mslot[92] ^ new_mslot[103] ^
	     new_mslot[114] ;
  assign new_mslot_04_BIT_70_62_XOR_new_mslot_04_BIT_81_ETC___d921 =
	     { new_mslot_04_BIT_70_62_XOR_new_mslot_04_BIT_81_ETC___d770,
	       new_mslot_04_BIT_66_25_XOR_new_mslot_04_BIT_77_ETC___d733,
	       new_mslot_04_BIT_72_81_XOR_new_mslot_04_BIT_83_ETC___d789,
	       new_mslot_04_BIT_64_05_XOR_new_mslot_04_BIT_75_ETC___d713,
	       IF_new_mslot_04_BIT_74_99_THEN_1_ELSE_0_93_BIT_ETC___d918 ^
	       IF_new_mslot_04_BIT_118_06_THEN_1_ELSE_0___d904[0] } ;
  assign new_mslot_04_BIT_71_71_XOR_new_mslot_04_BIT_82_ETC___d779 =
	     new_mslot[71] ^ new_mslot[82] ^ new_mslot[93] ^ new_mslot[104] ^
	     new_mslot[115] ;
  assign new_mslot_04_BIT_72_81_XOR_new_mslot_04_BIT_83_ETC___d789 =
	     new_mslot[72] ^ new_mslot[83] ^ new_mslot[94] ^ new_mslot[105] ^
	     new_mslot[116] ;
  assign new_mslot_04_BIT_72_81_XOR_new_mslot_04_BIT_83_ETC___d842 =
	     new_mslot_04_BIT_72_81_XOR_new_mslot_04_BIT_83_ETC___d789 ^
	     new_mslot[127] ;
  assign new_mslot_04_BIT_73_90_XOR_new_mslot_04_BIT_84_ETC___d798 =
	     new_mslot[73] ^ new_mslot[84] ^ new_mslot[95] ^ new_mslot[106] ^
	     new_mslot[117] ;
  assign new_mslot_04_BIT_73_90_XOR_new_mslot_04_BIT_84_ETC___d861 =
	     { new_mslot_04_BIT_73_90_XOR_new_mslot_04_BIT_84_ETC___d798,
	       new_mslot_04_BIT_70_62_XOR_new_mslot_04_BIT_81_ETC___d770,
	       new_mslot_04_BIT_71_71_XOR_new_mslot_04_BIT_82_ETC___d779,
	       new_mslot_04_BIT_68_44_XOR_new_mslot_04_BIT_79_ETC___d752,
	       new_mslot_04_BIT_69_53_XOR_new_mslot_04_BIT_80_ETC___d854 } ^
	     { 1'd0,
	       new_mslot[125],
	       new_mslot[126],
	       new_mslot[123],
	       new_mslot[124],
	       new_mslot[121],
	       new_mslot[122],
	       new_mslot[119],
	       IF_new_mslot_04_BIT_120_11_THEN_1_ELSE_0___d839[0] } ;
  assign new_mslot_04_BIT_74_99_XOR_new_mslot_04_BIT_85_ETC___d807 =
	     new_mslot[74] ^ new_mslot[85] ^ new_mslot[96] ^ new_mslot[107] ^
	     new_mslot[118] ;
  assign re_maddr__h109722 =
	     hash_units_0_g_table_DOA[21:12] ^
	     hash_units_1_g_table_DOA[21:12] ^
	     hash_units_2_g_table_DOA[21:12] ^
	     hash_units_3_g_table_DOA[21:12] ;
  assign re_value__h109723 =
	     hash_units_0_g_table_DOA[85:22] ^
	     hash_units_1_g_table_DOA[85:22] ^
	     hash_units_2_g_table_DOA[85:22] ^
	     hash_units_3_g_table_DOA[85:22] ;
  assign repair_gslots_1_02_BITS_1_TO_0_03_ULT_repair_g_ETC___d306 =
	     repair_gslots_1[1:0] < repair_gslots_0[1:0] ;
  assign repair_gslots_2_00_BITS_1_TO_0_01_ULT_IF_repai_ETC___d308 =
	     repair_gslots_2[1:0] < _theResult_____3_fst_degree__h39415 ;
  assign repair_gslots_3_98_BITS_1_TO_0_99_ULT_IF_repai_ETC___d310 =
	     repair_gslots_3[1:0] < _theResult_____3_fst_degree__h39436 ;
  assign tmp_gslot_maddr__h106778 =
	     (victim_g_index == 2'd3) ?
	       _theResult_____2_fst_maddr__h106814 :
	       _theResult_____2_fst_maddr__h106782 ;
  assign tmp_gslot_maddr__h40175 =
	     (repair_g_index == 2'd3) ?
	       _theResult_____2_fst_maddr__h40211 :
	       _theResult_____2_fst_maddr__h40179 ;
  assign x__h108376 = mslot_counter + 10'd1 ;
  assign x_degree__h83255 = evictee_gslots_0[1:0] - 2'd1 ;
  assign x_degree__h83554 = evictee_gslots_1[1:0] - 2'd1 ;
  assign x_degree__h83853 = evictee_gslots_2[1:0] - 2'd1 ;
  assign x_degree__h84152 = evictee_gslots_3[1:0] - 2'd1 ;
  assign x_wget__h2141 =
	     WILL_FIRE_RL_lookup_gtables ?
	       re_value__h109723 :
	       m_table_DOA[63:0] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        hash_units_0_gslot_counter <= `BSV_ASSIGNMENT_DELAY 11'd0;
	hash_units_0_init <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hash_units_0_is_miss <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hash_units_1_gslot_counter <= `BSV_ASSIGNMENT_DELAY 11'd0;
	hash_units_1_init <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hash_units_1_is_miss <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hash_units_2_gslot_counter <= `BSV_ASSIGNMENT_DELAY 11'd0;
	hash_units_2_init <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hash_units_2_is_miss <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hash_units_3_gslot_counter <= `BSV_ASSIGNMENT_DELAY 11'd0;
	hash_units_3_init <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hash_units_3_is_miss <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inited <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ldvn_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ldvn_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ldvn_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	ldvn_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ldvn_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
	miss_service <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mslot_counter <= `BSV_ASSIGNMENT_DELAY 10'd0;
	mslot_replacement_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mslot_replacement_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mslot_replacement_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mslot_replacement_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mslot_replacement_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
	stage <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (hash_units_0_gslot_counter_EN)
	  hash_units_0_gslot_counter <= `BSV_ASSIGNMENT_DELAY
	      hash_units_0_gslot_counter_D_IN;
	if (hash_units_0_init_EN)
	  hash_units_0_init <= `BSV_ASSIGNMENT_DELAY hash_units_0_init_D_IN;
	if (hash_units_0_is_miss_EN)
	  hash_units_0_is_miss <= `BSV_ASSIGNMENT_DELAY
	      hash_units_0_is_miss_D_IN;
	if (hash_units_1_gslot_counter_EN)
	  hash_units_1_gslot_counter <= `BSV_ASSIGNMENT_DELAY
	      hash_units_1_gslot_counter_D_IN;
	if (hash_units_1_init_EN)
	  hash_units_1_init <= `BSV_ASSIGNMENT_DELAY hash_units_1_init_D_IN;
	if (hash_units_1_is_miss_EN)
	  hash_units_1_is_miss <= `BSV_ASSIGNMENT_DELAY
	      hash_units_1_is_miss_D_IN;
	if (hash_units_2_gslot_counter_EN)
	  hash_units_2_gslot_counter <= `BSV_ASSIGNMENT_DELAY
	      hash_units_2_gslot_counter_D_IN;
	if (hash_units_2_init_EN)
	  hash_units_2_init <= `BSV_ASSIGNMENT_DELAY hash_units_2_init_D_IN;
	if (hash_units_2_is_miss_EN)
	  hash_units_2_is_miss <= `BSV_ASSIGNMENT_DELAY
	      hash_units_2_is_miss_D_IN;
	if (hash_units_3_gslot_counter_EN)
	  hash_units_3_gslot_counter <= `BSV_ASSIGNMENT_DELAY
	      hash_units_3_gslot_counter_D_IN;
	if (hash_units_3_init_EN)
	  hash_units_3_init <= `BSV_ASSIGNMENT_DELAY hash_units_3_init_D_IN;
	if (hash_units_3_is_miss_EN)
	  hash_units_3_is_miss <= `BSV_ASSIGNMENT_DELAY
	      hash_units_3_is_miss_D_IN;
	if (inited_EN) inited <= `BSV_ASSIGNMENT_DELAY inited_D_IN;
	if (ldvn_start_reg_EN)
	  ldvn_start_reg <= `BSV_ASSIGNMENT_DELAY ldvn_start_reg_D_IN;
	if (ldvn_start_reg_1_EN)
	  ldvn_start_reg_1 <= `BSV_ASSIGNMENT_DELAY ldvn_start_reg_1_D_IN;
	if (ldvn_state_can_overlap_EN)
	  ldvn_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      ldvn_state_can_overlap_D_IN;
	if (ldvn_state_fired_EN)
	  ldvn_state_fired <= `BSV_ASSIGNMENT_DELAY ldvn_state_fired_D_IN;
	if (ldvn_state_mkFSMstate_EN)
	  ldvn_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      ldvn_state_mkFSMstate_D_IN;
	if (miss_service_EN)
	  miss_service <= `BSV_ASSIGNMENT_DELAY miss_service_D_IN;
	if (mslot_counter_EN)
	  mslot_counter <= `BSV_ASSIGNMENT_DELAY mslot_counter_D_IN;
	if (mslot_replacement_start_reg_EN)
	  mslot_replacement_start_reg <= `BSV_ASSIGNMENT_DELAY
	      mslot_replacement_start_reg_D_IN;
	if (mslot_replacement_start_reg_1_EN)
	  mslot_replacement_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      mslot_replacement_start_reg_1_D_IN;
	if (mslot_replacement_state_can_overlap_EN)
	  mslot_replacement_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      mslot_replacement_state_can_overlap_D_IN;
	if (mslot_replacement_state_fired_EN)
	  mslot_replacement_state_fired <= `BSV_ASSIGNMENT_DELAY
	      mslot_replacement_state_fired_D_IN;
	if (mslot_replacement_state_mkFSMstate_EN)
	  mslot_replacement_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      mslot_replacement_state_mkFSMstate_D_IN;
	if (stage_EN) stage <= `BSV_ASSIGNMENT_DELAY stage_D_IN;
      end
    if (evictee_gslots_0_EN)
      evictee_gslots_0 <= `BSV_ASSIGNMENT_DELAY evictee_gslots_0_D_IN;
    if (evictee_gslots_1_EN)
      evictee_gslots_1 <= `BSV_ASSIGNMENT_DELAY evictee_gslots_1_D_IN;
    if (evictee_gslots_2_EN)
      evictee_gslots_2 <= `BSV_ASSIGNMENT_DELAY evictee_gslots_2_D_IN;
    if (evictee_gslots_3_EN)
      evictee_gslots_3 <= `BSV_ASSIGNMENT_DELAY evictee_gslots_3_D_IN;
    if (evictee_hvals_0_EN)
      evictee_hvals_0 <= `BSV_ASSIGNMENT_DELAY evictee_hvals_0_D_IN;
    if (evictee_hvals_1_EN)
      evictee_hvals_1 <= `BSV_ASSIGNMENT_DELAY evictee_hvals_1_D_IN;
    if (evictee_hvals_2_EN)
      evictee_hvals_2 <= `BSV_ASSIGNMENT_DELAY evictee_hvals_2_D_IN;
    if (evictee_hvals_3_EN)
      evictee_hvals_3 <= `BSV_ASSIGNMENT_DELAY evictee_hvals_3_D_IN;
    if (evictee_mslot_EN)
      evictee_mslot <= `BSV_ASSIGNMENT_DELAY evictee_mslot_D_IN;
    if (mslot_to_repair_EN)
      mslot_to_repair <= `BSV_ASSIGNMENT_DELAY mslot_to_repair_D_IN;
    if (new_gslots_0_EN)
      new_gslots_0 <= `BSV_ASSIGNMENT_DELAY new_gslots_0_D_IN;
    if (new_gslots_1_EN)
      new_gslots_1 <= `BSV_ASSIGNMENT_DELAY new_gslots_1_D_IN;
    if (new_gslots_2_EN)
      new_gslots_2 <= `BSV_ASSIGNMENT_DELAY new_gslots_2_D_IN;
    if (new_gslots_3_EN)
      new_gslots_3 <= `BSV_ASSIGNMENT_DELAY new_gslots_3_D_IN;
    if (new_hvals_0_EN) new_hvals_0 <= `BSV_ASSIGNMENT_DELAY new_hvals_0_D_IN;
    if (new_hvals_1_EN) new_hvals_1 <= `BSV_ASSIGNMENT_DELAY new_hvals_1_D_IN;
    if (new_hvals_2_EN) new_hvals_2 <= `BSV_ASSIGNMENT_DELAY new_hvals_2_D_IN;
    if (new_hvals_3_EN) new_hvals_3 <= `BSV_ASSIGNMENT_DELAY new_hvals_3_D_IN;
    if (new_mslot_EN) new_mslot <= `BSV_ASSIGNMENT_DELAY new_mslot_D_IN;
    if (repair_g_index_EN)
      repair_g_index <= `BSV_ASSIGNMENT_DELAY repair_g_index_D_IN;
    if (repair_gslot_EN)
      repair_gslot <= `BSV_ASSIGNMENT_DELAY repair_gslot_D_IN;
    if (repair_gslots_0_EN)
      repair_gslots_0 <= `BSV_ASSIGNMENT_DELAY repair_gslots_0_D_IN;
    if (repair_gslots_1_EN)
      repair_gslots_1 <= `BSV_ASSIGNMENT_DELAY repair_gslots_1_D_IN;
    if (repair_gslots_2_EN)
      repair_gslots_2 <= `BSV_ASSIGNMENT_DELAY repair_gslots_2_D_IN;
    if (repair_gslots_3_EN)
      repair_gslots_3 <= `BSV_ASSIGNMENT_DELAY repair_gslots_3_D_IN;
    if (repair_hvals_0_EN)
      repair_hvals_0 <= `BSV_ASSIGNMENT_DELAY repair_hvals_0_D_IN;
    if (repair_hvals_1_EN)
      repair_hvals_1 <= `BSV_ASSIGNMENT_DELAY repair_hvals_1_D_IN;
    if (repair_hvals_2_EN)
      repair_hvals_2 <= `BSV_ASSIGNMENT_DELAY repair_hvals_2_D_IN;
    if (repair_hvals_3_EN)
      repair_hvals_3 <= `BSV_ASSIGNMENT_DELAY repair_hvals_3_D_IN;
    if (repair_mslot_EN)
      repair_mslot <= `BSV_ASSIGNMENT_DELAY repair_mslot_D_IN;
    if (victim_g_index_EN)
      victim_g_index <= `BSV_ASSIGNMENT_DELAY victim_g_index_D_IN;
    if (victim_gslot_EN)
      victim_gslot <= `BSV_ASSIGNMENT_DELAY victim_gslot_D_IN;
    if (victim_mslot_EN)
      victim_mslot <= `BSV_ASSIGNMENT_DELAY victim_mslot_D_IN;
    if (victim_mslot_addr_EN)
      victim_mslot_addr <= `BSV_ASSIGNMENT_DELAY victim_mslot_addr_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    evictee_gslots_0 = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    evictee_gslots_1 = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    evictee_gslots_2 = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    evictee_gslots_3 = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    evictee_hvals_0 = 11'h2AA;
    evictee_hvals_1 = 11'h2AA;
    evictee_hvals_2 = 11'h2AA;
    evictee_hvals_3 = 11'h2AA;
    evictee_mslot = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    hash_units_0_gslot_counter = 11'h2AA;
    hash_units_0_init = 1'h0;
    hash_units_0_is_miss = 1'h0;
    hash_units_1_gslot_counter = 11'h2AA;
    hash_units_1_init = 1'h0;
    hash_units_1_is_miss = 1'h0;
    hash_units_2_gslot_counter = 11'h2AA;
    hash_units_2_init = 1'h0;
    hash_units_2_is_miss = 1'h0;
    hash_units_3_gslot_counter = 11'h2AA;
    hash_units_3_init = 1'h0;
    hash_units_3_is_miss = 1'h0;
    inited = 1'h0;
    ldvn_start_reg = 1'h0;
    ldvn_start_reg_1 = 1'h0;
    ldvn_state_can_overlap = 1'h0;
    ldvn_state_fired = 1'h0;
    ldvn_state_mkFSMstate = 4'hA;
    miss_service = 1'h0;
    mslot_counter = 10'h2AA;
    mslot_replacement_start_reg = 1'h0;
    mslot_replacement_start_reg_1 = 1'h0;
    mslot_replacement_state_can_overlap = 1'h0;
    mslot_replacement_state_fired = 1'h0;
    mslot_replacement_state_mkFSMstate = 4'hA;
    mslot_to_repair = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    new_gslots_0 = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    new_gslots_1 = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    new_gslots_2 = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    new_gslots_3 = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    new_hvals_0 = 11'h2AA;
    new_hvals_1 = 11'h2AA;
    new_hvals_2 = 11'h2AA;
    new_hvals_3 = 11'h2AA;
    new_mslot = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    repair_g_index = 2'h2;
    repair_gslot = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    repair_gslots_0 = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    repair_gslots_1 = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    repair_gslots_2 = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    repair_gslots_3 = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    repair_hvals_0 = 11'h2AA;
    repair_hvals_1 = 11'h2AA;
    repair_hvals_2 = 11'h2AA;
    repair_hvals_3 = 11'h2AA;
    repair_mslot = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage = 2'h2;
    victim_g_index = 2'h2;
    victim_gslot = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    victim_mslot = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    victim_mslot_addr = 10'h2AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lookup_gtables)
	begin
	  v__h110011 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lookup_gtables)
	$display("[%0d]: mslot addr: %d rec_value %h",
		 v__h110011,
		 re_maddr__h109722,
		 re_value__h109723);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lookup_mtable)
	begin
	  v__h110190 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lookup_mtable)
	$display("[%0d]: mslot.key: %d, mslot.value: %d",
		 v__h110190,
		 m_table_DOA[127:64],
		 m_table_DOA[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (!inited && mslot_counter == 10'd1023 && hash_units_0_init)
	begin
	  v__h109448 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (!inited && mslot_counter == 10'd1023 && hash_units_0_init)
	$display("(%0d) match table inited", v__h109448);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ldvn_action_l22c9 &&
	  (WILL_FIRE_RL_ldvn_action_l30c9 || ldvn_state_mkFSMstate == 4'd2 ||
	   ldvn_state_mkFSMstate == 4'd3 ||
	   ldvn_state_mkFSMstate == 4'd4 ||
	   WILL_FIRE_RL_ldvn_action_l99c9 ||
	   ldvn_state_mkFSMstate == 4'd6))
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 22, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ldvn_action_l22c9] and\n  [RL_ldvn_action_l30c9, RL_ldvn_action_l41c9, RL_ldvn_action_l52c9,\n  RL_ldvn_action_l60c9, RL_ldvn_action_l99c9, RL_ldvn_action_l107c9] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ldvn_action_l30c9 &&
	  (ldvn_state_mkFSMstate == 4'd2 || ldvn_state_mkFSMstate == 4'd3 ||
	   ldvn_state_mkFSMstate == 4'd4 ||
	   WILL_FIRE_RL_ldvn_action_l99c9 ||
	   ldvn_state_mkFSMstate == 4'd6))
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 30, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ldvn_action_l30c9] and\n  [RL_ldvn_action_l41c9, RL_ldvn_action_l52c9, RL_ldvn_action_l60c9,\n  RL_ldvn_action_l99c9, RL_ldvn_action_l107c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (ldvn_state_mkFSMstate == 4'd2 &&
	  (ldvn_state_mkFSMstate == 4'd3 || ldvn_state_mkFSMstate == 4'd4 ||
	   WILL_FIRE_RL_ldvn_action_l99c9 ||
	   ldvn_state_mkFSMstate == 4'd6))
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 41, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ldvn_action_l41c9] and\n  [RL_ldvn_action_l52c9, RL_ldvn_action_l60c9, RL_ldvn_action_l99c9,\n  RL_ldvn_action_l107c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (ldvn_state_mkFSMstate == 4'd3 &&
	  (ldvn_state_mkFSMstate == 4'd4 || WILL_FIRE_RL_ldvn_action_l99c9 ||
	   ldvn_state_mkFSMstate == 4'd6))
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 52, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ldvn_action_l52c9] and\n  [RL_ldvn_action_l60c9, RL_ldvn_action_l99c9, RL_ldvn_action_l107c9] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (ldvn_state_mkFSMstate == 4'd4 &&
	  (WILL_FIRE_RL_ldvn_action_l99c9 || ldvn_state_mkFSMstate == 4'd6))
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 60, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ldvn_action_l60c9] and\n  [RL_ldvn_action_l99c9, RL_ldvn_action_l107c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ldvn_action_l99c9 && ldvn_state_mkFSMstate == 4'd6)
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 99, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ldvn_action_l99c9] and\n  [RL_ldvn_action_l107c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mslot_replacement_action_l258c9 &&
	  victim_gslot[1:0] == 2'd0)
	begin
	  v__h108784 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mslot_replacement_action_l258c9 &&
	  victim_gslot[1:0] == 2'd0)
	$display("[%d]: new (key,value) inserted at slot %d\n",
		 v__h108784,
		 mslot_counter - 10'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mslot_replacement_action_l128c9 &&
	  (mslot_replacement_state_mkFSMstate == 4'd2 ||
	   mslot_replacement_state_mkFSMstate == 4'd3 ||
	   WILL_FIRE_RL_mslot_replacement_action_l164c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l172c9 ||
	   mslot_replacement_state_mkFSMstate == 4'd6 ||
	   mslot_replacement_state_mkFSMstate == 4'd7 ||
	   mslot_replacement_state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_mslot_replacement_action_l243c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l251c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l258c9))
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 128, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mslot_replacement_action_l128c9] and\n  [RL_mslot_replacement_action_l138c9, RL_mslot_replacement_action_l149c9,\n  RL_mslot_replacement_action_l164c9, RL_mslot_replacement_action_l172c9,\n  RL_mslot_replacement_action_l182c9, RL_mslot_replacement_action_l192c9,\n  RL_mslot_replacement_action_l201c9, RL_mslot_replacement_action_l243c9,\n  RL_mslot_replacement_action_l251c9, RL_mslot_replacement_action_l258c9] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mslot_replacement_state_mkFSMstate == 4'd2 &&
	  (mslot_replacement_state_mkFSMstate == 4'd3 ||
	   WILL_FIRE_RL_mslot_replacement_action_l164c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l172c9 ||
	   mslot_replacement_state_mkFSMstate == 4'd6 ||
	   mslot_replacement_state_mkFSMstate == 4'd7 ||
	   mslot_replacement_state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_mslot_replacement_action_l243c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l251c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l258c9))
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 138, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mslot_replacement_action_l138c9] and\n  [RL_mslot_replacement_action_l149c9, RL_mslot_replacement_action_l164c9,\n  RL_mslot_replacement_action_l172c9, RL_mslot_replacement_action_l182c9,\n  RL_mslot_replacement_action_l192c9, RL_mslot_replacement_action_l201c9,\n  RL_mslot_replacement_action_l243c9, RL_mslot_replacement_action_l251c9,\n  RL_mslot_replacement_action_l258c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mslot_replacement_state_mkFSMstate == 4'd3 &&
	  (WILL_FIRE_RL_mslot_replacement_action_l164c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l172c9 ||
	   mslot_replacement_state_mkFSMstate == 4'd6 ||
	   mslot_replacement_state_mkFSMstate == 4'd7 ||
	   mslot_replacement_state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_mslot_replacement_action_l243c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l251c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l258c9))
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 149, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mslot_replacement_action_l149c9] and\n  [RL_mslot_replacement_action_l164c9, RL_mslot_replacement_action_l172c9,\n  RL_mslot_replacement_action_l182c9, RL_mslot_replacement_action_l192c9,\n  RL_mslot_replacement_action_l201c9, RL_mslot_replacement_action_l243c9,\n  RL_mslot_replacement_action_l251c9, RL_mslot_replacement_action_l258c9] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mslot_replacement_action_l164c9 &&
	  (WILL_FIRE_RL_mslot_replacement_action_l172c9 ||
	   mslot_replacement_state_mkFSMstate == 4'd6 ||
	   mslot_replacement_state_mkFSMstate == 4'd7 ||
	   mslot_replacement_state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_mslot_replacement_action_l243c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l251c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l258c9))
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 164, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mslot_replacement_action_l164c9] and\n  [RL_mslot_replacement_action_l172c9, RL_mslot_replacement_action_l182c9,\n  RL_mslot_replacement_action_l192c9, RL_mslot_replacement_action_l201c9,\n  RL_mslot_replacement_action_l243c9, RL_mslot_replacement_action_l251c9,\n  RL_mslot_replacement_action_l258c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mslot_replacement_state_mkFSMstate == 4'd6 &&
	  (mslot_replacement_state_mkFSMstate == 4'd7 ||
	   mslot_replacement_state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_mslot_replacement_action_l243c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l251c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l258c9))
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 182, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mslot_replacement_action_l182c9] and\n  [RL_mslot_replacement_action_l192c9, RL_mslot_replacement_action_l201c9,\n  RL_mslot_replacement_action_l243c9, RL_mslot_replacement_action_l251c9,\n  RL_mslot_replacement_action_l258c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mslot_replacement_action_l172c9 &&
	  (mslot_replacement_state_mkFSMstate == 4'd6 ||
	   mslot_replacement_state_mkFSMstate == 4'd7 ||
	   mslot_replacement_state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_mslot_replacement_action_l243c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l251c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l258c9))
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 172, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mslot_replacement_action_l172c9] and\n  [RL_mslot_replacement_action_l182c9, RL_mslot_replacement_action_l192c9,\n  RL_mslot_replacement_action_l201c9, RL_mslot_replacement_action_l243c9,\n  RL_mslot_replacement_action_l251c9, RL_mslot_replacement_action_l258c9] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mslot_replacement_state_mkFSMstate == 4'd7 &&
	  (mslot_replacement_state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_mslot_replacement_action_l243c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l251c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l258c9))
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 192, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mslot_replacement_action_l192c9] and\n  [RL_mslot_replacement_action_l201c9, RL_mslot_replacement_action_l243c9,\n  RL_mslot_replacement_action_l251c9, RL_mslot_replacement_action_l258c9] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mslot_replacement_state_mkFSMstate == 4'd8 &&
	  (WILL_FIRE_RL_mslot_replacement_action_l243c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l251c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l258c9))
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 201, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mslot_replacement_action_l201c9] and\n  [RL_mslot_replacement_action_l243c9, RL_mslot_replacement_action_l251c9,\n  RL_mslot_replacement_action_l258c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mslot_replacement_action_l251c9 &&
	  WILL_FIRE_RL_mslot_replacement_action_l258c9)
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 251, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mslot_replacement_action_l251c9] and\n  [RL_mslot_replacement_action_l258c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mslot_replacement_action_l243c9 &&
	  (WILL_FIRE_RL_mslot_replacement_action_l251c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l258c9))
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 243, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mslot_replacement_action_l243c9] and\n  [RL_mslot_replacement_action_l251c9, RL_mslot_replacement_action_l258c9] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mslot_replacement_action_l121c9 &&
	  (WILL_FIRE_RL_mslot_replacement_action_l128c9 ||
	   mslot_replacement_state_mkFSMstate == 4'd2 ||
	   mslot_replacement_state_mkFSMstate == 4'd3 ||
	   WILL_FIRE_RL_mslot_replacement_action_l164c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l172c9 ||
	   mslot_replacement_state_mkFSMstate == 4'd6 ||
	   mslot_replacement_state_mkFSMstate == 4'd7 ||
	   mslot_replacement_state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_mslot_replacement_action_l243c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l251c9 ||
	   WILL_FIRE_RL_mslot_replacement_action_l258c9))
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/DMHC/MissServiceFSM.bsv\", line 121, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mslot_replacement_action_l121c9] and\n  [RL_mslot_replacement_action_l128c9, RL_mslot_replacement_action_l138c9,\n  RL_mslot_replacement_action_l149c9, RL_mslot_replacement_action_l164c9,\n  RL_mslot_replacement_action_l172c9, RL_mslot_replacement_action_l182c9,\n  RL_mslot_replacement_action_l192c9, RL_mslot_replacement_action_l201c9,\n  RL_mslot_replacement_action_l243c9, RL_mslot_replacement_action_l251c9,\n  RL_mslot_replacement_action_l258c9] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkDMHC_64

