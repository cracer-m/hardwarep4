//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Wed May 31 23:03:49 CST 2017
//
// BVI format method schedule info:
// schedule writeServer_enq  CF ( writeClient_writeReq_get,
// 			       writeClient_writeData_get,
// 			       writeClient_writeDone_put,
// 			       mallocClient_mallocReq_get,
// 			       mallocClient_mallocDone_put,
// 			       next_first,
// 			       next_deq,
// 			       next_notEmpty,
// 			       read_debug_info,
// 			       read_parser_perf_info,
// 			       set_verbosity );
// schedule writeServer_enq  C ( writeServer_enq );
//
// schedule writeServer_notFull  CF ( writeServer_notFull,
// 				   writeClient_writeReq_get,
// 				   writeClient_writeData_get,
// 				   writeClient_writeDone_put,
// 				   mallocClient_mallocReq_get,
// 				   mallocClient_mallocDone_put,
// 				   next_first,
// 				   next_deq,
// 				   next_notEmpty,
// 				   read_debug_info,
// 				   read_parser_perf_info,
// 				   set_verbosity );
// schedule writeServer_notFull  SB ( writeServer_enq );
//
// schedule writeClient_writeReq_get  CF ( writeServer_enq,
// 					writeServer_notFull,
// 					writeClient_writeData_get,
// 					writeClient_writeDone_put,
// 					mallocClient_mallocReq_get,
// 					mallocClient_mallocDone_put,
// 					next_first,
// 					next_deq,
// 					next_notEmpty,
// 					read_debug_info,
// 					read_parser_perf_info,
// 					set_verbosity );
// schedule writeClient_writeReq_get  C ( writeClient_writeReq_get );
//
// schedule writeClient_writeData_get  CF ( writeServer_enq,
// 					 writeServer_notFull,
// 					 writeClient_writeReq_get,
// 					 writeClient_writeDone_put,
// 					 mallocClient_mallocReq_get,
// 					 mallocClient_mallocDone_put,
// 					 next_first,
// 					 next_deq,
// 					 next_notEmpty,
// 					 read_debug_info,
// 					 read_parser_perf_info,
// 					 set_verbosity );
// schedule writeClient_writeData_get  C ( writeClient_writeData_get );
//
// schedule writeClient_writeDone_put  CF ( writeServer_enq,
// 					 writeServer_notFull,
// 					 writeClient_writeReq_get,
// 					 writeClient_writeData_get,
// 					 mallocClient_mallocReq_get,
// 					 mallocClient_mallocDone_put,
// 					 next_first,
// 					 next_deq,
// 					 next_notEmpty,
// 					 read_debug_info,
// 					 read_parser_perf_info,
// 					 set_verbosity );
// schedule writeClient_writeDone_put  C ( writeClient_writeDone_put );
//
// schedule mallocClient_mallocReq_get  CF ( writeServer_enq,
// 					  writeServer_notFull,
// 					  writeClient_writeReq_get,
// 					  writeClient_writeData_get,
// 					  writeClient_writeDone_put,
// 					  mallocClient_mallocDone_put,
// 					  next_first,
// 					  next_deq,
// 					  next_notEmpty,
// 					  read_debug_info,
// 					  read_parser_perf_info,
// 					  set_verbosity );
// schedule mallocClient_mallocReq_get  C ( mallocClient_mallocReq_get );
//
// schedule mallocClient_mallocDone_put  CF ( writeServer_enq,
// 					   writeServer_notFull,
// 					   writeClient_writeReq_get,
// 					   writeClient_writeData_get,
// 					   writeClient_writeDone_put,
// 					   mallocClient_mallocReq_get,
// 					   next_first,
// 					   next_deq,
// 					   next_notEmpty,
// 					   read_debug_info,
// 					   read_parser_perf_info,
// 					   set_verbosity );
// schedule mallocClient_mallocDone_put  C ( mallocClient_mallocDone_put );
//
// schedule next_first  CF ( writeServer_enq,
// 			  writeServer_notFull,
// 			  writeClient_writeReq_get,
// 			  writeClient_writeData_get,
// 			  writeClient_writeDone_put,
// 			  mallocClient_mallocReq_get,
// 			  mallocClient_mallocDone_put,
// 			  next_first,
// 			  next_notEmpty,
// 			  read_debug_info,
// 			  read_parser_perf_info,
// 			  set_verbosity );
// schedule next_first  SB ( next_deq );
//
// schedule next_deq  CF ( writeServer_enq,
// 			writeServer_notFull,
// 			writeClient_writeReq_get,
// 			writeClient_writeData_get,
// 			writeClient_writeDone_put,
// 			mallocClient_mallocReq_get,
// 			mallocClient_mallocDone_put,
// 			read_debug_info,
// 			read_parser_perf_info,
// 			set_verbosity );
// schedule next_deq  C ( next_deq );
//
// schedule next_notEmpty  CF ( writeServer_enq,
// 			     writeServer_notFull,
// 			     writeClient_writeReq_get,
// 			     writeClient_writeData_get,
// 			     writeClient_writeDone_put,
// 			     mallocClient_mallocReq_get,
// 			     mallocClient_mallocDone_put,
// 			     next_first,
// 			     next_notEmpty,
// 			     read_debug_info,
// 			     read_parser_perf_info,
// 			     set_verbosity );
// schedule next_notEmpty  SB ( next_deq );
//
// schedule read_debug_info  CF ( writeServer_enq,
// 			       writeServer_notFull,
// 			       writeClient_writeReq_get,
// 			       writeClient_writeData_get,
// 			       writeClient_writeDone_put,
// 			       mallocClient_mallocReq_get,
// 			       mallocClient_mallocDone_put,
// 			       next_first,
// 			       next_deq,
// 			       next_notEmpty,
// 			       read_debug_info,
// 			       read_parser_perf_info,
// 			       set_verbosity );
//
// schedule read_parser_perf_info  CF ( writeServer_enq,
// 				     writeServer_notFull,
// 				     writeClient_writeReq_get,
// 				     writeClient_writeData_get,
// 				     writeClient_writeDone_put,
// 				     mallocClient_mallocReq_get,
// 				     mallocClient_mallocDone_put,
// 				     next_first,
// 				     next_deq,
// 				     next_notEmpty,
// 				     read_debug_info,
// 				     read_parser_perf_info,
// 				     set_verbosity );
//
// schedule set_verbosity  CF ( writeServer_enq,
// 			     writeServer_notFull,
// 			     writeClient_writeReq_get,
// 			     writeClient_writeData_get,
// 			     writeClient_writeDone_put,
// 			     mallocClient_mallocReq_get,
// 			     mallocClient_mallocDone_put,
// 			     next_first,
// 			     next_deq,
// 			     next_notEmpty,
// 			     read_debug_info,
// 			     read_parser_perf_info );
// schedule set_verbosity  SBR ( set_verbosity );
//
//
// Ports:
// Name                         I/O  size props
// RDY_writeServer_enq            O     1 reg
// writeServer_notFull            O     1 reg
// RDY_writeServer_notFull        O     1 const
// writeClient_writeReq_get       O   122 reg
// RDY_writeClient_writeReq_get   O     1 reg
// writeClient_writeData_get      O   135 reg
// RDY_writeClient_writeData_get  O     1 reg
// RDY_writeClient_writeDone_put  O     1 reg
// mallocClient_mallocReq_get     O    16 reg
// RDY_mallocClient_mallocReq_get  O     1 reg
// RDY_mallocClient_mallocDone_put  O     1 reg
// next_first                     O   782 reg
// RDY_next_first                 O     1 reg
// RDY_next_deq                   O     1 reg
// next_notEmpty                  O     1 reg
// RDY_next_notEmpty              O     1 const
// read_debug_info                O   448 reg
// RDY_read_debug_info            O     1 const
// read_parser_perf_info          O    64 const
// RDY_read_parser_perf_info      O     1 const
// RDY_set_verbosity              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// writeServer_enq_v              I   178 reg
// writeClient_writeDone_put      I     6 reg
// mallocClient_mallocDone_put    I     6 reg
// set_verbosity_verbosity        I    32 reg
// EN_writeServer_enq             I     1
// EN_writeClient_writeDone_put   I     1
// EN_mallocClient_mallocDone_put  I     1
// EN_next_deq                    I     1
// EN_set_verbosity               I     1
// EN_writeClient_writeReq_get    I     1
// EN_writeClient_writeData_get   I     1
// EN_mallocClient_mallocReq_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkHostChannel(CLK,
		     RST_N,

		     writeServer_enq_v,
		     EN_writeServer_enq,
		     RDY_writeServer_enq,

		     writeServer_notFull,
		     RDY_writeServer_notFull,

		     EN_writeClient_writeReq_get,
		     writeClient_writeReq_get,
		     RDY_writeClient_writeReq_get,

		     EN_writeClient_writeData_get,
		     writeClient_writeData_get,
		     RDY_writeClient_writeData_get,

		     writeClient_writeDone_put,
		     EN_writeClient_writeDone_put,
		     RDY_writeClient_writeDone_put,

		     EN_mallocClient_mallocReq_get,
		     mallocClient_mallocReq_get,
		     RDY_mallocClient_mallocReq_get,

		     mallocClient_mallocDone_put,
		     EN_mallocClient_mallocDone_put,
		     RDY_mallocClient_mallocDone_put,

		     next_first,
		     RDY_next_first,

		     EN_next_deq,
		     RDY_next_deq,

		     next_notEmpty,
		     RDY_next_notEmpty,

		     read_debug_info,
		     RDY_read_debug_info,

		     read_parser_perf_info,
		     RDY_read_parser_perf_info,

		     set_verbosity_verbosity,
		     EN_set_verbosity,
		     RDY_set_verbosity);
  input  CLK;
  input  RST_N;

  // action method writeServer_enq
  input  [177 : 0] writeServer_enq_v;
  input  EN_writeServer_enq;
  output RDY_writeServer_enq;

  // value method writeServer_notFull
  output writeServer_notFull;
  output RDY_writeServer_notFull;

  // actionvalue method writeClient_writeReq_get
  input  EN_writeClient_writeReq_get;
  output [121 : 0] writeClient_writeReq_get;
  output RDY_writeClient_writeReq_get;

  // actionvalue method writeClient_writeData_get
  input  EN_writeClient_writeData_get;
  output [134 : 0] writeClient_writeData_get;
  output RDY_writeClient_writeData_get;

  // action method writeClient_writeDone_put
  input  [5 : 0] writeClient_writeDone_put;
  input  EN_writeClient_writeDone_put;
  output RDY_writeClient_writeDone_put;

  // actionvalue method mallocClient_mallocReq_get
  input  EN_mallocClient_mallocReq_get;
  output [15 : 0] mallocClient_mallocReq_get;
  output RDY_mallocClient_mallocReq_get;

  // action method mallocClient_mallocDone_put
  input  [5 : 0] mallocClient_mallocDone_put;
  input  EN_mallocClient_mallocDone_put;
  output RDY_mallocClient_mallocDone_put;

  // value method next_first
  output [781 : 0] next_first;
  output RDY_next_first;

  // action method next_deq
  input  EN_next_deq;
  output RDY_next_deq;

  // value method next_notEmpty
  output next_notEmpty;
  output RDY_next_notEmpty;

  // value method read_debug_info
  output [447 : 0] read_debug_info;
  output RDY_read_debug_info;

  // value method read_parser_perf_info
  output [63 : 0] read_parser_perf_info;
  output RDY_read_parser_perf_info;

  // action method set_verbosity
  input  [31 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // signals for module outputs
  wire [781 : 0] next_first;
  wire [447 : 0] read_debug_info;
  wire [134 : 0] writeClient_writeData_get;
  wire [121 : 0] writeClient_writeReq_get;
  wire [63 : 0] read_parser_perf_info;
  wire [15 : 0] mallocClient_mallocReq_get;
  wire RDY_mallocClient_mallocDone_put,
       RDY_mallocClient_mallocReq_get,
       RDY_next_deq,
       RDY_next_first,
       RDY_next_notEmpty,
       RDY_read_debug_info,
       RDY_read_parser_perf_info,
       RDY_set_verbosity,
       RDY_writeClient_writeData_get,
       RDY_writeClient_writeDone_put,
       RDY_writeClient_writeReq_get,
       RDY_writeServer_enq,
       RDY_writeServer_notFull,
       next_notEmpty,
       writeServer_notFull;

  // inlined wires
  wire [178 : 0] tap_readDataFifoOut_rv_port0__write_1,
		 tap_readDataFifoOut_rv_port1__read,
		 tap_readDataFifoOut_rv_port2__read,
		 tap_readDataFifoTap_rv_port1__read,
		 tap_readDataFifoTap_rv_port2__read;
  wire [16 : 0] tap_readLenFifo_rv_port0__write_1,
		tap_readLenFifo_rv_port1__read,
		tap_readLenFifo_rv_port2__read,
		tap_readReqFifo_rv_port0__write_1,
		tap_readReqFifo_rv_port1__read,
		tap_readReqFifo_rv_port2__read;
  wire tap_readDataFifoOut_rv_EN_port0__write,
       tap_readDataFifoOut_rv_EN_port1__write,
       tap_readDataFifoTap_rv_EN_port0__write,
       tap_readDataFifoTap_rv_EN_port1__write,
       tap_readLenFifo_rv_EN_port0__write,
       tap_readLenFifo_rv_EN_port1__write,
       tap_readReqFifo_rv_EN_port0__write,
       tap_readReqFifo_rv_EN_port1__write;

  // register ipv6Count
  reg [63 : 0] ipv6Count;
  wire [63 : 0] ipv6Count_D_IN;
  wire ipv6Count_EN;

  // register paxosCount
  reg [63 : 0] paxosCount;
  wire [63 : 0] paxosCount_D_IN;
  wire paxosCount_EN;

  // register ringToMem_cycle
  reg [31 : 0] ringToMem_cycle;
  wire [31 : 0] ringToMem_cycle_D_IN;
  wire ringToMem_cycle_EN;

  // register ringToMem_mallocd
  reg ringToMem_mallocd;
  wire ringToMem_mallocd_D_IN, ringToMem_mallocd_EN;

  // register ringToMem_readStarted
  reg ringToMem_readStarted;
  wire ringToMem_readStarted_D_IN, ringToMem_readStarted_EN;

  // register tap_readDataFifoOut_rv
  reg [178 : 0] tap_readDataFifoOut_rv;
  wire [178 : 0] tap_readDataFifoOut_rv_D_IN;
  wire tap_readDataFifoOut_rv_EN;

  // register tap_readDataFifoTap_rv
  reg [178 : 0] tap_readDataFifoTap_rv;
  wire [178 : 0] tap_readDataFifoTap_rv_D_IN;
  wire tap_readDataFifoTap_rv_EN;

  // register tap_readLenFifo_rv
  reg [16 : 0] tap_readLenFifo_rv;
  wire [16 : 0] tap_readLenFifo_rv_D_IN;
  wire tap_readLenFifo_rv_EN;

  // register tap_readReqFifo_rv
  reg [16 : 0] tap_readReqFifo_rv;
  wire [16 : 0] tap_readReqFifo_rv_D_IN;
  wire tap_readReqFifo_rv_EN;

  // register udpCount
  reg [63 : 0] udpCount;
  wire [63 : 0] udpCount_D_IN;
  wire udpCount_EN;

  // ports of submodule outReqFifo
  wire [781 : 0] outReqFifo_D_IN, outReqFifo_D_OUT;
  wire outReqFifo_CLR,
       outReqFifo_DEQ,
       outReqFifo_EMPTY_N,
       outReqFifo_ENQ,
       outReqFifo_FULL_N;

  // ports of submodule parser
  wire [760 : 0] parser_meta_get;
  wire [177 : 0] parser_frameIn_put;
  wire [63 : 0] parser_read_perf_info;
  wire [31 : 0] parser_set_verbosity_verbosity;
  wire parser_EN_frameIn_put,
       parser_EN_meta_get,
       parser_EN_set_verbosity,
       parser_RDY_frameIn_put,
       parser_RDY_meta_get;

  // ports of submodule pktBuff
  wire [255 : 0] pktBuff_dbg;
  wire [177 : 0] pktBuff_readServer_readData_get, pktBuff_writeServer_enq_v;
  wire [31 : 0] pktBuff_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_readServer_readLen_get,
		pktBuff_readServer_readReq_put;
  wire pktBuff_EN_readServer_readData_get,
       pktBuff_EN_readServer_readLen_get,
       pktBuff_EN_readServer_readReq_put,
       pktBuff_EN_set_verbosity,
       pktBuff_EN_writeServer_enq,
       pktBuff_RDY_readServer_readData_get,
       pktBuff_RDY_readServer_readLen_get,
       pktBuff_RDY_readServer_readReq_put,
       pktBuff_RDY_writeServer_enq,
       pktBuff_writeServer_notFull;

  // ports of submodule ringToMem_eventPktCommittedFifo
  wire [20 : 0] ringToMem_eventPktCommittedFifo_D_IN,
		ringToMem_eventPktCommittedFifo_D_OUT;
  wire ringToMem_eventPktCommittedFifo_CLR,
       ringToMem_eventPktCommittedFifo_DEQ,
       ringToMem_eventPktCommittedFifo_EMPTY_N,
       ringToMem_eventPktCommittedFifo_ENQ,
       ringToMem_eventPktCommittedFifo_FULL_N;

  // ports of submodule ringToMem_eventPktReceivedFifo
  wire [20 : 0] ringToMem_eventPktReceivedFifo_D_IN,
		ringToMem_eventPktReceivedFifo_D_OUT;
  wire ringToMem_eventPktReceivedFifo_CLR,
       ringToMem_eventPktReceivedFifo_DEQ,
       ringToMem_eventPktReceivedFifo_EMPTY_N,
       ringToMem_eventPktReceivedFifo_ENQ,
       ringToMem_eventPktReceivedFifo_FULL_N;

  // ports of submodule ringToMem_mallocDoneFifo
  wire [5 : 0] ringToMem_mallocDoneFifo_D_IN, ringToMem_mallocDoneFifo_D_OUT;
  wire ringToMem_mallocDoneFifo_CLR,
       ringToMem_mallocDoneFifo_DEQ,
       ringToMem_mallocDoneFifo_EMPTY_N,
       ringToMem_mallocDoneFifo_ENQ,
       ringToMem_mallocDoneFifo_FULL_N;

  // ports of submodule ringToMem_mallocReqFifo
  wire [15 : 0] ringToMem_mallocReqFifo_D_IN, ringToMem_mallocReqFifo_D_OUT;
  wire ringToMem_mallocReqFifo_CLR,
       ringToMem_mallocReqFifo_DEQ,
       ringToMem_mallocReqFifo_EMPTY_N,
       ringToMem_mallocReqFifo_ENQ,
       ringToMem_mallocReqFifo_FULL_N;

  // ports of submodule ringToMem_pktLenFifo
  wire [15 : 0] ringToMem_pktLenFifo_D_IN, ringToMem_pktLenFifo_D_OUT;
  wire ringToMem_pktLenFifo_CLR,
       ringToMem_pktLenFifo_DEQ,
       ringToMem_pktLenFifo_EMPTY_N,
       ringToMem_pktLenFifo_ENQ,
       ringToMem_pktLenFifo_FULL_N;

  // ports of submodule ringToMem_readDataFifo
  wire [177 : 0] ringToMem_readDataFifo_D_IN, ringToMem_readDataFifo_D_OUT;
  wire ringToMem_readDataFifo_CLR,
       ringToMem_readDataFifo_DEQ,
       ringToMem_readDataFifo_EMPTY_N,
       ringToMem_readDataFifo_ENQ,
       ringToMem_readDataFifo_FULL_N;

  // ports of submodule ringToMem_readLenFifo
  wire [15 : 0] ringToMem_readLenFifo_D_IN, ringToMem_readLenFifo_D_OUT;
  wire ringToMem_readLenFifo_CLR,
       ringToMem_readLenFifo_DEQ,
       ringToMem_readLenFifo_EMPTY_N,
       ringToMem_readLenFifo_ENQ,
       ringToMem_readLenFifo_FULL_N;

  // ports of submodule ringToMem_readReqFifo
  wire [15 : 0] ringToMem_readReqFifo_D_IN, ringToMem_readReqFifo_D_OUT;
  wire ringToMem_readReqFifo_CLR,
       ringToMem_readReqFifo_DEQ,
       ringToMem_readReqFifo_EMPTY_N,
       ringToMem_readReqFifo_ENQ,
       ringToMem_readReqFifo_FULL_N;

  // ports of submodule ringToMem_writeDataFifo
  wire [134 : 0] ringToMem_writeDataFifo_D_IN, ringToMem_writeDataFifo_D_OUT;
  wire ringToMem_writeDataFifo_CLR,
       ringToMem_writeDataFifo_DEQ,
       ringToMem_writeDataFifo_EMPTY_N,
       ringToMem_writeDataFifo_ENQ,
       ringToMem_writeDataFifo_FULL_N;

  // ports of submodule ringToMem_writeDoneFifo
  wire [5 : 0] ringToMem_writeDoneFifo_D_IN;
  wire ringToMem_writeDoneFifo_CLR,
       ringToMem_writeDoneFifo_DEQ,
       ringToMem_writeDoneFifo_EMPTY_N,
       ringToMem_writeDoneFifo_ENQ,
       ringToMem_writeDoneFifo_FULL_N;

  // ports of submodule ringToMem_writeReqFifo
  wire [121 : 0] ringToMem_writeReqFifo_D_IN, ringToMem_writeReqFifo_D_OUT;
  wire ringToMem_writeReqFifo_CLR,
       ringToMem_writeReqFifo_DEQ,
       ringToMem_writeReqFifo_EMPTY_N,
       ringToMem_writeReqFifo_ENQ,
       ringToMem_writeReqFifo_FULL_N;

  // ports of submodule tap_readDataFifoIn
  wire [177 : 0] tap_readDataFifoIn_D_IN, tap_readDataFifoIn_D_OUT;
  wire tap_readDataFifoIn_CLR,
       tap_readDataFifoIn_DEQ,
       tap_readDataFifoIn_EMPTY_N,
       tap_readDataFifoIn_ENQ,
       tap_readDataFifoIn_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_ringToMem_allocMemory,
       WILL_FIRE_RL_ringToMem_packetReadInProgress;

  // inputs to muxes for submodule ports
  wire MUX_ringToMem_mallocd_write_1__SEL_1,
       MUX_ringToMem_mallocd_write_1__SEL_2,
       MUX_ringToMem_readStarted_write_1__SEL_2;

  // remaining internal signals
  wire [31 : 0] x_sglId__h3251;
  wire [15 : 0] ringToMem_pktLenFifoD_OUT_PLUS_15__q1, x__h3325, x__h3344;
  wire [11 : 0] x_burstLen__h3253;

  // action method writeServer_enq
  assign RDY_writeServer_enq = pktBuff_RDY_writeServer_enq ;

  // value method writeServer_notFull
  assign writeServer_notFull = pktBuff_writeServer_notFull ;
  assign RDY_writeServer_notFull = 1'd1 ;

  // actionvalue method writeClient_writeReq_get
  assign writeClient_writeReq_get = ringToMem_writeReqFifo_D_OUT ;
  assign RDY_writeClient_writeReq_get = ringToMem_writeReqFifo_EMPTY_N ;

  // actionvalue method writeClient_writeData_get
  assign writeClient_writeData_get = ringToMem_writeDataFifo_D_OUT ;
  assign RDY_writeClient_writeData_get = ringToMem_writeDataFifo_EMPTY_N ;

  // action method writeClient_writeDone_put
  assign RDY_writeClient_writeDone_put = ringToMem_writeDoneFifo_FULL_N ;

  // actionvalue method mallocClient_mallocReq_get
  assign mallocClient_mallocReq_get = ringToMem_mallocReqFifo_D_OUT ;
  assign RDY_mallocClient_mallocReq_get = ringToMem_mallocReqFifo_EMPTY_N ;

  // action method mallocClient_mallocDone_put
  assign RDY_mallocClient_mallocDone_put = ringToMem_mallocDoneFifo_FULL_N ;

  // value method next_first
  assign next_first = outReqFifo_D_OUT ;
  assign RDY_next_first = outReqFifo_EMPTY_N ;

  // action method next_deq
  assign RDY_next_deq = outReqFifo_EMPTY_N ;

  // value method next_notEmpty
  assign next_notEmpty = outReqFifo_EMPTY_N ;
  assign RDY_next_notEmpty = 1'd1 ;

  // value method read_debug_info
  assign read_debug_info = { paxosCount, ipv6Count, udpCount, pktBuff_dbg } ;
  assign RDY_read_debug_info = 1'd1 ;

  // value method read_parser_perf_info
  assign read_parser_perf_info = parser_read_perf_info ;
  assign RDY_read_parser_perf_info = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;

  // submodule outReqFifo
  FIFO2 #(.width(32'd782), .guarded(32'd1)) outReqFifo(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(outReqFifo_D_IN),
						       .ENQ(outReqFifo_ENQ),
						       .DEQ(outReqFifo_DEQ),
						       .CLR(outReqFifo_CLR),
						       .D_OUT(outReqFifo_D_OUT),
						       .FULL_N(outReqFifo_FULL_N),
						       .EMPTY_N(outReqFifo_EMPTY_N));

  // submodule parser
  mkParser parser(.CLK(CLK),
		  .RST_N(RST_N),
		  .frameIn_put(parser_frameIn_put),
		  .set_verbosity_verbosity(parser_set_verbosity_verbosity),
		  .EN_frameIn_put(parser_EN_frameIn_put),
		  .EN_meta_get(parser_EN_meta_get),
		  .EN_set_verbosity(parser_EN_set_verbosity),
		  .RDY_frameIn_put(parser_RDY_frameIn_put),
		  .meta_get(parser_meta_get),
		  .RDY_meta_get(parser_RDY_meta_get),
		  .RDY_set_verbosity(),
		  .read_perf_info(parser_read_perf_info),
		  .RDY_read_perf_info());

  // submodule pktBuff
  mkPacketBuffer_16 #(.param1("hostchan")) pktBuff(.CLK(CLK),
						   .RST_N(RST_N),
						   .readServer_readReq_put(pktBuff_readServer_readReq_put),
						   .set_verbosity_verbosity(pktBuff_set_verbosity_verbosity),
						   .writeServer_enq_v(pktBuff_writeServer_enq_v),
						   .EN_writeServer_enq(pktBuff_EN_writeServer_enq),
						   .EN_readServer_readData_get(pktBuff_EN_readServer_readData_get),
						   .EN_readServer_readLen_get(pktBuff_EN_readServer_readLen_get),
						   .EN_readServer_readReq_put(pktBuff_EN_readServer_readReq_put),
						   .EN_set_verbosity(pktBuff_EN_set_verbosity),
						   .RDY_writeServer_enq(pktBuff_RDY_writeServer_enq),
						   .writeServer_notFull(pktBuff_writeServer_notFull),
						   .RDY_writeServer_notFull(),
						   .readServer_readData_get(pktBuff_readServer_readData_get),
						   .RDY_readServer_readData_get(pktBuff_RDY_readServer_readData_get),
						   .readServer_readLen_get(pktBuff_readServer_readLen_get),
						   .RDY_readServer_readLen_get(pktBuff_RDY_readServer_readLen_get),
						   .RDY_readServer_readReq_put(pktBuff_RDY_readServer_readReq_put),
						   .dbg(pktBuff_dbg),
						   .RDY_dbg(),
						   .RDY_set_verbosity());

  // submodule ringToMem_eventPktCommittedFifo
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) ringToMem_eventPktCommittedFifo(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ringToMem_eventPktCommittedFifo_D_IN),
							   .ENQ(ringToMem_eventPktCommittedFifo_ENQ),
							   .DEQ(ringToMem_eventPktCommittedFifo_DEQ),
							   .CLR(ringToMem_eventPktCommittedFifo_CLR),
							   .D_OUT(ringToMem_eventPktCommittedFifo_D_OUT),
							   .FULL_N(ringToMem_eventPktCommittedFifo_FULL_N),
							   .EMPTY_N(ringToMem_eventPktCommittedFifo_EMPTY_N));

  // submodule ringToMem_eventPktReceivedFifo
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) ringToMem_eventPktReceivedFifo(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ringToMem_eventPktReceivedFifo_D_IN),
							  .ENQ(ringToMem_eventPktReceivedFifo_ENQ),
							  .DEQ(ringToMem_eventPktReceivedFifo_DEQ),
							  .CLR(ringToMem_eventPktReceivedFifo_CLR),
							  .D_OUT(ringToMem_eventPktReceivedFifo_D_OUT),
							  .FULL_N(ringToMem_eventPktReceivedFifo_FULL_N),
							  .EMPTY_N(ringToMem_eventPktReceivedFifo_EMPTY_N));

  // submodule ringToMem_mallocDoneFifo
  FIFO2 #(.width(32'd6),
	  .guarded(32'd1)) ringToMem_mallocDoneFifo(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ringToMem_mallocDoneFifo_D_IN),
						    .ENQ(ringToMem_mallocDoneFifo_ENQ),
						    .DEQ(ringToMem_mallocDoneFifo_DEQ),
						    .CLR(ringToMem_mallocDoneFifo_CLR),
						    .D_OUT(ringToMem_mallocDoneFifo_D_OUT),
						    .FULL_N(ringToMem_mallocDoneFifo_FULL_N),
						    .EMPTY_N(ringToMem_mallocDoneFifo_EMPTY_N));

  // submodule ringToMem_mallocReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMem_mallocReqFifo(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ringToMem_mallocReqFifo_D_IN),
						   .ENQ(ringToMem_mallocReqFifo_ENQ),
						   .DEQ(ringToMem_mallocReqFifo_DEQ),
						   .CLR(ringToMem_mallocReqFifo_CLR),
						   .D_OUT(ringToMem_mallocReqFifo_D_OUT),
						   .FULL_N(ringToMem_mallocReqFifo_FULL_N),
						   .EMPTY_N(ringToMem_mallocReqFifo_EMPTY_N));

  // submodule ringToMem_pktLenFifo
  FIFO2 #(.width(32'd16), .guarded(32'd1)) ringToMem_pktLenFifo(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ringToMem_pktLenFifo_D_IN),
								.ENQ(ringToMem_pktLenFifo_ENQ),
								.DEQ(ringToMem_pktLenFifo_DEQ),
								.CLR(ringToMem_pktLenFifo_CLR),
								.D_OUT(ringToMem_pktLenFifo_D_OUT),
								.FULL_N(ringToMem_pktLenFifo_FULL_N),
								.EMPTY_N(ringToMem_pktLenFifo_EMPTY_N));

  // submodule ringToMem_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) ringToMem_readDataFifo(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(ringToMem_readDataFifo_D_IN),
						  .ENQ(ringToMem_readDataFifo_ENQ),
						  .DEQ(ringToMem_readDataFifo_DEQ),
						  .CLR(ringToMem_readDataFifo_CLR),
						  .D_OUT(ringToMem_readDataFifo_D_OUT),
						  .FULL_N(ringToMem_readDataFifo_FULL_N),
						  .EMPTY_N(ringToMem_readDataFifo_EMPTY_N));

  // submodule ringToMem_readLenFifo
  FIFO2 #(.width(32'd16), .guarded(32'd1)) ringToMem_readLenFifo(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(ringToMem_readLenFifo_D_IN),
								 .ENQ(ringToMem_readLenFifo_ENQ),
								 .DEQ(ringToMem_readLenFifo_DEQ),
								 .CLR(ringToMem_readLenFifo_CLR),
								 .D_OUT(ringToMem_readLenFifo_D_OUT),
								 .FULL_N(ringToMem_readLenFifo_FULL_N),
								 .EMPTY_N(ringToMem_readLenFifo_EMPTY_N));

  // submodule ringToMem_readReqFifo
  FIFO2 #(.width(32'd16), .guarded(32'd1)) ringToMem_readReqFifo(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(ringToMem_readReqFifo_D_IN),
								 .ENQ(ringToMem_readReqFifo_ENQ),
								 .DEQ(ringToMem_readReqFifo_DEQ),
								 .CLR(ringToMem_readReqFifo_CLR),
								 .D_OUT(ringToMem_readReqFifo_D_OUT),
								 .FULL_N(ringToMem_readReqFifo_FULL_N),
								 .EMPTY_N(ringToMem_readReqFifo_EMPTY_N));

  // submodule ringToMem_writeDataFifo
  SizedFIFO #(.p1width(32'd135),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) ringToMem_writeDataFifo(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ringToMem_writeDataFifo_D_IN),
						       .ENQ(ringToMem_writeDataFifo_ENQ),
						       .DEQ(ringToMem_writeDataFifo_DEQ),
						       .CLR(ringToMem_writeDataFifo_CLR),
						       .D_OUT(ringToMem_writeDataFifo_D_OUT),
						       .FULL_N(ringToMem_writeDataFifo_FULL_N),
						       .EMPTY_N(ringToMem_writeDataFifo_EMPTY_N));

  // submodule ringToMem_writeDoneFifo
  SizedFIFO #(.p1width(32'd6),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) ringToMem_writeDoneFifo(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ringToMem_writeDoneFifo_D_IN),
						       .ENQ(ringToMem_writeDoneFifo_ENQ),
						       .DEQ(ringToMem_writeDoneFifo_DEQ),
						       .CLR(ringToMem_writeDoneFifo_CLR),
						       .D_OUT(),
						       .FULL_N(ringToMem_writeDoneFifo_FULL_N),
						       .EMPTY_N(ringToMem_writeDoneFifo_EMPTY_N));

  // submodule ringToMem_writeReqFifo
  SizedFIFO #(.p1width(32'd122),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) ringToMem_writeReqFifo(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(ringToMem_writeReqFifo_D_IN),
						      .ENQ(ringToMem_writeReqFifo_ENQ),
						      .DEQ(ringToMem_writeReqFifo_DEQ),
						      .CLR(ringToMem_writeReqFifo_CLR),
						      .D_OUT(ringToMem_writeReqFifo_D_OUT),
						      .FULL_N(ringToMem_writeReqFifo_FULL_N),
						      .EMPTY_N(ringToMem_writeReqFifo_EMPTY_N));

  // submodule tap_readDataFifoIn
  FIFO2 #(.width(32'd178), .guarded(32'd1)) tap_readDataFifoIn(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(tap_readDataFifoIn_D_IN),
							       .ENQ(tap_readDataFifoIn_ENQ),
							       .DEQ(tap_readDataFifoIn_DEQ),
							       .CLR(tap_readDataFifoIn_CLR),
							       .D_OUT(tap_readDataFifoIn_D_OUT),
							       .FULL_N(tap_readDataFifoIn_FULL_N),
							       .EMPTY_N(tap_readDataFifoIn_EMPTY_N));

  // rule RL_ringToMem_packetReadInProgress
  assign WILL_FIRE_RL_ringToMem_packetReadInProgress =
	     ringToMem_readDataFifo_EMPTY_N &&
	     ringToMem_writeDataFifo_FULL_N &&
	     ringToMem_readStarted &&
	     ringToMem_mallocd ;

  // rule RL_ringToMem_allocMemory
  assign WILL_FIRE_RL_ringToMem_allocMemory =
	     ringToMem_pktLenFifo_EMPTY_N &&
	     ringToMem_mallocDoneFifo_EMPTY_N &&
	     (!ringToMem_mallocDoneFifo_D_OUT[5] ||
	      ringToMem_readReqFifo_FULL_N && ringToMem_writeReqFifo_FULL_N &&
	      ringToMem_eventPktReceivedFifo_FULL_N) ;

  // inputs to muxes for submodule ports
  assign MUX_ringToMem_mallocd_write_1__SEL_1 =
	     WILL_FIRE_RL_ringToMem_allocMemory &&
	     ringToMem_mallocDoneFifo_D_OUT[5] ;
  assign MUX_ringToMem_mallocd_write_1__SEL_2 =
	     WILL_FIRE_RL_ringToMem_packetReadInProgress &&
	     ringToMem_readDataFifo_D_OUT[0] ;
  assign MUX_ringToMem_readStarted_write_1__SEL_2 =
	     ringToMem_readLenFifo_EMPTY_N &&
	     ringToMem_mallocReqFifo_FULL_N &&
	     ringToMem_pktLenFifo_FULL_N &&
	     !ringToMem_readStarted ;

  // inlined wires
  assign tap_readDataFifoOut_rv_EN_port0__write =
	     tap_readDataFifoIn_EMPTY_N && !tap_readDataFifoOut_rv[178] &&
	     !tap_readDataFifoTap_rv[178] ;
  assign tap_readDataFifoOut_rv_port0__write_1 =
	     { 1'd1, tap_readDataFifoIn_D_OUT } ;
  assign tap_readDataFifoOut_rv_port1__read =
	     tap_readDataFifoOut_rv_EN_port0__write ?
	       tap_readDataFifoOut_rv_port0__write_1 :
	       tap_readDataFifoOut_rv ;
  assign tap_readDataFifoOut_rv_EN_port1__write =
	     tap_readDataFifoOut_rv_port1__read[178] &&
	     ringToMem_readDataFifo_FULL_N ;
  assign tap_readDataFifoOut_rv_port2__read =
	     tap_readDataFifoOut_rv_EN_port1__write ?
	       179'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       tap_readDataFifoOut_rv_port1__read ;
  assign tap_readDataFifoTap_rv_EN_port0__write =
	     tap_readDataFifoIn_EMPTY_N && !tap_readDataFifoOut_rv[178] &&
	     !tap_readDataFifoTap_rv[178] ;
  assign tap_readDataFifoTap_rv_port1__read =
	     tap_readDataFifoTap_rv_EN_port0__write ?
	       tap_readDataFifoOut_rv_port0__write_1 :
	       tap_readDataFifoTap_rv ;
  assign tap_readDataFifoTap_rv_EN_port1__write =
	     tap_readDataFifoTap_rv_port1__read[178] &&
	     parser_RDY_frameIn_put ;
  assign tap_readDataFifoTap_rv_port2__read =
	     tap_readDataFifoTap_rv_EN_port1__write ?
	       179'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       tap_readDataFifoTap_rv_port1__read ;
  assign tap_readLenFifo_rv_EN_port0__write =
	     pktBuff_RDY_readServer_readLen_get && !tap_readLenFifo_rv[16] ;
  assign tap_readLenFifo_rv_port0__write_1 =
	     { 1'd1, pktBuff_readServer_readLen_get } ;
  assign tap_readLenFifo_rv_port1__read =
	     tap_readLenFifo_rv_EN_port0__write ?
	       tap_readLenFifo_rv_port0__write_1 :
	       tap_readLenFifo_rv ;
  assign tap_readLenFifo_rv_EN_port1__write =
	     tap_readLenFifo_rv_port1__read[16] &&
	     ringToMem_readLenFifo_FULL_N ;
  assign tap_readLenFifo_rv_port2__read =
	     tap_readLenFifo_rv_EN_port1__write ?
	       17'd43690 :
	       tap_readLenFifo_rv_port1__read ;
  assign tap_readReqFifo_rv_EN_port0__write =
	     ringToMem_readReqFifo_EMPTY_N && !tap_readReqFifo_rv[16] ;
  assign tap_readReqFifo_rv_port0__write_1 =
	     { 1'd1, ringToMem_readReqFifo_D_OUT } ;
  assign tap_readReqFifo_rv_port1__read =
	     tap_readReqFifo_rv_EN_port0__write ?
	       tap_readReqFifo_rv_port0__write_1 :
	       tap_readReqFifo_rv ;
  assign tap_readReqFifo_rv_EN_port1__write =
	     tap_readReqFifo_rv_port1__read[16] &&
	     pktBuff_RDY_readServer_readReq_put ;
  assign tap_readReqFifo_rv_port2__read =
	     tap_readReqFifo_rv_EN_port1__write ?
	       17'd43690 :
	       tap_readReqFifo_rv_port1__read ;

  // register ipv6Count
  assign ipv6Count_D_IN = 64'h0 ;
  assign ipv6Count_EN = 1'b0 ;

  // register paxosCount
  assign paxosCount_D_IN = 64'h0 ;
  assign paxosCount_EN = 1'b0 ;

  // register ringToMem_cycle
  assign ringToMem_cycle_D_IN = 32'h0 ;
  assign ringToMem_cycle_EN = 1'b0 ;

  // register ringToMem_mallocd
  assign ringToMem_mallocd_D_IN = MUX_ringToMem_mallocd_write_1__SEL_1 ;
  assign ringToMem_mallocd_EN =
	     WILL_FIRE_RL_ringToMem_allocMemory &&
	     ringToMem_mallocDoneFifo_D_OUT[5] ||
	     WILL_FIRE_RL_ringToMem_packetReadInProgress &&
	     ringToMem_readDataFifo_D_OUT[0] ;

  // register ringToMem_readStarted
  assign ringToMem_readStarted_D_IN = !MUX_ringToMem_mallocd_write_1__SEL_2 ;
  assign ringToMem_readStarted_EN =
	     WILL_FIRE_RL_ringToMem_packetReadInProgress &&
	     ringToMem_readDataFifo_D_OUT[0] ||
	     ringToMem_readLenFifo_EMPTY_N &&
	     ringToMem_mallocReqFifo_FULL_N &&
	     ringToMem_pktLenFifo_FULL_N &&
	     !ringToMem_readStarted ;

  // register tap_readDataFifoOut_rv
  assign tap_readDataFifoOut_rv_D_IN = tap_readDataFifoOut_rv_port2__read ;
  assign tap_readDataFifoOut_rv_EN = 1'b1 ;

  // register tap_readDataFifoTap_rv
  assign tap_readDataFifoTap_rv_D_IN = tap_readDataFifoTap_rv_port2__read ;
  assign tap_readDataFifoTap_rv_EN = 1'b1 ;

  // register tap_readLenFifo_rv
  assign tap_readLenFifo_rv_D_IN = tap_readLenFifo_rv_port2__read ;
  assign tap_readLenFifo_rv_EN = 1'b1 ;

  // register tap_readReqFifo_rv
  assign tap_readReqFifo_rv_D_IN = tap_readReqFifo_rv_port2__read ;
  assign tap_readReqFifo_rv_EN = 1'b1 ;

  // register udpCount
  assign udpCount_D_IN = 64'h0 ;
  assign udpCount_EN = 1'b0 ;

  // submodule outReqFifo
  assign outReqFifo_D_IN =
	     { ringToMem_eventPktCommittedFifo_D_OUT, parser_meta_get } ;
  assign outReqFifo_ENQ =
	     parser_RDY_meta_get && ringToMem_eventPktCommittedFifo_EMPTY_N &&
	     outReqFifo_FULL_N ;
  assign outReqFifo_DEQ = EN_next_deq ;
  assign outReqFifo_CLR = 1'b0 ;

  // submodule parser
  assign parser_frameIn_put = tap_readDataFifoTap_rv_port1__read[177:0] ;
  assign parser_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign parser_EN_frameIn_put =
	     tap_readDataFifoTap_rv_port1__read[178] &&
	     parser_RDY_frameIn_put ;
  assign parser_EN_meta_get =
	     parser_RDY_meta_get && ringToMem_eventPktCommittedFifo_EMPTY_N &&
	     outReqFifo_FULL_N ;
  assign parser_EN_set_verbosity = EN_set_verbosity ;

  // submodule pktBuff
  assign pktBuff_readServer_readReq_put =
	     tap_readReqFifo_rv_port1__read[15:0] ;
  assign pktBuff_set_verbosity_verbosity = 32'h0 ;
  assign pktBuff_writeServer_enq_v = writeServer_enq_v ;
  assign pktBuff_EN_writeServer_enq = EN_writeServer_enq ;
  assign pktBuff_EN_readServer_readData_get =
	     pktBuff_RDY_readServer_readData_get &&
	     tap_readDataFifoIn_FULL_N ;
  assign pktBuff_EN_readServer_readLen_get =
	     pktBuff_RDY_readServer_readLen_get && !tap_readLenFifo_rv[16] ;
  assign pktBuff_EN_readServer_readReq_put =
	     tap_readReqFifo_rv_port1__read[16] &&
	     pktBuff_RDY_readServer_readReq_put ;
  assign pktBuff_EN_set_verbosity = 1'b0 ;

  // submodule ringToMem_eventPktCommittedFifo
  assign ringToMem_eventPktCommittedFifo_D_IN =
	     ringToMem_eventPktReceivedFifo_D_OUT ;
  assign ringToMem_eventPktCommittedFifo_ENQ =
	     ringToMem_writeDoneFifo_EMPTY_N &&
	     ringToMem_eventPktReceivedFifo_EMPTY_N &&
	     ringToMem_eventPktCommittedFifo_FULL_N ;
  assign ringToMem_eventPktCommittedFifo_DEQ =
	     parser_RDY_meta_get && ringToMem_eventPktCommittedFifo_EMPTY_N &&
	     outReqFifo_FULL_N ;
  assign ringToMem_eventPktCommittedFifo_CLR = 1'b0 ;

  // submodule ringToMem_eventPktReceivedFifo
  assign ringToMem_eventPktReceivedFifo_D_IN =
	     { ringToMem_mallocDoneFifo_D_OUT[4:0],
	       ringToMem_pktLenFifo_D_OUT } ;
  assign ringToMem_eventPktReceivedFifo_ENQ =
	     MUX_ringToMem_mallocd_write_1__SEL_1 ;
  assign ringToMem_eventPktReceivedFifo_DEQ =
	     ringToMem_writeDoneFifo_EMPTY_N &&
	     ringToMem_eventPktReceivedFifo_EMPTY_N &&
	     ringToMem_eventPktCommittedFifo_FULL_N ;
  assign ringToMem_eventPktReceivedFifo_CLR = 1'b0 ;

  // submodule ringToMem_mallocDoneFifo
  assign ringToMem_mallocDoneFifo_D_IN = mallocClient_mallocDone_put ;
  assign ringToMem_mallocDoneFifo_ENQ = EN_mallocClient_mallocDone_put ;
  assign ringToMem_mallocDoneFifo_DEQ = WILL_FIRE_RL_ringToMem_allocMemory ;
  assign ringToMem_mallocDoneFifo_CLR = 1'b0 ;

  // submodule ringToMem_mallocReqFifo
  assign ringToMem_mallocReqFifo_D_IN = ringToMem_readLenFifo_D_OUT ;
  assign ringToMem_mallocReqFifo_ENQ =
	     MUX_ringToMem_readStarted_write_1__SEL_2 ;
  assign ringToMem_mallocReqFifo_DEQ = EN_mallocClient_mallocReq_get ;
  assign ringToMem_mallocReqFifo_CLR = 1'b0 ;

  // submodule ringToMem_pktLenFifo
  assign ringToMem_pktLenFifo_D_IN = ringToMem_readLenFifo_D_OUT ;
  assign ringToMem_pktLenFifo_ENQ = MUX_ringToMem_readStarted_write_1__SEL_2 ;
  assign ringToMem_pktLenFifo_DEQ = WILL_FIRE_RL_ringToMem_allocMemory ;
  assign ringToMem_pktLenFifo_CLR = 1'b0 ;

  // submodule ringToMem_readDataFifo
  assign ringToMem_readDataFifo_D_IN =
	     tap_readDataFifoOut_rv_port1__read[177:0] ;
  assign ringToMem_readDataFifo_ENQ =
	     tap_readDataFifoOut_rv_port1__read[178] &&
	     ringToMem_readDataFifo_FULL_N ;
  assign ringToMem_readDataFifo_DEQ =
	     WILL_FIRE_RL_ringToMem_packetReadInProgress ;
  assign ringToMem_readDataFifo_CLR = 1'b0 ;

  // submodule ringToMem_readLenFifo
  assign ringToMem_readLenFifo_D_IN = tap_readLenFifo_rv_port1__read[15:0] ;
  assign ringToMem_readLenFifo_ENQ =
	     tap_readLenFifo_rv_port1__read[16] &&
	     ringToMem_readLenFifo_FULL_N ;
  assign ringToMem_readLenFifo_DEQ =
	     MUX_ringToMem_readStarted_write_1__SEL_2 ;
  assign ringToMem_readLenFifo_CLR = 1'b0 ;

  // submodule ringToMem_readReqFifo
  assign ringToMem_readReqFifo_D_IN = ringToMem_pktLenFifo_D_OUT ;
  assign ringToMem_readReqFifo_ENQ = MUX_ringToMem_mallocd_write_1__SEL_1 ;
  assign ringToMem_readReqFifo_DEQ =
	     ringToMem_readReqFifo_EMPTY_N && !tap_readReqFifo_rv[16] ;
  assign ringToMem_readReqFifo_CLR = 1'b0 ;

  // submodule ringToMem_writeDataFifo
  assign ringToMem_writeDataFifo_D_IN =
	     { ringToMem_readDataFifo_D_OUT[145:18],
	       6'd0,
	       ringToMem_readDataFifo_D_OUT[0] } ;
  assign ringToMem_writeDataFifo_ENQ =
	     WILL_FIRE_RL_ringToMem_packetReadInProgress ;
  assign ringToMem_writeDataFifo_DEQ = EN_writeClient_writeData_get ;
  assign ringToMem_writeDataFifo_CLR = 1'b0 ;

  // submodule ringToMem_writeDoneFifo
  assign ringToMem_writeDoneFifo_D_IN = writeClient_writeDone_put ;
  assign ringToMem_writeDoneFifo_ENQ = EN_writeClient_writeDone_put ;
  assign ringToMem_writeDoneFifo_DEQ =
	     ringToMem_writeDoneFifo_EMPTY_N &&
	     ringToMem_eventPktReceivedFifo_EMPTY_N &&
	     ringToMem_eventPktCommittedFifo_FULL_N ;
  assign ringToMem_writeDoneFifo_CLR = 1'b0 ;

  // submodule ringToMem_writeReqFifo
  assign ringToMem_writeReqFifo_D_IN =
	     { x_sglId__h3251,
	       40'd0,
	       x_burstLen__h3253,
	       22'd65535,
	       x__h3325 } ;
  assign ringToMem_writeReqFifo_ENQ = MUX_ringToMem_mallocd_write_1__SEL_1 ;
  assign ringToMem_writeReqFifo_DEQ = EN_writeClient_writeReq_get ;
  assign ringToMem_writeReqFifo_CLR = 1'b0 ;

  // submodule tap_readDataFifoIn
  assign tap_readDataFifoIn_D_IN = pktBuff_readServer_readData_get ;
  assign tap_readDataFifoIn_ENQ =
	     pktBuff_RDY_readServer_readData_get &&
	     tap_readDataFifoIn_FULL_N ;
  assign tap_readDataFifoIn_DEQ =
	     tap_readDataFifoIn_EMPTY_N && !tap_readDataFifoOut_rv[178] &&
	     !tap_readDataFifoTap_rv[178] ;
  assign tap_readDataFifoIn_CLR = 1'b0 ;

  // remaining internal signals
  assign ringToMem_pktLenFifoD_OUT_PLUS_15__q1 =
	     ringToMem_pktLenFifo_D_OUT + 16'd15 ;
  assign x__h3325 = x__h3344 - 16'd1 ;
  assign x__h3344 = 16'd1 << ringToMem_pktLenFifo_D_OUT[3:0] ;
  assign x_burstLen__h3253 =
	     { ringToMem_pktLenFifoD_OUT_PLUS_15__q1[11:4], 4'd0 } ;
  assign x_sglId__h3251 = { 27'd0, ringToMem_mallocDoneFifo_D_OUT[4:0] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ipv6Count <= `BSV_ASSIGNMENT_DELAY 64'd0;
	paxosCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMem_cycle <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ringToMem_mallocd <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMem_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tap_readDataFifoOut_rv <= `BSV_ASSIGNMENT_DELAY
	    179'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	tap_readDataFifoTap_rv <= `BSV_ASSIGNMENT_DELAY
	    179'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	tap_readLenFifo_rv <= `BSV_ASSIGNMENT_DELAY 17'd43690;
	tap_readReqFifo_rv <= `BSV_ASSIGNMENT_DELAY 17'd43690;
	udpCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (ipv6Count_EN) ipv6Count <= `BSV_ASSIGNMENT_DELAY ipv6Count_D_IN;
	if (paxosCount_EN)
	  paxosCount <= `BSV_ASSIGNMENT_DELAY paxosCount_D_IN;
	if (ringToMem_cycle_EN)
	  ringToMem_cycle <= `BSV_ASSIGNMENT_DELAY ringToMem_cycle_D_IN;
	if (ringToMem_mallocd_EN)
	  ringToMem_mallocd <= `BSV_ASSIGNMENT_DELAY ringToMem_mallocd_D_IN;
	if (ringToMem_readStarted_EN)
	  ringToMem_readStarted <= `BSV_ASSIGNMENT_DELAY
	      ringToMem_readStarted_D_IN;
	if (tap_readDataFifoOut_rv_EN)
	  tap_readDataFifoOut_rv <= `BSV_ASSIGNMENT_DELAY
	      tap_readDataFifoOut_rv_D_IN;
	if (tap_readDataFifoTap_rv_EN)
	  tap_readDataFifoTap_rv <= `BSV_ASSIGNMENT_DELAY
	      tap_readDataFifoTap_rv_D_IN;
	if (tap_readLenFifo_rv_EN)
	  tap_readLenFifo_rv <= `BSV_ASSIGNMENT_DELAY tap_readLenFifo_rv_D_IN;
	if (tap_readReqFifo_rv_EN)
	  tap_readReqFifo_rv <= `BSV_ASSIGNMENT_DELAY tap_readReqFifo_rv_D_IN;
	if (udpCount_EN) udpCount <= `BSV_ASSIGNMENT_DELAY udpCount_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ipv6Count = 64'hAAAAAAAAAAAAAAAA;
    paxosCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMem_cycle = 32'hAAAAAAAA;
    ringToMem_mallocd = 1'h0;
    ringToMem_readStarted = 1'h0;
    tap_readDataFifoOut_rv =
	179'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    tap_readDataFifoTap_rv =
	179'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    tap_readLenFifo_rv = 17'h0AAAA;
    tap_readReqFifo_rv = 17'h0AAAA;
    udpCount = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkHostChannel

