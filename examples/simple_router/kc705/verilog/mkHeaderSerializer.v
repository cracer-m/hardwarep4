//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Wed May 31 23:04:25 CST 2017
//
// BVI format method schedule info:
// schedule metadata_enq  CF ( writeServer_enq,
// 			    writeServer_notFull,
// 			    writeClient_first,
// 			    writeClient_deq,
// 			    writeClient_notEmpty,
// 			    set_verbosity );
// schedule metadata_enq  C ( metadata_enq );
//
// schedule metadata_notFull  CF ( metadata_notFull,
// 				writeServer_enq,
// 				writeServer_notFull,
// 				writeClient_first,
// 				writeClient_deq,
// 				writeClient_notEmpty,
// 				set_verbosity );
// schedule metadata_notFull  SB ( metadata_enq );
//
// schedule writeServer_enq  CF ( metadata_enq,
// 			       metadata_notFull,
// 			       writeClient_first,
// 			       writeClient_deq,
// 			       writeClient_notEmpty,
// 			       set_verbosity );
// schedule writeServer_enq  C ( writeServer_enq );
//
// schedule writeServer_notFull  CF ( metadata_enq,
// 				   metadata_notFull,
// 				   writeServer_notFull,
// 				   writeClient_first,
// 				   writeClient_deq,
// 				   writeClient_notEmpty,
// 				   set_verbosity );
// schedule writeServer_notFull  SB ( writeServer_enq );
//
// schedule writeClient_first  CF ( metadata_enq,
// 				 metadata_notFull,
// 				 writeServer_enq,
// 				 writeServer_notFull,
// 				 writeClient_first,
// 				 writeClient_notEmpty,
// 				 set_verbosity );
// schedule writeClient_first  SB ( writeClient_deq );
//
// schedule writeClient_deq  CF ( metadata_enq,
// 			       metadata_notFull,
// 			       writeServer_enq,
// 			       writeServer_notFull,
// 			       set_verbosity );
// schedule writeClient_deq  C ( writeClient_deq );
//
// schedule writeClient_notEmpty  CF ( metadata_enq,
// 				    metadata_notFull,
// 				    writeServer_enq,
// 				    writeServer_notFull,
// 				    writeClient_first,
// 				    writeClient_notEmpty,
// 				    set_verbosity );
// schedule writeClient_notEmpty  SB ( writeClient_deq );
//
// schedule set_verbosity  CF ( metadata_enq,
// 			     metadata_notFull,
// 			     writeServer_enq,
// 			     writeServer_notFull,
// 			     writeClient_first,
// 			     writeClient_deq,
// 			     writeClient_notEmpty );
// schedule set_verbosity  SBR ( set_verbosity );
//
//
// Ports:
// Name                         I/O  size props
// RDY_metadata_enq               O     1 reg
// metadata_notFull               O     1 reg
// RDY_metadata_notFull           O     1 const
// RDY_writeServer_enq            O     1 reg
// writeServer_notFull            O     1 reg
// RDY_writeServer_notFull        O     1 const
// writeClient_first              O   178 reg
// RDY_writeClient_first          O     1 reg
// RDY_writeClient_deq            O     1 reg
// writeClient_notEmpty           O     1 reg
// RDY_writeClient_notEmpty       O     1 const
// RDY_set_verbosity              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// metadata_enq_v                 I     9 reg
// writeServer_enq_v              I   178 reg
// set_verbosity_verbosity        I    32 reg
// EN_metadata_enq                I     1
// EN_writeServer_enq             I     1
// EN_writeClient_deq             I     1
// EN_set_verbosity               I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkHeaderSerializer(CLK,
			  RST_N,

			  metadata_enq_v,
			  EN_metadata_enq,
			  RDY_metadata_enq,

			  metadata_notFull,
			  RDY_metadata_notFull,

			  writeServer_enq_v,
			  EN_writeServer_enq,
			  RDY_writeServer_enq,

			  writeServer_notFull,
			  RDY_writeServer_notFull,

			  writeClient_first,
			  RDY_writeClient_first,

			  EN_writeClient_deq,
			  RDY_writeClient_deq,

			  writeClient_notEmpty,
			  RDY_writeClient_notEmpty,

			  set_verbosity_verbosity,
			  EN_set_verbosity,
			  RDY_set_verbosity);
  input  CLK;
  input  RST_N;

  // action method metadata_enq
  input  [8 : 0] metadata_enq_v;
  input  EN_metadata_enq;
  output RDY_metadata_enq;

  // value method metadata_notFull
  output metadata_notFull;
  output RDY_metadata_notFull;

  // action method writeServer_enq
  input  [177 : 0] writeServer_enq_v;
  input  EN_writeServer_enq;
  output RDY_writeServer_enq;

  // value method writeServer_notFull
  output writeServer_notFull;
  output RDY_writeServer_notFull;

  // value method writeClient_first
  output [177 : 0] writeClient_first;
  output RDY_writeClient_first;

  // action method writeClient_deq
  input  EN_writeClient_deq;
  output RDY_writeClient_deq;

  // value method writeClient_notEmpty
  output writeClient_notEmpty;
  output RDY_writeClient_notEmpty;

  // action method set_verbosity
  input  [31 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // signals for module outputs
  wire [177 : 0] writeClient_first;
  wire RDY_metadata_enq,
       RDY_metadata_notFull,
       RDY_set_verbosity,
       RDY_writeClient_deq,
       RDY_writeClient_first,
       RDY_writeClient_notEmpty,
       RDY_writeServer_enq,
       RDY_writeServer_notFull,
       metadata_notFull,
       writeClient_notEmpty,
       writeServer_notFull;

  // register cf_verbosity
  reg [31 : 0] cf_verbosity;
  wire [31 : 0] cf_verbosity_D_IN;
  wire cf_verbosity_EN;

  // register data_buffered
  reg [127 : 0] data_buffered;
  wire [127 : 0] data_buffered_D_IN;
  wire data_buffered_EN;

  // register mask_buffered
  reg [15 : 0] mask_buffered;
  wire [15 : 0] mask_buffered_D_IN;
  wire mask_buffered_EN;

  // register n_bits_buffered
  reg [7 : 0] n_bits_buffered;
  wire [7 : 0] n_bits_buffered_D_IN;
  wire n_bits_buffered_EN;

  // register n_bytes_buffered
  reg [4 : 0] n_bytes_buffered;
  wire [4 : 0] n_bytes_buffered_D_IN;
  wire n_bytes_buffered_EN;

  // register sop_buffered
  reg sop_buffered;
  wire sop_buffered_D_IN, sop_buffered_EN;

  // ports of submodule buff_frame_ff
  wire buff_frame_ff_CLR,
       buff_frame_ff_DEQ,
       buff_frame_ff_D_IN,
       buff_frame_ff_EMPTY_N,
       buff_frame_ff_ENQ,
       buff_frame_ff_FULL_N;

  // ports of submodule data_in_ff
  wire [177 : 0] data_in_ff_D_IN, data_in_ff_D_OUT;
  wire data_in_ff_CLR,
       data_in_ff_DEQ,
       data_in_ff_EMPTY_N,
       data_in_ff_ENQ,
       data_in_ff_FULL_N;

  // ports of submodule data_out_ff
  reg [177 : 0] data_out_ff_D_IN;
  wire [177 : 0] data_out_ff_D_OUT;
  wire data_out_ff_CLR,
       data_out_ff_DEQ,
       data_out_ff_EMPTY_N,
       data_out_ff_ENQ,
       data_out_ff_FULL_N;

  // ports of submodule meta_in_ff
  wire [8 : 0] meta_in_ff_D_IN, meta_in_ff_D_OUT;
  wire meta_in_ff_CLR,
       meta_in_ff_DEQ,
       meta_in_ff_EMPTY_N,
       meta_in_ff_ENQ,
       meta_in_ff_FULL_N;

  // ports of submodule send_frame_ff
  wire send_frame_ff_CLR,
       send_frame_ff_DEQ,
       send_frame_ff_D_IN,
       send_frame_ff_EMPTY_N,
       send_frame_ff_ENQ,
       send_frame_ff_FULL_N;

  // ports of submodule send_last1_ff
  wire send_last1_ff_CLR,
       send_last1_ff_DEQ,
       send_last1_ff_D_IN,
       send_last1_ff_EMPTY_N,
       send_last1_ff_ENQ,
       send_last1_ff_FULL_N;

  // ports of submodule send_last2_ff
  wire send_last2_ff_CLR,
       send_last2_ff_DEQ,
       send_last2_ff_D_IN,
       send_last2_ff_EMPTY_N,
       send_last2_ff_ENQ,
       send_last2_ff_FULL_N;

  // ports of submodule stage0_ff
  wire [203 : 0] stage0_ff_D_IN, stage0_ff_D_OUT;
  wire stage0_ff_CLR,
       stage0_ff_DEQ,
       stage0_ff_EMPTY_N,
       stage0_ff_ENQ,
       stage0_ff_FULL_N;

  // ports of submodule stage2_ff
  wire [190 : 0] stage2_ff_D_IN, stage2_ff_D_OUT;
  wire stage2_ff_CLR,
       stage2_ff_DEQ,
       stage2_ff_EMPTY_N,
       stage2_ff_ENQ,
       stage2_ff_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_rl_buffer_partial_frame,
       WILL_FIRE_RL_rl_eop_full_frame,
       WILL_FIRE_RL_rl_eop_partial_frame,
       WILL_FIRE_RL_rl_send_full_frame,
       WILL_FIRE_RL_rl_serialize_stage0,
       WILL_FIRE_RL_rl_serialize_stage1;

  // inputs to muxes for submodule ports
  wire [177 : 0] MUX_data_out_ff_enq_1__VAL_1,
		 MUX_data_out_ff_enq_1__VAL_2,
		 MUX_data_out_ff_enq_1__VAL_3;
  wire [127 : 0] MUX_data_buffered_write_1__VAL_2;
  wire [15 : 0] MUX_mask_buffered_write_1__VAL_2;
  wire MUX_sop_buffered_write_1__SEL_1, MUX_sop_buffered_write_1__VAL_2;

  // remaining internal signals
  reg [63 : 0] v__h2085, v__h2283, v__h2466, v__h2582;
  wire [127 : 0] eth_data__h3782, x__h3808;
  wire [31 : 0] eth_user__h4570;
  wire [15 : 0] mask__h3941, x__h4072;
  wire [7 : 0] n_bits_buffered_0_PLUS_0_CONCAT_data_in_ff_fir_ETC___d62,
	       n_bits_buffered_0_PLUS_0_CONCAT_data_in_ff_fir_ETC___d63,
	       x__h3597;
  wire [4 : 0] _0_CONCAT_data_in_ff_first_BIT_17_PLUS_0_CONCAT_ETC___d53,
	       n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d54,
	       n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d56,
	       value__h3537,
	       x__h1391,
	       x__h1403,
	       x__h1415,
	       x__h1427,
	       x__h1439,
	       x__h1451,
	       x__h1463,
	       x__h1475,
	       x__h1487,
	       x__h1499,
	       x__h1511,
	       x__h1523,
	       x__h1535,
	       x__h1547,
	       x__h1559,
	       y__h1392,
	       y__h1404,
	       y__h1416,
	       y__h1428,
	       y__h1440,
	       y__h1452,
	       y__h1464,
	       y__h1476,
	       y__h1488,
	       y__h1500,
	       y__h1512,
	       y__h1524,
	       y__h1536,
	       y__h1548,
	       y__h1560;
  wire IF_stage0_ff_first__2_BIT_0_3_THEN_IF_stage0_f_ETC___d92,
       n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d55,
       stage0_ff_first__2_BITS_203_TO_199_4_ULT_16___d85;

  // action method metadata_enq
  assign RDY_metadata_enq = meta_in_ff_FULL_N ;

  // value method metadata_notFull
  assign metadata_notFull = meta_in_ff_FULL_N ;
  assign RDY_metadata_notFull = 1'd1 ;

  // action method writeServer_enq
  assign RDY_writeServer_enq = data_in_ff_FULL_N ;

  // value method writeServer_notFull
  assign writeServer_notFull = data_in_ff_FULL_N ;
  assign RDY_writeServer_notFull = 1'd1 ;

  // value method writeClient_first
  assign writeClient_first = data_out_ff_D_OUT ;
  assign RDY_writeClient_first = data_out_ff_EMPTY_N ;

  // action method writeClient_deq
  assign RDY_writeClient_deq = data_out_ff_EMPTY_N ;

  // value method writeClient_notEmpty
  assign writeClient_notEmpty = data_out_ff_EMPTY_N ;
  assign RDY_writeClient_notEmpty = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;

  // submodule buff_frame_ff
  FIFO2 #(.width(32'd1), .guarded(32'd1)) buff_frame_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(buff_frame_ff_D_IN),
							.ENQ(buff_frame_ff_ENQ),
							.DEQ(buff_frame_ff_DEQ),
							.CLR(buff_frame_ff_CLR),
							.D_OUT(),
							.FULL_N(buff_frame_ff_FULL_N),
							.EMPTY_N(buff_frame_ff_EMPTY_N));

  // submodule data_in_ff
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) data_in_ff(.RST(RST_N),
					  .CLK(CLK),
					  .D_IN(data_in_ff_D_IN),
					  .ENQ(data_in_ff_ENQ),
					  .DEQ(data_in_ff_DEQ),
					  .CLR(data_in_ff_CLR),
					  .D_OUT(data_in_ff_D_OUT),
					  .FULL_N(data_in_ff_FULL_N),
					  .EMPTY_N(data_in_ff_EMPTY_N));

  // submodule data_out_ff
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) data_out_ff(.RST(RST_N),
					   .CLK(CLK),
					   .D_IN(data_out_ff_D_IN),
					   .ENQ(data_out_ff_ENQ),
					   .DEQ(data_out_ff_DEQ),
					   .CLR(data_out_ff_CLR),
					   .D_OUT(data_out_ff_D_OUT),
					   .FULL_N(data_out_ff_FULL_N),
					   .EMPTY_N(data_out_ff_EMPTY_N));

  // submodule meta_in_ff
  SizedFIFO #(.p1width(32'd9),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) meta_in_ff(.RST(RST_N),
					  .CLK(CLK),
					  .D_IN(meta_in_ff_D_IN),
					  .ENQ(meta_in_ff_ENQ),
					  .DEQ(meta_in_ff_DEQ),
					  .CLR(meta_in_ff_CLR),
					  .D_OUT(meta_in_ff_D_OUT),
					  .FULL_N(meta_in_ff_FULL_N),
					  .EMPTY_N(meta_in_ff_EMPTY_N));

  // submodule send_frame_ff
  FIFO2 #(.width(32'd1), .guarded(32'd1)) send_frame_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(send_frame_ff_D_IN),
							.ENQ(send_frame_ff_ENQ),
							.DEQ(send_frame_ff_DEQ),
							.CLR(send_frame_ff_CLR),
							.D_OUT(),
							.FULL_N(send_frame_ff_FULL_N),
							.EMPTY_N(send_frame_ff_EMPTY_N));

  // submodule send_last1_ff
  FIFO2 #(.width(32'd1), .guarded(32'd1)) send_last1_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(send_last1_ff_D_IN),
							.ENQ(send_last1_ff_ENQ),
							.DEQ(send_last1_ff_DEQ),
							.CLR(send_last1_ff_CLR),
							.D_OUT(),
							.FULL_N(send_last1_ff_FULL_N),
							.EMPTY_N(send_last1_ff_EMPTY_N));

  // submodule send_last2_ff
  FIFO2 #(.width(32'd1), .guarded(32'd1)) send_last2_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(send_last2_ff_D_IN),
							.ENQ(send_last2_ff_ENQ),
							.DEQ(send_last2_ff_DEQ),
							.CLR(send_last2_ff_CLR),
							.D_OUT(),
							.FULL_N(send_last2_ff_FULL_N),
							.EMPTY_N(send_last2_ff_EMPTY_N));

  // submodule stage0_ff
  FIFO2 #(.width(32'd204), .guarded(32'd1)) stage0_ff(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(stage0_ff_D_IN),
						      .ENQ(stage0_ff_ENQ),
						      .DEQ(stage0_ff_DEQ),
						      .CLR(stage0_ff_CLR),
						      .D_OUT(stage0_ff_D_OUT),
						      .FULL_N(stage0_ff_FULL_N),
						      .EMPTY_N(stage0_ff_EMPTY_N));

  // submodule stage2_ff
  SizedFIFO #(.p1width(32'd191),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) stage2_ff(.RST(RST_N),
					 .CLK(CLK),
					 .D_IN(stage2_ff_D_IN),
					 .ENQ(stage2_ff_ENQ),
					 .DEQ(stage2_ff_DEQ),
					 .CLR(stage2_ff_CLR),
					 .D_OUT(stage2_ff_D_OUT),
					 .FULL_N(stage2_ff_FULL_N),
					 .EMPTY_N(stage2_ff_EMPTY_N));

  // rule RL_rl_serialize_stage0
  assign WILL_FIRE_RL_rl_serialize_stage0 =
	     data_in_ff_EMPTY_N && stage0_ff_FULL_N ;

  // rule RL_rl_send_full_frame
  assign WILL_FIRE_RL_rl_send_full_frame =
	     stage2_ff_EMPTY_N && send_frame_ff_EMPTY_N &&
	     data_out_ff_FULL_N &&
	     meta_in_ff_EMPTY_N &&
	     send_frame_ff_EMPTY_N ;

  // rule RL_rl_buffer_partial_frame
  assign WILL_FIRE_RL_rl_buffer_partial_frame =
	     stage2_ff_EMPTY_N && buff_frame_ff_EMPTY_N ;

  // rule RL_rl_eop_full_frame
  assign WILL_FIRE_RL_rl_eop_full_frame =
	     stage2_ff_EMPTY_N && data_out_ff_FULL_N && meta_in_ff_EMPTY_N &&
	     send_last2_ff_EMPTY_N &&
	     send_last2_ff_EMPTY_N ;

  // rule RL_rl_eop_partial_frame
  assign WILL_FIRE_RL_rl_eop_partial_frame =
	     stage2_ff_EMPTY_N && data_out_ff_FULL_N && meta_in_ff_EMPTY_N &&
	     send_last1_ff_EMPTY_N &&
	     send_last1_ff_EMPTY_N ;

  // rule RL_rl_serialize_stage1
  assign WILL_FIRE_RL_rl_serialize_stage1 =
	     stage0_ff_EMPTY_N && stage2_ff_FULL_N &&
	     IF_stage0_ff_first__2_BIT_0_3_THEN_IF_stage0_f_ETC___d92 ;

  // inputs to muxes for submodule ports
  assign MUX_sop_buffered_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_send_full_frame && sop_buffered ;
  assign MUX_data_buffered_write_1__VAL_2 =
	     stage2_ff_D_OUT[145:18] >> x__h3597 ;
  assign MUX_data_out_ff_enq_1__VAL_1 =
	     { eth_user__h4570,
	       eth_data__h3782,
	       16'hFFFF,
	       sop_buffered,
	       1'd0 } ;
  assign MUX_data_out_ff_enq_1__VAL_2 =
	     { eth_user__h4570, eth_data__h3782, 18'd262141 } ;
  assign MUX_data_out_ff_enq_1__VAL_3 =
	     { eth_user__h4570, eth_data__h3782, mask__h3941, 2'd1 } ;
  assign MUX_mask_buffered_write_1__VAL_2 =
	     stage2_ff_D_OUT[17:2] >> value__h3537 ;
  assign MUX_sop_buffered_write_1__VAL_2 =
	     !sop_buffered && stage2_ff_D_OUT[1] ;

  // register cf_verbosity
  assign cf_verbosity_D_IN = set_verbosity_verbosity ;
  assign cf_verbosity_EN = EN_set_verbosity ;

  // register data_buffered
  assign data_buffered_D_IN =
	     WILL_FIRE_RL_rl_buffer_partial_frame ?
	       eth_data__h3782 :
	       MUX_data_buffered_write_1__VAL_2 ;
  assign data_buffered_EN =
	     WILL_FIRE_RL_rl_buffer_partial_frame ||
	     WILL_FIRE_RL_rl_send_full_frame ;

  // register mask_buffered
  assign mask_buffered_D_IN =
	     WILL_FIRE_RL_rl_buffer_partial_frame ?
	       mask__h3941 :
	       MUX_mask_buffered_write_1__VAL_2 ;
  assign mask_buffered_EN =
	     WILL_FIRE_RL_rl_buffer_partial_frame ||
	     WILL_FIRE_RL_rl_send_full_frame ;

  // register n_bits_buffered
  assign n_bits_buffered_D_IN =
	     data_in_ff_D_OUT[0] ?
	       (n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d55 ?
		  8'd0 :
		  n_bits_buffered_0_PLUS_0_CONCAT_data_in_ff_fir_ETC___d63) :
	       (n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d55 ?
		  n_bits_buffered_0_PLUS_0_CONCAT_data_in_ff_fir_ETC___d62 :
		  n_bits_buffered_0_PLUS_0_CONCAT_data_in_ff_fir_ETC___d63) ;
  assign n_bits_buffered_EN = WILL_FIRE_RL_rl_serialize_stage0 ;

  // register n_bytes_buffered
  assign n_bytes_buffered_D_IN =
	     data_in_ff_D_OUT[0] ?
	       (n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d55 ?
		  5'd0 :
		  n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d56) :
	       (n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d55 ?
		  n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d54 :
		  n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d56) ;
  assign n_bytes_buffered_EN = WILL_FIRE_RL_rl_serialize_stage0 ;

  // register sop_buffered
  assign sop_buffered_D_IN =
	     !MUX_sop_buffered_write_1__SEL_1 &&
	     MUX_sop_buffered_write_1__VAL_2 ;
  assign sop_buffered_EN =
	     WILL_FIRE_RL_rl_send_full_frame && sop_buffered ||
	     WILL_FIRE_RL_rl_buffer_partial_frame ;

  // submodule buff_frame_ff
  assign buff_frame_ff_D_IN = 1'd1 ;
  assign buff_frame_ff_ENQ =
	     WILL_FIRE_RL_rl_serialize_stage1 && !stage0_ff_D_OUT[0] &&
	     stage0_ff_first__2_BITS_203_TO_199_4_ULT_16___d85 ;
  assign buff_frame_ff_DEQ = WILL_FIRE_RL_rl_buffer_partial_frame ;
  assign buff_frame_ff_CLR = 1'b0 ;

  // submodule data_in_ff
  assign data_in_ff_D_IN = writeServer_enq_v ;
  assign data_in_ff_ENQ = EN_writeServer_enq ;
  assign data_in_ff_DEQ = WILL_FIRE_RL_rl_serialize_stage0 ;
  assign data_in_ff_CLR = 1'b0 ;

  // submodule data_out_ff
  always@(WILL_FIRE_RL_rl_send_full_frame or
	  MUX_data_out_ff_enq_1__VAL_1 or
	  WILL_FIRE_RL_rl_eop_full_frame or
	  MUX_data_out_ff_enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_eop_partial_frame or MUX_data_out_ff_enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_send_full_frame:
	  data_out_ff_D_IN = MUX_data_out_ff_enq_1__VAL_1;
      WILL_FIRE_RL_rl_eop_full_frame:
	  data_out_ff_D_IN = MUX_data_out_ff_enq_1__VAL_2;
      WILL_FIRE_RL_rl_eop_partial_frame:
	  data_out_ff_D_IN = MUX_data_out_ff_enq_1__VAL_3;
      default: data_out_ff_D_IN =
		   178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign data_out_ff_ENQ =
	     WILL_FIRE_RL_rl_send_full_frame ||
	     WILL_FIRE_RL_rl_eop_full_frame ||
	     WILL_FIRE_RL_rl_eop_partial_frame ;
  assign data_out_ff_DEQ = EN_writeClient_deq ;
  assign data_out_ff_CLR = 1'b0 ;

  // submodule meta_in_ff
  assign meta_in_ff_D_IN = metadata_enq_v ;
  assign meta_in_ff_ENQ = EN_metadata_enq ;
  assign meta_in_ff_DEQ =
	     WILL_FIRE_RL_rl_eop_partial_frame ||
	     WILL_FIRE_RL_rl_eop_full_frame ;
  assign meta_in_ff_CLR = 1'b0 ;

  // submodule send_frame_ff
  assign send_frame_ff_D_IN = 1'd1 ;
  assign send_frame_ff_ENQ =
	     WILL_FIRE_RL_rl_serialize_stage1 && !stage0_ff_D_OUT[0] &&
	     !stage0_ff_first__2_BITS_203_TO_199_4_ULT_16___d85 ;
  assign send_frame_ff_DEQ = WILL_FIRE_RL_rl_send_full_frame ;
  assign send_frame_ff_CLR = 1'b0 ;

  // submodule send_last1_ff
  assign send_last1_ff_D_IN = 1'd1 ;
  assign send_last1_ff_ENQ =
	     WILL_FIRE_RL_rl_serialize_stage1 && stage0_ff_D_OUT[0] &&
	     stage0_ff_first__2_BITS_203_TO_199_4_ULT_16___d85 ;
  assign send_last1_ff_DEQ = WILL_FIRE_RL_rl_eop_partial_frame ;
  assign send_last1_ff_CLR = 1'b0 ;

  // submodule send_last2_ff
  assign send_last2_ff_D_IN = 1'd1 ;
  assign send_last2_ff_ENQ =
	     WILL_FIRE_RL_rl_serialize_stage1 && stage0_ff_D_OUT[0] &&
	     !stage0_ff_first__2_BITS_203_TO_199_4_ULT_16___d85 ;
  assign send_last2_ff_DEQ = WILL_FIRE_RL_rl_eop_full_frame ;
  assign send_last2_ff_CLR = 1'b0 ;

  // submodule stage0_ff
  assign stage0_ff_D_IN =
	     { n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d54,
	       n_bits_buffered_0_PLUS_0_CONCAT_data_in_ff_fir_ETC___d62,
	       n_bytes_buffered,
	       n_bits_buffered,
	       data_in_ff_D_OUT } ;
  assign stage0_ff_ENQ = WILL_FIRE_RL_rl_serialize_stage0 ;
  assign stage0_ff_DEQ = WILL_FIRE_RL_rl_serialize_stage1 ;
  assign stage0_ff_CLR = 1'b0 ;

  // submodule stage2_ff
  assign stage2_ff_D_IN = stage0_ff_D_OUT[190:0] ;
  assign stage2_ff_ENQ = WILL_FIRE_RL_rl_serialize_stage1 ;
  assign stage2_ff_DEQ =
	     WILL_FIRE_RL_rl_eop_partial_frame ||
	     WILL_FIRE_RL_rl_eop_full_frame ||
	     WILL_FIRE_RL_rl_buffer_partial_frame ||
	     WILL_FIRE_RL_rl_send_full_frame ;
  assign stage2_ff_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_stage0_ff_first__2_BIT_0_3_THEN_IF_stage0_f_ETC___d92 =
	     stage0_ff_D_OUT[0] ?
	       (stage0_ff_first__2_BITS_203_TO_199_4_ULT_16___d85 ?
		  send_last1_ff_FULL_N :
		  send_last2_ff_FULL_N) :
	       (stage0_ff_first__2_BITS_203_TO_199_4_ULT_16___d85 ?
		  buff_frame_ff_FULL_N :
		  send_frame_ff_FULL_N) ;
  assign _0_CONCAT_data_in_ff_first_BIT_17_PLUS_0_CONCAT_ETC___d53 =
	     x__h1391 + y__h1392 ;
  assign eth_data__h3782 = x__h3808 | data_buffered ;
  assign eth_user__h4570 = { 23'd0, meta_in_ff_D_OUT } ;
  assign mask__h3941 = x__h4072 | mask_buffered ;
  assign n_bits_buffered_0_PLUS_0_CONCAT_data_in_ff_fir_ETC___d62 =
	     n_bits_buffered +
	     { _0_CONCAT_data_in_ff_first_BIT_17_PLUS_0_CONCAT_ETC___d53,
	       3'd0 } ;
  assign n_bits_buffered_0_PLUS_0_CONCAT_data_in_ff_fir_ETC___d63 =
	     n_bits_buffered_0_PLUS_0_CONCAT_data_in_ff_fir_ETC___d62 -
	     8'd128 ;
  assign n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d54 =
	     n_bytes_buffered +
	     _0_CONCAT_data_in_ff_first_BIT_17_PLUS_0_CONCAT_ETC___d53 ;
  assign n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d55 =
	     n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d54 <
	     5'd16 ;
  assign n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d56 =
	     n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d54 -
	     5'd16 ;
  assign stage0_ff_first__2_BITS_203_TO_199_4_ULT_16___d85 =
	     stage0_ff_D_OUT[203:199] < 5'd16 ;
  assign value__h3537 = 5'd16 - stage2_ff_D_OUT[190:186] ;
  assign x__h1391 = x__h1403 + y__h1404 ;
  assign x__h1403 = x__h1415 + y__h1416 ;
  assign x__h1415 = x__h1427 + y__h1428 ;
  assign x__h1427 = x__h1439 + y__h1440 ;
  assign x__h1439 = x__h1451 + y__h1452 ;
  assign x__h1451 = x__h1463 + y__h1464 ;
  assign x__h1463 = x__h1475 + y__h1476 ;
  assign x__h1475 = x__h1487 + y__h1488 ;
  assign x__h1487 = x__h1499 + y__h1500 ;
  assign x__h1499 = x__h1511 + y__h1512 ;
  assign x__h1511 = x__h1523 + y__h1524 ;
  assign x__h1523 = x__h1535 + y__h1536 ;
  assign x__h1535 = x__h1547 + y__h1548 ;
  assign x__h1547 = x__h1559 + y__h1560 ;
  assign x__h1559 = { 4'd0, data_in_ff_D_OUT[17] } ;
  assign x__h3597 = { value__h3537, 3'd0 } ;
  assign x__h3808 = stage2_ff_D_OUT[145:18] << stage2_ff_D_OUT[185:178] ;
  assign x__h4072 = stage2_ff_D_OUT[17:2] << stage2_ff_D_OUT[190:186] ;
  assign y__h1392 = { 4'd0, data_in_ff_D_OUT[2] } ;
  assign y__h1404 = { 4'd0, data_in_ff_D_OUT[3] } ;
  assign y__h1416 = { 4'd0, data_in_ff_D_OUT[4] } ;
  assign y__h1428 = { 4'd0, data_in_ff_D_OUT[5] } ;
  assign y__h1440 = { 4'd0, data_in_ff_D_OUT[6] } ;
  assign y__h1452 = { 4'd0, data_in_ff_D_OUT[7] } ;
  assign y__h1464 = { 4'd0, data_in_ff_D_OUT[8] } ;
  assign y__h1476 = { 4'd0, data_in_ff_D_OUT[9] } ;
  assign y__h1488 = { 4'd0, data_in_ff_D_OUT[10] } ;
  assign y__h1500 = { 4'd0, data_in_ff_D_OUT[11] } ;
  assign y__h1512 = { 4'd0, data_in_ff_D_OUT[12] } ;
  assign y__h1524 = { 4'd0, data_in_ff_D_OUT[13] } ;
  assign y__h1536 = { 4'd0, data_in_ff_D_OUT[14] } ;
  assign y__h1548 = { 4'd0, data_in_ff_D_OUT[15] } ;
  assign y__h1560 = { 4'd0, data_in_ff_D_OUT[16] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        data_buffered <= `BSV_ASSIGNMENT_DELAY 128'd0;
	mask_buffered <= `BSV_ASSIGNMENT_DELAY 16'd0;
	n_bits_buffered <= `BSV_ASSIGNMENT_DELAY 8'd0;
	n_bytes_buffered <= `BSV_ASSIGNMENT_DELAY 5'd0;
	sop_buffered <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (data_buffered_EN)
	  data_buffered <= `BSV_ASSIGNMENT_DELAY data_buffered_D_IN;
	if (mask_buffered_EN)
	  mask_buffered <= `BSV_ASSIGNMENT_DELAY mask_buffered_D_IN;
	if (n_bits_buffered_EN)
	  n_bits_buffered <= `BSV_ASSIGNMENT_DELAY n_bits_buffered_D_IN;
	if (n_bytes_buffered_EN)
	  n_bytes_buffered <= `BSV_ASSIGNMENT_DELAY n_bytes_buffered_D_IN;
	if (sop_buffered_EN)
	  sop_buffered <= `BSV_ASSIGNMENT_DELAY sop_buffered_D_IN;
      end
    if (cf_verbosity_EN)
      cf_verbosity <= `BSV_ASSIGNMENT_DELAY cf_verbosity_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cf_verbosity = 32'hAAAAAAAA;
    data_buffered = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mask_buffered = 16'hAAAA;
    n_bits_buffered = 8'hAA;
    n_bytes_buffered = 5'h0A;
    sop_buffered = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_serialize_stage0 && data_in_ff_D_OUT[0] &&
	  n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d55)
	begin
	  v__h2582 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_serialize_stage0 && data_in_ff_D_OUT[0] &&
	  n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d55)
	$display("(%0d) send_last1 %d ",
		 v__h2582,
		 $unsigned(n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d54));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_serialize_stage0 && data_in_ff_D_OUT[0] &&
	  !n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d55)
	begin
	  v__h2466 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_serialize_stage0 && data_in_ff_D_OUT[0] &&
	  !n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d55)
	$display("(%0d) send_last2 %d ",
		 v__h2466,
		 $unsigned(n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d54));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_serialize_stage0 && !data_in_ff_D_OUT[0] &&
	  n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d55)
	begin
	  v__h2283 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_serialize_stage0 && !data_in_ff_D_OUT[0] &&
	  n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d55)
	$display("(%0d) buff_frame %d ",
		 v__h2283,
		 $unsigned(n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d54));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_serialize_stage0 && !data_in_ff_D_OUT[0] &&
	  !n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d55)
	begin
	  v__h2085 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_serialize_stage0 && !data_in_ff_D_OUT[0] &&
	  !n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d55)
	$display("(%0d) send_frame %d ",
		 v__h2085,
		 $unsigned(n_bytes_buffered_PLUS_0_CONCAT_data_in_ff_firs_ETC___d54));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_full_frame &&
	  WILL_FIRE_RL_rl_eop_partial_frame)
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/HeaderSerializer.bsv\", line 174, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_send_full_frame] and\n  [RL_rl_eop_partial_frame] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_full_frame && WILL_FIRE_RL_rl_eop_full_frame)
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/HeaderSerializer.bsv\", line 174, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_send_full_frame] and\n  [RL_rl_eop_full_frame] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_full_frame &&
	  WILL_FIRE_RL_rl_buffer_partial_frame)
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/HeaderSerializer.bsv\", line 174, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_send_full_frame] and\n  [RL_rl_buffer_partial_frame] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_buffer_partial_frame &&
	  WILL_FIRE_RL_rl_eop_partial_frame)
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/HeaderSerializer.bsv\", line 174, column 49: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_buffer_partial_frame] and\n  [RL_rl_eop_partial_frame] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_buffer_partial_frame &&
	  WILL_FIRE_RL_rl_eop_full_frame)
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/HeaderSerializer.bsv\", line 174, column 49: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_buffer_partial_frame] and\n  [RL_rl_eop_full_frame] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_eop_full_frame && WILL_FIRE_RL_rl_eop_partial_frame)
	$display("Error: \"/home/netarchlab/p4fpga/p4fpga/bsv/library/HeaderSerializer.bsv\", line 174, column 74: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_eop_full_frame] and\n  [RL_rl_eop_partial_frame] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkHeaderSerializer

