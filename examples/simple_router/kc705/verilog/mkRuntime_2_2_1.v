//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Wed May 31 23:27:39 CST 2017
//
// BVI format method schedule info:
// schedule rxchan_0_macRx_put  CF ( rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  set_verbosity );
// schedule rxchan_0_macRx_put  C ( rxchan_0_macRx_put );
//
// schedule rxchan_0_writeClient_first  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  set_verbosity );
// schedule rxchan_0_writeClient_first  SB ( rxchan_0_writeClient_deq );
//
// schedule rxchan_0_writeClient_deq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					set_verbosity );
// schedule rxchan_0_writeClient_deq  C ( rxchan_0_writeClient_deq );
//
// schedule rxchan_0_writeClient_notEmpty  CF ( rxchan_0_macRx_put,
// 					     rxchan_0_writeClient_first,
// 					     rxchan_0_writeClient_notEmpty,
// 					     rxchan_0_next_first,
// 					     rxchan_0_next_deq,
// 					     rxchan_0_next_notEmpty,
// 					     rxchan_0_verbose_enq,
// 					     rxchan_0_verbose_notFull,
// 					     rxchan_1_macRx_put,
// 					     rxchan_1_writeClient_first,
// 					     rxchan_1_writeClient_deq,
// 					     rxchan_1_writeClient_notEmpty,
// 					     rxchan_1_next_first,
// 					     rxchan_1_next_deq,
// 					     rxchan_1_next_notEmpty,
// 					     rxchan_1_verbose_enq,
// 					     rxchan_1_verbose_notFull,
// 					     hostchan_0_writeServer_enq,
// 					     hostchan_0_writeServer_notFull,
// 					     hostchan_0_writeClient_first,
// 					     hostchan_0_writeClient_deq,
// 					     hostchan_0_writeClient_notEmpty,
// 					     hostchan_0_next_first,
// 					     hostchan_0_next_deq,
// 					     hostchan_0_next_notEmpty,
// 					     hostchan_0_verbose_enq,
// 					     hostchan_0_verbose_notFull,
// 					     txchan_0_writeServer_enq,
// 					     txchan_0_writeServer_notFull,
// 					     txchan_0_macTx_get,
// 					     txchan_0_verbose_enq,
// 					     txchan_0_verbose_notFull,
// 					     txchan_1_writeServer_enq,
// 					     txchan_1_writeServer_notFull,
// 					     txchan_1_macTx_get,
// 					     txchan_1_verbose_enq,
// 					     txchan_1_verbose_notFull,
// 					     prev_0_enq,
// 					     prev_0_notFull,
// 					     prev_1_enq,
// 					     prev_1_notFull,
// 					     prev_2_enq,
// 					     prev_2_notFull,
// 					     set_verbosity );
// schedule rxchan_0_writeClient_notEmpty  SB ( rxchan_0_writeClient_deq );
//
// schedule rxchan_0_next_first  CF ( rxchan_0_macRx_put,
// 				   rxchan_0_writeClient_first,
// 				   rxchan_0_writeClient_deq,
// 				   rxchan_0_writeClient_notEmpty,
// 				   rxchan_0_next_first,
// 				   rxchan_0_next_notEmpty,
// 				   rxchan_0_verbose_enq,
// 				   rxchan_0_verbose_notFull,
// 				   rxchan_1_macRx_put,
// 				   rxchan_1_writeClient_first,
// 				   rxchan_1_writeClient_deq,
// 				   rxchan_1_writeClient_notEmpty,
// 				   rxchan_1_next_first,
// 				   rxchan_1_next_deq,
// 				   rxchan_1_next_notEmpty,
// 				   rxchan_1_verbose_enq,
// 				   rxchan_1_verbose_notFull,
// 				   hostchan_0_writeServer_enq,
// 				   hostchan_0_writeServer_notFull,
// 				   hostchan_0_writeClient_first,
// 				   hostchan_0_writeClient_deq,
// 				   hostchan_0_writeClient_notEmpty,
// 				   hostchan_0_next_first,
// 				   hostchan_0_next_deq,
// 				   hostchan_0_next_notEmpty,
// 				   hostchan_0_verbose_enq,
// 				   hostchan_0_verbose_notFull,
// 				   txchan_0_writeServer_enq,
// 				   txchan_0_writeServer_notFull,
// 				   txchan_0_macTx_get,
// 				   txchan_0_verbose_enq,
// 				   txchan_0_verbose_notFull,
// 				   txchan_1_writeServer_enq,
// 				   txchan_1_writeServer_notFull,
// 				   txchan_1_macTx_get,
// 				   txchan_1_verbose_enq,
// 				   txchan_1_verbose_notFull,
// 				   prev_0_enq,
// 				   prev_0_notFull,
// 				   prev_1_enq,
// 				   prev_1_notFull,
// 				   prev_2_enq,
// 				   prev_2_notFull,
// 				   set_verbosity );
// schedule rxchan_0_next_first  SB ( rxchan_0_next_deq );
//
// schedule rxchan_0_next_deq  CF ( rxchan_0_macRx_put,
// 				 rxchan_0_writeClient_first,
// 				 rxchan_0_writeClient_deq,
// 				 rxchan_0_writeClient_notEmpty,
// 				 rxchan_0_verbose_enq,
// 				 rxchan_0_verbose_notFull,
// 				 rxchan_1_macRx_put,
// 				 rxchan_1_writeClient_first,
// 				 rxchan_1_writeClient_deq,
// 				 rxchan_1_writeClient_notEmpty,
// 				 rxchan_1_next_first,
// 				 rxchan_1_next_deq,
// 				 rxchan_1_next_notEmpty,
// 				 rxchan_1_verbose_enq,
// 				 rxchan_1_verbose_notFull,
// 				 hostchan_0_writeServer_enq,
// 				 hostchan_0_writeServer_notFull,
// 				 hostchan_0_writeClient_first,
// 				 hostchan_0_writeClient_deq,
// 				 hostchan_0_writeClient_notEmpty,
// 				 hostchan_0_next_first,
// 				 hostchan_0_next_deq,
// 				 hostchan_0_next_notEmpty,
// 				 hostchan_0_verbose_enq,
// 				 hostchan_0_verbose_notFull,
// 				 txchan_0_writeServer_enq,
// 				 txchan_0_writeServer_notFull,
// 				 txchan_0_macTx_get,
// 				 txchan_0_verbose_enq,
// 				 txchan_0_verbose_notFull,
// 				 txchan_1_writeServer_enq,
// 				 txchan_1_writeServer_notFull,
// 				 txchan_1_macTx_get,
// 				 txchan_1_verbose_enq,
// 				 txchan_1_verbose_notFull,
// 				 prev_0_enq,
// 				 prev_0_notFull,
// 				 prev_1_enq,
// 				 prev_1_notFull,
// 				 prev_2_enq,
// 				 prev_2_notFull,
// 				 set_verbosity );
// schedule rxchan_0_next_deq  C ( rxchan_0_next_deq );
//
// schedule rxchan_0_next_notEmpty  CF ( rxchan_0_macRx_put,
// 				      rxchan_0_writeClient_first,
// 				      rxchan_0_writeClient_deq,
// 				      rxchan_0_writeClient_notEmpty,
// 				      rxchan_0_next_first,
// 				      rxchan_0_next_notEmpty,
// 				      rxchan_0_verbose_enq,
// 				      rxchan_0_verbose_notFull,
// 				      rxchan_1_macRx_put,
// 				      rxchan_1_writeClient_first,
// 				      rxchan_1_writeClient_deq,
// 				      rxchan_1_writeClient_notEmpty,
// 				      rxchan_1_next_first,
// 				      rxchan_1_next_deq,
// 				      rxchan_1_next_notEmpty,
// 				      rxchan_1_verbose_enq,
// 				      rxchan_1_verbose_notFull,
// 				      hostchan_0_writeServer_enq,
// 				      hostchan_0_writeServer_notFull,
// 				      hostchan_0_writeClient_first,
// 				      hostchan_0_writeClient_deq,
// 				      hostchan_0_writeClient_notEmpty,
// 				      hostchan_0_next_first,
// 				      hostchan_0_next_deq,
// 				      hostchan_0_next_notEmpty,
// 				      hostchan_0_verbose_enq,
// 				      hostchan_0_verbose_notFull,
// 				      txchan_0_writeServer_enq,
// 				      txchan_0_writeServer_notFull,
// 				      txchan_0_macTx_get,
// 				      txchan_0_verbose_enq,
// 				      txchan_0_verbose_notFull,
// 				      txchan_1_writeServer_enq,
// 				      txchan_1_writeServer_notFull,
// 				      txchan_1_macTx_get,
// 				      txchan_1_verbose_enq,
// 				      txchan_1_verbose_notFull,
// 				      prev_0_enq,
// 				      prev_0_notFull,
// 				      prev_1_enq,
// 				      prev_1_notFull,
// 				      prev_2_enq,
// 				      prev_2_notFull,
// 				      set_verbosity );
// schedule rxchan_0_next_notEmpty  SB ( rxchan_0_next_deq );
//
// schedule rxchan_0_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull );
// schedule rxchan_0_verbose_enq  C ( rxchan_0_verbose_enq, set_verbosity );
//
// schedule rxchan_0_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull );
// schedule rxchan_0_verbose_notFull  SBR ( rxchan_0_verbose_enq,
// 					 set_verbosity );
//
// schedule rxchan_1_macRx_put  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  set_verbosity );
// schedule rxchan_1_macRx_put  C ( rxchan_1_macRx_put );
//
// schedule rxchan_1_writeClient_first  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  set_verbosity );
// schedule rxchan_1_writeClient_first  SB ( rxchan_1_writeClient_deq );
//
// schedule rxchan_1_writeClient_deq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					set_verbosity );
// schedule rxchan_1_writeClient_deq  C ( rxchan_1_writeClient_deq );
//
// schedule rxchan_1_writeClient_notEmpty  CF ( rxchan_0_macRx_put,
// 					     rxchan_0_writeClient_first,
// 					     rxchan_0_writeClient_deq,
// 					     rxchan_0_writeClient_notEmpty,
// 					     rxchan_0_next_first,
// 					     rxchan_0_next_deq,
// 					     rxchan_0_next_notEmpty,
// 					     rxchan_0_verbose_enq,
// 					     rxchan_0_verbose_notFull,
// 					     rxchan_1_macRx_put,
// 					     rxchan_1_writeClient_first,
// 					     rxchan_1_writeClient_notEmpty,
// 					     rxchan_1_next_first,
// 					     rxchan_1_next_deq,
// 					     rxchan_1_next_notEmpty,
// 					     rxchan_1_verbose_enq,
// 					     rxchan_1_verbose_notFull,
// 					     hostchan_0_writeServer_enq,
// 					     hostchan_0_writeServer_notFull,
// 					     hostchan_0_writeClient_first,
// 					     hostchan_0_writeClient_deq,
// 					     hostchan_0_writeClient_notEmpty,
// 					     hostchan_0_next_first,
// 					     hostchan_0_next_deq,
// 					     hostchan_0_next_notEmpty,
// 					     hostchan_0_verbose_enq,
// 					     hostchan_0_verbose_notFull,
// 					     txchan_0_writeServer_enq,
// 					     txchan_0_writeServer_notFull,
// 					     txchan_0_macTx_get,
// 					     txchan_0_verbose_enq,
// 					     txchan_0_verbose_notFull,
// 					     txchan_1_writeServer_enq,
// 					     txchan_1_writeServer_notFull,
// 					     txchan_1_macTx_get,
// 					     txchan_1_verbose_enq,
// 					     txchan_1_verbose_notFull,
// 					     prev_0_enq,
// 					     prev_0_notFull,
// 					     prev_1_enq,
// 					     prev_1_notFull,
// 					     prev_2_enq,
// 					     prev_2_notFull,
// 					     set_verbosity );
// schedule rxchan_1_writeClient_notEmpty  SB ( rxchan_1_writeClient_deq );
//
// schedule rxchan_1_next_first  CF ( rxchan_0_macRx_put,
// 				   rxchan_0_writeClient_first,
// 				   rxchan_0_writeClient_deq,
// 				   rxchan_0_writeClient_notEmpty,
// 				   rxchan_0_next_first,
// 				   rxchan_0_next_deq,
// 				   rxchan_0_next_notEmpty,
// 				   rxchan_0_verbose_enq,
// 				   rxchan_0_verbose_notFull,
// 				   rxchan_1_macRx_put,
// 				   rxchan_1_writeClient_first,
// 				   rxchan_1_writeClient_deq,
// 				   rxchan_1_writeClient_notEmpty,
// 				   rxchan_1_next_first,
// 				   rxchan_1_next_notEmpty,
// 				   rxchan_1_verbose_enq,
// 				   rxchan_1_verbose_notFull,
// 				   hostchan_0_writeServer_enq,
// 				   hostchan_0_writeServer_notFull,
// 				   hostchan_0_writeClient_first,
// 				   hostchan_0_writeClient_deq,
// 				   hostchan_0_writeClient_notEmpty,
// 				   hostchan_0_next_first,
// 				   hostchan_0_next_deq,
// 				   hostchan_0_next_notEmpty,
// 				   hostchan_0_verbose_enq,
// 				   hostchan_0_verbose_notFull,
// 				   txchan_0_writeServer_enq,
// 				   txchan_0_writeServer_notFull,
// 				   txchan_0_macTx_get,
// 				   txchan_0_verbose_enq,
// 				   txchan_0_verbose_notFull,
// 				   txchan_1_writeServer_enq,
// 				   txchan_1_writeServer_notFull,
// 				   txchan_1_macTx_get,
// 				   txchan_1_verbose_enq,
// 				   txchan_1_verbose_notFull,
// 				   prev_0_enq,
// 				   prev_0_notFull,
// 				   prev_1_enq,
// 				   prev_1_notFull,
// 				   prev_2_enq,
// 				   prev_2_notFull,
// 				   set_verbosity );
// schedule rxchan_1_next_first  SB ( rxchan_1_next_deq );
//
// schedule rxchan_1_next_deq  CF ( rxchan_0_macRx_put,
// 				 rxchan_0_writeClient_first,
// 				 rxchan_0_writeClient_deq,
// 				 rxchan_0_writeClient_notEmpty,
// 				 rxchan_0_next_first,
// 				 rxchan_0_next_deq,
// 				 rxchan_0_next_notEmpty,
// 				 rxchan_0_verbose_enq,
// 				 rxchan_0_verbose_notFull,
// 				 rxchan_1_macRx_put,
// 				 rxchan_1_writeClient_first,
// 				 rxchan_1_writeClient_deq,
// 				 rxchan_1_writeClient_notEmpty,
// 				 rxchan_1_verbose_enq,
// 				 rxchan_1_verbose_notFull,
// 				 hostchan_0_writeServer_enq,
// 				 hostchan_0_writeServer_notFull,
// 				 hostchan_0_writeClient_first,
// 				 hostchan_0_writeClient_deq,
// 				 hostchan_0_writeClient_notEmpty,
// 				 hostchan_0_next_first,
// 				 hostchan_0_next_deq,
// 				 hostchan_0_next_notEmpty,
// 				 hostchan_0_verbose_enq,
// 				 hostchan_0_verbose_notFull,
// 				 txchan_0_writeServer_enq,
// 				 txchan_0_writeServer_notFull,
// 				 txchan_0_macTx_get,
// 				 txchan_0_verbose_enq,
// 				 txchan_0_verbose_notFull,
// 				 txchan_1_writeServer_enq,
// 				 txchan_1_writeServer_notFull,
// 				 txchan_1_macTx_get,
// 				 txchan_1_verbose_enq,
// 				 txchan_1_verbose_notFull,
// 				 prev_0_enq,
// 				 prev_0_notFull,
// 				 prev_1_enq,
// 				 prev_1_notFull,
// 				 prev_2_enq,
// 				 prev_2_notFull,
// 				 set_verbosity );
// schedule rxchan_1_next_deq  C ( rxchan_1_next_deq );
//
// schedule rxchan_1_next_notEmpty  CF ( rxchan_0_macRx_put,
// 				      rxchan_0_writeClient_first,
// 				      rxchan_0_writeClient_deq,
// 				      rxchan_0_writeClient_notEmpty,
// 				      rxchan_0_next_first,
// 				      rxchan_0_next_deq,
// 				      rxchan_0_next_notEmpty,
// 				      rxchan_0_verbose_enq,
// 				      rxchan_0_verbose_notFull,
// 				      rxchan_1_macRx_put,
// 				      rxchan_1_writeClient_first,
// 				      rxchan_1_writeClient_deq,
// 				      rxchan_1_writeClient_notEmpty,
// 				      rxchan_1_next_first,
// 				      rxchan_1_next_notEmpty,
// 				      rxchan_1_verbose_enq,
// 				      rxchan_1_verbose_notFull,
// 				      hostchan_0_writeServer_enq,
// 				      hostchan_0_writeServer_notFull,
// 				      hostchan_0_writeClient_first,
// 				      hostchan_0_writeClient_deq,
// 				      hostchan_0_writeClient_notEmpty,
// 				      hostchan_0_next_first,
// 				      hostchan_0_next_deq,
// 				      hostchan_0_next_notEmpty,
// 				      hostchan_0_verbose_enq,
// 				      hostchan_0_verbose_notFull,
// 				      txchan_0_writeServer_enq,
// 				      txchan_0_writeServer_notFull,
// 				      txchan_0_macTx_get,
// 				      txchan_0_verbose_enq,
// 				      txchan_0_verbose_notFull,
// 				      txchan_1_writeServer_enq,
// 				      txchan_1_writeServer_notFull,
// 				      txchan_1_macTx_get,
// 				      txchan_1_verbose_enq,
// 				      txchan_1_verbose_notFull,
// 				      prev_0_enq,
// 				      prev_0_notFull,
// 				      prev_1_enq,
// 				      prev_1_notFull,
// 				      prev_2_enq,
// 				      prev_2_notFull,
// 				      set_verbosity );
// schedule rxchan_1_next_notEmpty  SB ( rxchan_1_next_deq );
//
// schedule rxchan_1_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull );
// schedule rxchan_1_verbose_enq  C ( rxchan_1_verbose_enq, set_verbosity );
//
// schedule rxchan_1_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull );
// schedule rxchan_1_verbose_notFull  SBR ( rxchan_1_verbose_enq,
// 					 set_verbosity );
//
// schedule hostchan_0_writeServer_enq  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  set_verbosity );
// schedule hostchan_0_writeServer_enq  C ( hostchan_0_writeServer_enq );
//
// schedule hostchan_0_writeServer_notFull  CF ( rxchan_0_macRx_put,
// 					      rxchan_0_writeClient_first,
// 					      rxchan_0_writeClient_deq,
// 					      rxchan_0_writeClient_notEmpty,
// 					      rxchan_0_next_first,
// 					      rxchan_0_next_deq,
// 					      rxchan_0_next_notEmpty,
// 					      rxchan_0_verbose_enq,
// 					      rxchan_0_verbose_notFull,
// 					      rxchan_1_macRx_put,
// 					      rxchan_1_writeClient_first,
// 					      rxchan_1_writeClient_deq,
// 					      rxchan_1_writeClient_notEmpty,
// 					      rxchan_1_next_first,
// 					      rxchan_1_next_deq,
// 					      rxchan_1_next_notEmpty,
// 					      rxchan_1_verbose_enq,
// 					      rxchan_1_verbose_notFull,
// 					      hostchan_0_writeServer_notFull,
// 					      hostchan_0_writeClient_first,
// 					      hostchan_0_writeClient_deq,
// 					      hostchan_0_writeClient_notEmpty,
// 					      hostchan_0_next_first,
// 					      hostchan_0_next_deq,
// 					      hostchan_0_next_notEmpty,
// 					      hostchan_0_verbose_enq,
// 					      hostchan_0_verbose_notFull,
// 					      txchan_0_writeServer_enq,
// 					      txchan_0_writeServer_notFull,
// 					      txchan_0_macTx_get,
// 					      txchan_0_verbose_enq,
// 					      txchan_0_verbose_notFull,
// 					      txchan_1_writeServer_enq,
// 					      txchan_1_writeServer_notFull,
// 					      txchan_1_macTx_get,
// 					      txchan_1_verbose_enq,
// 					      txchan_1_verbose_notFull,
// 					      prev_0_enq,
// 					      prev_0_notFull,
// 					      prev_1_enq,
// 					      prev_1_notFull,
// 					      prev_2_enq,
// 					      prev_2_notFull,
// 					      set_verbosity );
// schedule hostchan_0_writeServer_notFull  SB ( hostchan_0_writeServer_enq );
//
// schedule hostchan_0_writeClient_first  CF ( rxchan_0_macRx_put,
// 					    rxchan_0_writeClient_first,
// 					    rxchan_0_writeClient_deq,
// 					    rxchan_0_writeClient_notEmpty,
// 					    rxchan_0_next_first,
// 					    rxchan_0_next_deq,
// 					    rxchan_0_next_notEmpty,
// 					    rxchan_0_verbose_enq,
// 					    rxchan_0_verbose_notFull,
// 					    rxchan_1_macRx_put,
// 					    rxchan_1_writeClient_first,
// 					    rxchan_1_writeClient_deq,
// 					    rxchan_1_writeClient_notEmpty,
// 					    rxchan_1_next_first,
// 					    rxchan_1_next_deq,
// 					    rxchan_1_next_notEmpty,
// 					    rxchan_1_verbose_enq,
// 					    rxchan_1_verbose_notFull,
// 					    hostchan_0_writeServer_enq,
// 					    hostchan_0_writeServer_notFull,
// 					    hostchan_0_writeClient_first,
// 					    hostchan_0_writeClient_notEmpty,
// 					    hostchan_0_next_first,
// 					    hostchan_0_next_deq,
// 					    hostchan_0_next_notEmpty,
// 					    hostchan_0_verbose_enq,
// 					    hostchan_0_verbose_notFull,
// 					    txchan_0_writeServer_enq,
// 					    txchan_0_writeServer_notFull,
// 					    txchan_0_macTx_get,
// 					    txchan_0_verbose_enq,
// 					    txchan_0_verbose_notFull,
// 					    txchan_1_writeServer_enq,
// 					    txchan_1_writeServer_notFull,
// 					    txchan_1_macTx_get,
// 					    txchan_1_verbose_enq,
// 					    txchan_1_verbose_notFull,
// 					    prev_0_enq,
// 					    prev_0_notFull,
// 					    prev_1_enq,
// 					    prev_1_notFull,
// 					    prev_2_enq,
// 					    prev_2_notFull,
// 					    set_verbosity );
// schedule hostchan_0_writeClient_first  SB ( hostchan_0_writeClient_deq );
//
// schedule hostchan_0_writeClient_deq  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_enq,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull,
// 					  set_verbosity );
// schedule hostchan_0_writeClient_deq  C ( hostchan_0_writeClient_deq );
//
// schedule hostchan_0_writeClient_notEmpty  CF ( rxchan_0_macRx_put,
// 					       rxchan_0_writeClient_first,
// 					       rxchan_0_writeClient_deq,
// 					       rxchan_0_writeClient_notEmpty,
// 					       rxchan_0_next_first,
// 					       rxchan_0_next_deq,
// 					       rxchan_0_next_notEmpty,
// 					       rxchan_0_verbose_enq,
// 					       rxchan_0_verbose_notFull,
// 					       rxchan_1_macRx_put,
// 					       rxchan_1_writeClient_first,
// 					       rxchan_1_writeClient_deq,
// 					       rxchan_1_writeClient_notEmpty,
// 					       rxchan_1_next_first,
// 					       rxchan_1_next_deq,
// 					       rxchan_1_next_notEmpty,
// 					       rxchan_1_verbose_enq,
// 					       rxchan_1_verbose_notFull,
// 					       hostchan_0_writeServer_enq,
// 					       hostchan_0_writeServer_notFull,
// 					       hostchan_0_writeClient_first,
// 					       hostchan_0_writeClient_notEmpty,
// 					       hostchan_0_next_first,
// 					       hostchan_0_next_deq,
// 					       hostchan_0_next_notEmpty,
// 					       hostchan_0_verbose_enq,
// 					       hostchan_0_verbose_notFull,
// 					       txchan_0_writeServer_enq,
// 					       txchan_0_writeServer_notFull,
// 					       txchan_0_macTx_get,
// 					       txchan_0_verbose_enq,
// 					       txchan_0_verbose_notFull,
// 					       txchan_1_writeServer_enq,
// 					       txchan_1_writeServer_notFull,
// 					       txchan_1_macTx_get,
// 					       txchan_1_verbose_enq,
// 					       txchan_1_verbose_notFull,
// 					       prev_0_enq,
// 					       prev_0_notFull,
// 					       prev_1_enq,
// 					       prev_1_notFull,
// 					       prev_2_enq,
// 					       prev_2_notFull,
// 					       set_verbosity );
// schedule hostchan_0_writeClient_notEmpty  SB ( hostchan_0_writeClient_deq );
//
// schedule hostchan_0_next_first  CF ( rxchan_0_macRx_put,
// 				     rxchan_0_writeClient_first,
// 				     rxchan_0_writeClient_deq,
// 				     rxchan_0_writeClient_notEmpty,
// 				     rxchan_0_next_first,
// 				     rxchan_0_next_deq,
// 				     rxchan_0_next_notEmpty,
// 				     rxchan_0_verbose_enq,
// 				     rxchan_0_verbose_notFull,
// 				     rxchan_1_macRx_put,
// 				     rxchan_1_writeClient_first,
// 				     rxchan_1_writeClient_deq,
// 				     rxchan_1_writeClient_notEmpty,
// 				     rxchan_1_next_first,
// 				     rxchan_1_next_deq,
// 				     rxchan_1_next_notEmpty,
// 				     rxchan_1_verbose_enq,
// 				     rxchan_1_verbose_notFull,
// 				     hostchan_0_writeServer_enq,
// 				     hostchan_0_writeServer_notFull,
// 				     hostchan_0_writeClient_first,
// 				     hostchan_0_writeClient_deq,
// 				     hostchan_0_writeClient_notEmpty,
// 				     hostchan_0_next_first,
// 				     hostchan_0_next_notEmpty,
// 				     hostchan_0_verbose_enq,
// 				     hostchan_0_verbose_notFull,
// 				     txchan_0_writeServer_enq,
// 				     txchan_0_writeServer_notFull,
// 				     txchan_0_macTx_get,
// 				     txchan_0_verbose_enq,
// 				     txchan_0_verbose_notFull,
// 				     txchan_1_writeServer_enq,
// 				     txchan_1_writeServer_notFull,
// 				     txchan_1_macTx_get,
// 				     txchan_1_verbose_enq,
// 				     txchan_1_verbose_notFull,
// 				     prev_0_enq,
// 				     prev_0_notFull,
// 				     prev_1_enq,
// 				     prev_1_notFull,
// 				     prev_2_enq,
// 				     prev_2_notFull,
// 				     set_verbosity );
// schedule hostchan_0_next_first  SB ( hostchan_0_next_deq );
//
// schedule hostchan_0_next_deq  CF ( rxchan_0_macRx_put,
// 				   rxchan_0_writeClient_first,
// 				   rxchan_0_writeClient_deq,
// 				   rxchan_0_writeClient_notEmpty,
// 				   rxchan_0_next_first,
// 				   rxchan_0_next_deq,
// 				   rxchan_0_next_notEmpty,
// 				   rxchan_0_verbose_enq,
// 				   rxchan_0_verbose_notFull,
// 				   rxchan_1_macRx_put,
// 				   rxchan_1_writeClient_first,
// 				   rxchan_1_writeClient_deq,
// 				   rxchan_1_writeClient_notEmpty,
// 				   rxchan_1_next_first,
// 				   rxchan_1_next_deq,
// 				   rxchan_1_next_notEmpty,
// 				   rxchan_1_verbose_enq,
// 				   rxchan_1_verbose_notFull,
// 				   hostchan_0_writeServer_enq,
// 				   hostchan_0_writeServer_notFull,
// 				   hostchan_0_writeClient_first,
// 				   hostchan_0_writeClient_deq,
// 				   hostchan_0_writeClient_notEmpty,
// 				   hostchan_0_verbose_enq,
// 				   hostchan_0_verbose_notFull,
// 				   txchan_0_writeServer_enq,
// 				   txchan_0_writeServer_notFull,
// 				   txchan_0_macTx_get,
// 				   txchan_0_verbose_enq,
// 				   txchan_0_verbose_notFull,
// 				   txchan_1_writeServer_enq,
// 				   txchan_1_writeServer_notFull,
// 				   txchan_1_macTx_get,
// 				   txchan_1_verbose_enq,
// 				   txchan_1_verbose_notFull,
// 				   prev_0_enq,
// 				   prev_0_notFull,
// 				   prev_1_enq,
// 				   prev_1_notFull,
// 				   prev_2_enq,
// 				   prev_2_notFull,
// 				   set_verbosity );
// schedule hostchan_0_next_deq  C ( hostchan_0_next_deq );
//
// schedule hostchan_0_next_notEmpty  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					set_verbosity );
// schedule hostchan_0_next_notEmpty  SB ( hostchan_0_next_deq );
//
// schedule hostchan_0_verbose_enq  CF ( rxchan_0_macRx_put,
// 				      rxchan_0_writeClient_first,
// 				      rxchan_0_writeClient_deq,
// 				      rxchan_0_writeClient_notEmpty,
// 				      rxchan_0_next_first,
// 				      rxchan_0_next_deq,
// 				      rxchan_0_next_notEmpty,
// 				      rxchan_0_verbose_enq,
// 				      rxchan_0_verbose_notFull,
// 				      rxchan_1_macRx_put,
// 				      rxchan_1_writeClient_first,
// 				      rxchan_1_writeClient_deq,
// 				      rxchan_1_writeClient_notEmpty,
// 				      rxchan_1_next_first,
// 				      rxchan_1_next_deq,
// 				      rxchan_1_next_notEmpty,
// 				      rxchan_1_verbose_enq,
// 				      rxchan_1_verbose_notFull,
// 				      hostchan_0_writeServer_enq,
// 				      hostchan_0_writeServer_notFull,
// 				      hostchan_0_writeClient_first,
// 				      hostchan_0_writeClient_deq,
// 				      hostchan_0_writeClient_notEmpty,
// 				      hostchan_0_next_first,
// 				      hostchan_0_next_deq,
// 				      hostchan_0_next_notEmpty,
// 				      txchan_0_writeServer_enq,
// 				      txchan_0_writeServer_notFull,
// 				      txchan_0_macTx_get,
// 				      txchan_0_verbose_enq,
// 				      txchan_0_verbose_notFull,
// 				      txchan_1_writeServer_enq,
// 				      txchan_1_writeServer_notFull,
// 				      txchan_1_macTx_get,
// 				      txchan_1_verbose_enq,
// 				      txchan_1_verbose_notFull,
// 				      prev_0_enq,
// 				      prev_0_notFull,
// 				      prev_1_enq,
// 				      prev_1_notFull,
// 				      prev_2_enq,
// 				      prev_2_notFull );
// schedule hostchan_0_verbose_enq  C ( hostchan_0_verbose_enq, set_verbosity );
//
// schedule hostchan_0_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					  rxchan_0_writeClient_first,
// 					  rxchan_0_writeClient_deq,
// 					  rxchan_0_writeClient_notEmpty,
// 					  rxchan_0_next_first,
// 					  rxchan_0_next_deq,
// 					  rxchan_0_next_notEmpty,
// 					  rxchan_0_verbose_enq,
// 					  rxchan_0_verbose_notFull,
// 					  rxchan_1_macRx_put,
// 					  rxchan_1_writeClient_first,
// 					  rxchan_1_writeClient_deq,
// 					  rxchan_1_writeClient_notEmpty,
// 					  rxchan_1_next_first,
// 					  rxchan_1_next_deq,
// 					  rxchan_1_next_notEmpty,
// 					  rxchan_1_verbose_enq,
// 					  rxchan_1_verbose_notFull,
// 					  hostchan_0_writeServer_enq,
// 					  hostchan_0_writeServer_notFull,
// 					  hostchan_0_writeClient_first,
// 					  hostchan_0_writeClient_deq,
// 					  hostchan_0_writeClient_notEmpty,
// 					  hostchan_0_next_first,
// 					  hostchan_0_next_deq,
// 					  hostchan_0_next_notEmpty,
// 					  hostchan_0_verbose_notFull,
// 					  txchan_0_writeServer_enq,
// 					  txchan_0_writeServer_notFull,
// 					  txchan_0_macTx_get,
// 					  txchan_0_verbose_enq,
// 					  txchan_0_verbose_notFull,
// 					  txchan_1_writeServer_enq,
// 					  txchan_1_writeServer_notFull,
// 					  txchan_1_macTx_get,
// 					  txchan_1_verbose_enq,
// 					  txchan_1_verbose_notFull,
// 					  prev_0_enq,
// 					  prev_0_notFull,
// 					  prev_1_enq,
// 					  prev_1_notFull,
// 					  prev_2_enq,
// 					  prev_2_notFull );
// schedule hostchan_0_verbose_notFull  SBR ( hostchan_0_verbose_enq,
// 					   set_verbosity );
//
// schedule txchan_0_writeServer_enq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					set_verbosity );
// schedule txchan_0_writeServer_enq  C ( txchan_0_writeServer_enq );
//
// schedule txchan_0_writeServer_notFull  CF ( rxchan_0_macRx_put,
// 					    rxchan_0_writeClient_first,
// 					    rxchan_0_writeClient_deq,
// 					    rxchan_0_writeClient_notEmpty,
// 					    rxchan_0_next_first,
// 					    rxchan_0_next_deq,
// 					    rxchan_0_next_notEmpty,
// 					    rxchan_0_verbose_enq,
// 					    rxchan_0_verbose_notFull,
// 					    rxchan_1_macRx_put,
// 					    rxchan_1_writeClient_first,
// 					    rxchan_1_writeClient_deq,
// 					    rxchan_1_writeClient_notEmpty,
// 					    rxchan_1_next_first,
// 					    rxchan_1_next_deq,
// 					    rxchan_1_next_notEmpty,
// 					    rxchan_1_verbose_enq,
// 					    rxchan_1_verbose_notFull,
// 					    hostchan_0_writeServer_enq,
// 					    hostchan_0_writeServer_notFull,
// 					    hostchan_0_writeClient_first,
// 					    hostchan_0_writeClient_deq,
// 					    hostchan_0_writeClient_notEmpty,
// 					    hostchan_0_next_first,
// 					    hostchan_0_next_deq,
// 					    hostchan_0_next_notEmpty,
// 					    hostchan_0_verbose_enq,
// 					    hostchan_0_verbose_notFull,
// 					    txchan_0_writeServer_notFull,
// 					    txchan_0_macTx_get,
// 					    txchan_0_verbose_enq,
// 					    txchan_0_verbose_notFull,
// 					    txchan_1_writeServer_enq,
// 					    txchan_1_writeServer_notFull,
// 					    txchan_1_macTx_get,
// 					    txchan_1_verbose_enq,
// 					    txchan_1_verbose_notFull,
// 					    prev_0_enq,
// 					    prev_0_notFull,
// 					    prev_1_enq,
// 					    prev_1_notFull,
// 					    prev_2_enq,
// 					    prev_2_notFull,
// 					    set_verbosity );
// schedule txchan_0_writeServer_notFull  SB ( txchan_0_writeServer_enq );
//
// schedule txchan_0_macTx_get  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_macTx_get,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  set_verbosity );
// schedule txchan_0_macTx_get  C ( txchan_0_macTx_get );
//
// schedule txchan_0_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    txchan_1_verbose_enq,
// 				    txchan_1_verbose_notFull,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull );
// schedule txchan_0_verbose_enq  C ( txchan_0_verbose_enq, set_verbosity );
//
// schedule txchan_0_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull );
// schedule txchan_0_verbose_notFull  SB ( txchan_0_verbose_enq, set_verbosity );
//
// schedule txchan_1_writeServer_enq  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_enq,
// 					txchan_1_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull,
// 					set_verbosity );
// schedule txchan_1_writeServer_enq  C ( txchan_1_writeServer_enq );
//
// schedule txchan_1_writeServer_notFull  CF ( rxchan_0_macRx_put,
// 					    rxchan_0_writeClient_first,
// 					    rxchan_0_writeClient_deq,
// 					    rxchan_0_writeClient_notEmpty,
// 					    rxchan_0_next_first,
// 					    rxchan_0_next_deq,
// 					    rxchan_0_next_notEmpty,
// 					    rxchan_0_verbose_enq,
// 					    rxchan_0_verbose_notFull,
// 					    rxchan_1_macRx_put,
// 					    rxchan_1_writeClient_first,
// 					    rxchan_1_writeClient_deq,
// 					    rxchan_1_writeClient_notEmpty,
// 					    rxchan_1_next_first,
// 					    rxchan_1_next_deq,
// 					    rxchan_1_next_notEmpty,
// 					    rxchan_1_verbose_enq,
// 					    rxchan_1_verbose_notFull,
// 					    hostchan_0_writeServer_enq,
// 					    hostchan_0_writeServer_notFull,
// 					    hostchan_0_writeClient_first,
// 					    hostchan_0_writeClient_deq,
// 					    hostchan_0_writeClient_notEmpty,
// 					    hostchan_0_next_first,
// 					    hostchan_0_next_deq,
// 					    hostchan_0_next_notEmpty,
// 					    hostchan_0_verbose_enq,
// 					    hostchan_0_verbose_notFull,
// 					    txchan_0_writeServer_enq,
// 					    txchan_0_writeServer_notFull,
// 					    txchan_0_macTx_get,
// 					    txchan_0_verbose_enq,
// 					    txchan_0_verbose_notFull,
// 					    txchan_1_writeServer_notFull,
// 					    txchan_1_macTx_get,
// 					    txchan_1_verbose_enq,
// 					    txchan_1_verbose_notFull,
// 					    prev_0_enq,
// 					    prev_0_notFull,
// 					    prev_1_enq,
// 					    prev_1_notFull,
// 					    prev_2_enq,
// 					    prev_2_notFull,
// 					    set_verbosity );
// schedule txchan_1_writeServer_notFull  SB ( txchan_1_writeServer_enq );
//
// schedule txchan_1_macTx_get  CF ( rxchan_0_macRx_put,
// 				  rxchan_0_writeClient_first,
// 				  rxchan_0_writeClient_deq,
// 				  rxchan_0_writeClient_notEmpty,
// 				  rxchan_0_next_first,
// 				  rxchan_0_next_deq,
// 				  rxchan_0_next_notEmpty,
// 				  rxchan_0_verbose_enq,
// 				  rxchan_0_verbose_notFull,
// 				  rxchan_1_macRx_put,
// 				  rxchan_1_writeClient_first,
// 				  rxchan_1_writeClient_deq,
// 				  rxchan_1_writeClient_notEmpty,
// 				  rxchan_1_next_first,
// 				  rxchan_1_next_deq,
// 				  rxchan_1_next_notEmpty,
// 				  rxchan_1_verbose_enq,
// 				  rxchan_1_verbose_notFull,
// 				  hostchan_0_writeServer_enq,
// 				  hostchan_0_writeServer_notFull,
// 				  hostchan_0_writeClient_first,
// 				  hostchan_0_writeClient_deq,
// 				  hostchan_0_writeClient_notEmpty,
// 				  hostchan_0_next_first,
// 				  hostchan_0_next_deq,
// 				  hostchan_0_next_notEmpty,
// 				  hostchan_0_verbose_enq,
// 				  hostchan_0_verbose_notFull,
// 				  txchan_0_writeServer_enq,
// 				  txchan_0_writeServer_notFull,
// 				  txchan_0_macTx_get,
// 				  txchan_0_verbose_enq,
// 				  txchan_0_verbose_notFull,
// 				  txchan_1_writeServer_enq,
// 				  txchan_1_writeServer_notFull,
// 				  txchan_1_verbose_enq,
// 				  txchan_1_verbose_notFull,
// 				  prev_0_enq,
// 				  prev_0_notFull,
// 				  prev_1_enq,
// 				  prev_1_notFull,
// 				  prev_2_enq,
// 				  prev_2_notFull,
// 				  set_verbosity );
// schedule txchan_1_macTx_get  C ( txchan_1_macTx_get );
//
// schedule txchan_1_verbose_enq  CF ( rxchan_0_macRx_put,
// 				    rxchan_0_writeClient_first,
// 				    rxchan_0_writeClient_deq,
// 				    rxchan_0_writeClient_notEmpty,
// 				    rxchan_0_next_first,
// 				    rxchan_0_next_deq,
// 				    rxchan_0_next_notEmpty,
// 				    rxchan_0_verbose_enq,
// 				    rxchan_0_verbose_notFull,
// 				    rxchan_1_macRx_put,
// 				    rxchan_1_writeClient_first,
// 				    rxchan_1_writeClient_deq,
// 				    rxchan_1_writeClient_notEmpty,
// 				    rxchan_1_next_first,
// 				    rxchan_1_next_deq,
// 				    rxchan_1_next_notEmpty,
// 				    rxchan_1_verbose_enq,
// 				    rxchan_1_verbose_notFull,
// 				    hostchan_0_writeServer_enq,
// 				    hostchan_0_writeServer_notFull,
// 				    hostchan_0_writeClient_first,
// 				    hostchan_0_writeClient_deq,
// 				    hostchan_0_writeClient_notEmpty,
// 				    hostchan_0_next_first,
// 				    hostchan_0_next_deq,
// 				    hostchan_0_next_notEmpty,
// 				    hostchan_0_verbose_enq,
// 				    hostchan_0_verbose_notFull,
// 				    txchan_0_writeServer_enq,
// 				    txchan_0_writeServer_notFull,
// 				    txchan_0_macTx_get,
// 				    txchan_0_verbose_enq,
// 				    txchan_0_verbose_notFull,
// 				    txchan_1_writeServer_enq,
// 				    txchan_1_writeServer_notFull,
// 				    txchan_1_macTx_get,
// 				    prev_0_enq,
// 				    prev_0_notFull,
// 				    prev_1_enq,
// 				    prev_1_notFull,
// 				    prev_2_enq,
// 				    prev_2_notFull );
// schedule txchan_1_verbose_enq  C ( txchan_1_verbose_enq, set_verbosity );
//
// schedule txchan_1_verbose_notFull  CF ( rxchan_0_macRx_put,
// 					rxchan_0_writeClient_first,
// 					rxchan_0_writeClient_deq,
// 					rxchan_0_writeClient_notEmpty,
// 					rxchan_0_next_first,
// 					rxchan_0_next_deq,
// 					rxchan_0_next_notEmpty,
// 					rxchan_0_verbose_enq,
// 					rxchan_0_verbose_notFull,
// 					rxchan_1_macRx_put,
// 					rxchan_1_writeClient_first,
// 					rxchan_1_writeClient_deq,
// 					rxchan_1_writeClient_notEmpty,
// 					rxchan_1_next_first,
// 					rxchan_1_next_deq,
// 					rxchan_1_next_notEmpty,
// 					rxchan_1_verbose_enq,
// 					rxchan_1_verbose_notFull,
// 					hostchan_0_writeServer_enq,
// 					hostchan_0_writeServer_notFull,
// 					hostchan_0_writeClient_first,
// 					hostchan_0_writeClient_deq,
// 					hostchan_0_writeClient_notEmpty,
// 					hostchan_0_next_first,
// 					hostchan_0_next_deq,
// 					hostchan_0_next_notEmpty,
// 					hostchan_0_verbose_enq,
// 					hostchan_0_verbose_notFull,
// 					txchan_0_writeServer_enq,
// 					txchan_0_writeServer_notFull,
// 					txchan_0_macTx_get,
// 					txchan_0_verbose_enq,
// 					txchan_0_verbose_notFull,
// 					txchan_1_writeServer_enq,
// 					txchan_1_writeServer_notFull,
// 					txchan_1_macTx_get,
// 					txchan_1_verbose_notFull,
// 					prev_0_enq,
// 					prev_0_notFull,
// 					prev_1_enq,
// 					prev_1_notFull,
// 					prev_2_enq,
// 					prev_2_notFull );
// schedule txchan_1_verbose_notFull  SB ( txchan_1_verbose_enq, set_verbosity );
//
// schedule prev_0_enq  CF ( rxchan_0_macRx_put,
// 			  rxchan_0_writeClient_first,
// 			  rxchan_0_writeClient_deq,
// 			  rxchan_0_writeClient_notEmpty,
// 			  rxchan_0_next_first,
// 			  rxchan_0_next_deq,
// 			  rxchan_0_next_notEmpty,
// 			  rxchan_0_verbose_enq,
// 			  rxchan_0_verbose_notFull,
// 			  rxchan_1_macRx_put,
// 			  rxchan_1_writeClient_first,
// 			  rxchan_1_writeClient_deq,
// 			  rxchan_1_writeClient_notEmpty,
// 			  rxchan_1_next_first,
// 			  rxchan_1_next_deq,
// 			  rxchan_1_next_notEmpty,
// 			  rxchan_1_verbose_enq,
// 			  rxchan_1_verbose_notFull,
// 			  hostchan_0_writeServer_enq,
// 			  hostchan_0_writeServer_notFull,
// 			  hostchan_0_writeClient_first,
// 			  hostchan_0_writeClient_deq,
// 			  hostchan_0_writeClient_notEmpty,
// 			  hostchan_0_next_first,
// 			  hostchan_0_next_deq,
// 			  hostchan_0_next_notEmpty,
// 			  hostchan_0_verbose_enq,
// 			  hostchan_0_verbose_notFull,
// 			  txchan_0_writeServer_enq,
// 			  txchan_0_writeServer_notFull,
// 			  txchan_0_macTx_get,
// 			  txchan_0_verbose_enq,
// 			  txchan_0_verbose_notFull,
// 			  txchan_1_writeServer_enq,
// 			  txchan_1_writeServer_notFull,
// 			  txchan_1_macTx_get,
// 			  txchan_1_verbose_enq,
// 			  txchan_1_verbose_notFull,
// 			  prev_1_enq,
// 			  prev_1_notFull,
// 			  prev_2_enq,
// 			  prev_2_notFull,
// 			  set_verbosity );
// schedule prev_0_enq  C ( prev_0_enq );
//
// schedule prev_0_notFull  CF ( rxchan_0_macRx_put,
// 			      rxchan_0_writeClient_first,
// 			      rxchan_0_writeClient_deq,
// 			      rxchan_0_writeClient_notEmpty,
// 			      rxchan_0_next_first,
// 			      rxchan_0_next_deq,
// 			      rxchan_0_next_notEmpty,
// 			      rxchan_0_verbose_enq,
// 			      rxchan_0_verbose_notFull,
// 			      rxchan_1_macRx_put,
// 			      rxchan_1_writeClient_first,
// 			      rxchan_1_writeClient_deq,
// 			      rxchan_1_writeClient_notEmpty,
// 			      rxchan_1_next_first,
// 			      rxchan_1_next_deq,
// 			      rxchan_1_next_notEmpty,
// 			      rxchan_1_verbose_enq,
// 			      rxchan_1_verbose_notFull,
// 			      hostchan_0_writeServer_enq,
// 			      hostchan_0_writeServer_notFull,
// 			      hostchan_0_writeClient_first,
// 			      hostchan_0_writeClient_deq,
// 			      hostchan_0_writeClient_notEmpty,
// 			      hostchan_0_next_first,
// 			      hostchan_0_next_deq,
// 			      hostchan_0_next_notEmpty,
// 			      hostchan_0_verbose_enq,
// 			      hostchan_0_verbose_notFull,
// 			      txchan_0_writeServer_enq,
// 			      txchan_0_writeServer_notFull,
// 			      txchan_0_macTx_get,
// 			      txchan_0_verbose_enq,
// 			      txchan_0_verbose_notFull,
// 			      txchan_1_writeServer_enq,
// 			      txchan_1_writeServer_notFull,
// 			      txchan_1_macTx_get,
// 			      txchan_1_verbose_enq,
// 			      txchan_1_verbose_notFull,
// 			      prev_0_notFull,
// 			      prev_1_enq,
// 			      prev_1_notFull,
// 			      prev_2_enq,
// 			      prev_2_notFull,
// 			      set_verbosity );
// schedule prev_0_notFull  SB ( prev_0_enq );
//
// schedule prev_1_enq  CF ( rxchan_0_macRx_put,
// 			  rxchan_0_writeClient_first,
// 			  rxchan_0_writeClient_deq,
// 			  rxchan_0_writeClient_notEmpty,
// 			  rxchan_0_next_first,
// 			  rxchan_0_next_deq,
// 			  rxchan_0_next_notEmpty,
// 			  rxchan_0_verbose_enq,
// 			  rxchan_0_verbose_notFull,
// 			  rxchan_1_macRx_put,
// 			  rxchan_1_writeClient_first,
// 			  rxchan_1_writeClient_deq,
// 			  rxchan_1_writeClient_notEmpty,
// 			  rxchan_1_next_first,
// 			  rxchan_1_next_deq,
// 			  rxchan_1_next_notEmpty,
// 			  rxchan_1_verbose_enq,
// 			  rxchan_1_verbose_notFull,
// 			  hostchan_0_writeServer_enq,
// 			  hostchan_0_writeServer_notFull,
// 			  hostchan_0_writeClient_first,
// 			  hostchan_0_writeClient_deq,
// 			  hostchan_0_writeClient_notEmpty,
// 			  hostchan_0_next_first,
// 			  hostchan_0_next_deq,
// 			  hostchan_0_next_notEmpty,
// 			  hostchan_0_verbose_enq,
// 			  hostchan_0_verbose_notFull,
// 			  txchan_0_writeServer_enq,
// 			  txchan_0_writeServer_notFull,
// 			  txchan_0_macTx_get,
// 			  txchan_0_verbose_enq,
// 			  txchan_0_verbose_notFull,
// 			  txchan_1_writeServer_enq,
// 			  txchan_1_writeServer_notFull,
// 			  txchan_1_macTx_get,
// 			  txchan_1_verbose_enq,
// 			  txchan_1_verbose_notFull,
// 			  prev_0_enq,
// 			  prev_0_notFull,
// 			  prev_2_enq,
// 			  prev_2_notFull,
// 			  set_verbosity );
// schedule prev_1_enq  C ( prev_1_enq );
//
// schedule prev_1_notFull  CF ( rxchan_0_macRx_put,
// 			      rxchan_0_writeClient_first,
// 			      rxchan_0_writeClient_deq,
// 			      rxchan_0_writeClient_notEmpty,
// 			      rxchan_0_next_first,
// 			      rxchan_0_next_deq,
// 			      rxchan_0_next_notEmpty,
// 			      rxchan_0_verbose_enq,
// 			      rxchan_0_verbose_notFull,
// 			      rxchan_1_macRx_put,
// 			      rxchan_1_writeClient_first,
// 			      rxchan_1_writeClient_deq,
// 			      rxchan_1_writeClient_notEmpty,
// 			      rxchan_1_next_first,
// 			      rxchan_1_next_deq,
// 			      rxchan_1_next_notEmpty,
// 			      rxchan_1_verbose_enq,
// 			      rxchan_1_verbose_notFull,
// 			      hostchan_0_writeServer_enq,
// 			      hostchan_0_writeServer_notFull,
// 			      hostchan_0_writeClient_first,
// 			      hostchan_0_writeClient_deq,
// 			      hostchan_0_writeClient_notEmpty,
// 			      hostchan_0_next_first,
// 			      hostchan_0_next_deq,
// 			      hostchan_0_next_notEmpty,
// 			      hostchan_0_verbose_enq,
// 			      hostchan_0_verbose_notFull,
// 			      txchan_0_writeServer_enq,
// 			      txchan_0_writeServer_notFull,
// 			      txchan_0_macTx_get,
// 			      txchan_0_verbose_enq,
// 			      txchan_0_verbose_notFull,
// 			      txchan_1_writeServer_enq,
// 			      txchan_1_writeServer_notFull,
// 			      txchan_1_macTx_get,
// 			      txchan_1_verbose_enq,
// 			      txchan_1_verbose_notFull,
// 			      prev_0_enq,
// 			      prev_0_notFull,
// 			      prev_1_notFull,
// 			      prev_2_enq,
// 			      prev_2_notFull,
// 			      set_verbosity );
// schedule prev_1_notFull  SB ( prev_1_enq );
//
// schedule prev_2_enq  CF ( rxchan_0_macRx_put,
// 			  rxchan_0_writeClient_first,
// 			  rxchan_0_writeClient_deq,
// 			  rxchan_0_writeClient_notEmpty,
// 			  rxchan_0_next_first,
// 			  rxchan_0_next_deq,
// 			  rxchan_0_next_notEmpty,
// 			  rxchan_0_verbose_enq,
// 			  rxchan_0_verbose_notFull,
// 			  rxchan_1_macRx_put,
// 			  rxchan_1_writeClient_first,
// 			  rxchan_1_writeClient_deq,
// 			  rxchan_1_writeClient_notEmpty,
// 			  rxchan_1_next_first,
// 			  rxchan_1_next_deq,
// 			  rxchan_1_next_notEmpty,
// 			  rxchan_1_verbose_enq,
// 			  rxchan_1_verbose_notFull,
// 			  hostchan_0_writeServer_enq,
// 			  hostchan_0_writeServer_notFull,
// 			  hostchan_0_writeClient_first,
// 			  hostchan_0_writeClient_deq,
// 			  hostchan_0_writeClient_notEmpty,
// 			  hostchan_0_next_first,
// 			  hostchan_0_next_deq,
// 			  hostchan_0_next_notEmpty,
// 			  hostchan_0_verbose_enq,
// 			  hostchan_0_verbose_notFull,
// 			  txchan_0_writeServer_enq,
// 			  txchan_0_writeServer_notFull,
// 			  txchan_0_macTx_get,
// 			  txchan_0_verbose_enq,
// 			  txchan_0_verbose_notFull,
// 			  txchan_1_writeServer_enq,
// 			  txchan_1_writeServer_notFull,
// 			  txchan_1_macTx_get,
// 			  txchan_1_verbose_enq,
// 			  txchan_1_verbose_notFull,
// 			  prev_0_enq,
// 			  prev_0_notFull,
// 			  prev_1_enq,
// 			  prev_1_notFull,
// 			  set_verbosity );
// schedule prev_2_enq  C ( prev_2_enq );
//
// schedule prev_2_notFull  CF ( rxchan_0_macRx_put,
// 			      rxchan_0_writeClient_first,
// 			      rxchan_0_writeClient_deq,
// 			      rxchan_0_writeClient_notEmpty,
// 			      rxchan_0_next_first,
// 			      rxchan_0_next_deq,
// 			      rxchan_0_next_notEmpty,
// 			      rxchan_0_verbose_enq,
// 			      rxchan_0_verbose_notFull,
// 			      rxchan_1_macRx_put,
// 			      rxchan_1_writeClient_first,
// 			      rxchan_1_writeClient_deq,
// 			      rxchan_1_writeClient_notEmpty,
// 			      rxchan_1_next_first,
// 			      rxchan_1_next_deq,
// 			      rxchan_1_next_notEmpty,
// 			      rxchan_1_verbose_enq,
// 			      rxchan_1_verbose_notFull,
// 			      hostchan_0_writeServer_enq,
// 			      hostchan_0_writeServer_notFull,
// 			      hostchan_0_writeClient_first,
// 			      hostchan_0_writeClient_deq,
// 			      hostchan_0_writeClient_notEmpty,
// 			      hostchan_0_next_first,
// 			      hostchan_0_next_deq,
// 			      hostchan_0_next_notEmpty,
// 			      hostchan_0_verbose_enq,
// 			      hostchan_0_verbose_notFull,
// 			      txchan_0_writeServer_enq,
// 			      txchan_0_writeServer_notFull,
// 			      txchan_0_macTx_get,
// 			      txchan_0_verbose_enq,
// 			      txchan_0_verbose_notFull,
// 			      txchan_1_writeServer_enq,
// 			      txchan_1_writeServer_notFull,
// 			      txchan_1_macTx_get,
// 			      txchan_1_verbose_enq,
// 			      txchan_1_verbose_notFull,
// 			      prev_0_enq,
// 			      prev_0_notFull,
// 			      prev_1_enq,
// 			      prev_1_notFull,
// 			      prev_2_notFull,
// 			      set_verbosity );
// schedule prev_2_notFull  SB ( prev_2_enq );
//
// schedule set_verbosity  CF ( rxchan_0_macRx_put,
// 			     rxchan_0_writeClient_first,
// 			     rxchan_0_writeClient_deq,
// 			     rxchan_0_writeClient_notEmpty,
// 			     rxchan_0_next_first,
// 			     rxchan_0_next_deq,
// 			     rxchan_0_next_notEmpty,
// 			     rxchan_1_macRx_put,
// 			     rxchan_1_writeClient_first,
// 			     rxchan_1_writeClient_deq,
// 			     rxchan_1_writeClient_notEmpty,
// 			     rxchan_1_next_first,
// 			     rxchan_1_next_deq,
// 			     rxchan_1_next_notEmpty,
// 			     hostchan_0_writeServer_enq,
// 			     hostchan_0_writeServer_notFull,
// 			     hostchan_0_writeClient_first,
// 			     hostchan_0_writeClient_deq,
// 			     hostchan_0_writeClient_notEmpty,
// 			     hostchan_0_next_first,
// 			     hostchan_0_next_deq,
// 			     hostchan_0_next_notEmpty,
// 			     txchan_0_writeServer_enq,
// 			     txchan_0_writeServer_notFull,
// 			     txchan_0_macTx_get,
// 			     txchan_1_writeServer_enq,
// 			     txchan_1_writeServer_notFull,
// 			     txchan_1_macTx_get,
// 			     prev_0_enq,
// 			     prev_0_notFull,
// 			     prev_1_enq,
// 			     prev_1_notFull,
// 			     prev_2_enq,
// 			     prev_2_notFull );
// schedule set_verbosity  C ( rxchan_0_verbose_enq,
// 			    rxchan_1_verbose_enq,
// 			    hostchan_0_verbose_enq,
// 			    txchan_0_verbose_enq,
// 			    txchan_1_verbose_enq,
// 			    set_verbosity );
//
//
// Ports:
// Name                         I/O  size props
// RDY_rxchan_0_macRx_put         O     1 reg
// rxchan_0_writeClient_first     O   178 reg
// RDY_rxchan_0_writeClient_first  O     1 reg
// RDY_rxchan_0_writeClient_deq   O     1 reg
// rxchan_0_writeClient_notEmpty  O     1 reg
// RDY_rxchan_0_writeClient_notEmpty  O     1 const
// rxchan_0_next_first            O   782 reg
// RDY_rxchan_0_next_first        O     1 reg
// RDY_rxchan_0_next_deq          O     1 reg
// rxchan_0_next_notEmpty         O     1 reg
// RDY_rxchan_0_next_notEmpty     O     1 const
// RDY_rxchan_0_verbose_enq       O     1 reg
// rxchan_0_verbose_notFull       O     1 reg
// RDY_rxchan_0_verbose_notFull   O     1 const
// RDY_rxchan_1_macRx_put         O     1 reg
// rxchan_1_writeClient_first     O   178 reg
// RDY_rxchan_1_writeClient_first  O     1 reg
// RDY_rxchan_1_writeClient_deq   O     1 reg
// rxchan_1_writeClient_notEmpty  O     1 reg
// RDY_rxchan_1_writeClient_notEmpty  O     1 const
// rxchan_1_next_first            O   782 reg
// RDY_rxchan_1_next_first        O     1 reg
// RDY_rxchan_1_next_deq          O     1 reg
// rxchan_1_next_notEmpty         O     1 reg
// RDY_rxchan_1_next_notEmpty     O     1 const
// RDY_rxchan_1_verbose_enq       O     1 reg
// rxchan_1_verbose_notFull       O     1 reg
// RDY_rxchan_1_verbose_notFull   O     1 const
// RDY_hostchan_0_writeServer_enq  O     1 reg
// hostchan_0_writeServer_notFull  O     1 reg
// RDY_hostchan_0_writeServer_notFull  O     1 const
// hostchan_0_writeClient_first   O   178 reg
// RDY_hostchan_0_writeClient_first  O     1 reg
// RDY_hostchan_0_writeClient_deq  O     1 reg
// hostchan_0_writeClient_notEmpty  O     1 reg
// RDY_hostchan_0_writeClient_notEmpty  O     1 const
// hostchan_0_next_first          O   782 reg
// RDY_hostchan_0_next_first      O     1 reg
// RDY_hostchan_0_next_deq        O     1 reg
// hostchan_0_next_notEmpty       O     1 reg
// RDY_hostchan_0_next_notEmpty   O     1 const
// RDY_hostchan_0_verbose_enq     O     1 reg
// hostchan_0_verbose_notFull     O     1 reg
// RDY_hostchan_0_verbose_notFull  O     1 const
// RDY_txchan_0_writeServer_enq   O     1 reg
// txchan_0_writeServer_notFull   O     1 reg
// RDY_txchan_0_writeServer_notFull  O     1 const
// txchan_0_macTx_get             O   106 reg
// RDY_txchan_0_macTx_get         O     1 reg
// RDY_txchan_0_verbose_enq       O     1 reg
// txchan_0_verbose_notFull       O     1 reg
// RDY_txchan_0_verbose_notFull   O     1 const
// RDY_txchan_1_writeServer_enq   O     1 reg
// txchan_1_writeServer_notFull   O     1 reg
// RDY_txchan_1_writeServer_notFull  O     1 const
// txchan_1_macTx_get             O   106 reg
// RDY_txchan_1_macTx_get         O     1 reg
// RDY_txchan_1_verbose_enq       O     1 reg
// txchan_1_verbose_notFull       O     1 reg
// RDY_txchan_1_verbose_notFull   O     1 const
// RDY_prev_0_enq                 O     1 reg
// prev_0_notFull                 O     1 reg
// RDY_prev_0_notFull             O     1 const
// RDY_prev_1_enq                 O     1 reg
// prev_1_notFull                 O     1 reg
// RDY_prev_1_notFull             O     1 const
// RDY_prev_2_enq                 O     1 reg
// prev_2_notFull                 O     1 reg
// RDY_prev_2_notFull             O     1 const
// RDY_set_verbosity              O     1
// CLK_p0                         I     1 clock
// RST_N_p1                       I     1 reset
// CLK_p2                         I     1 clock
// RST_N_p3                       I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// rxchan_0_macRx_put             I   106 reg
// rxchan_0_verbose_enq_v         I    32
// rxchan_1_macRx_put             I   106 reg
// rxchan_1_verbose_enq_v         I    32
// hostchan_0_writeServer_enq_v   I   178 reg
// hostchan_0_verbose_enq_v       I    32
// txchan_0_writeServer_enq_v     I   178
// txchan_0_verbose_enq_v         I    32
// txchan_1_writeServer_enq_v     I   178
// txchan_1_verbose_enq_v         I    32
// prev_0_enq_v                   I   782 reg
// prev_1_enq_v                   I   782 reg
// prev_2_enq_v                   I   782 reg
// set_verbosity_verbosity        I    32
// EN_rxchan_0_macRx_put          I     1
// EN_rxchan_0_writeClient_deq    I     1
// EN_rxchan_0_next_deq           I     1
// EN_rxchan_0_verbose_enq        I     1
// EN_rxchan_1_macRx_put          I     1
// EN_rxchan_1_writeClient_deq    I     1
// EN_rxchan_1_next_deq           I     1
// EN_rxchan_1_verbose_enq        I     1
// EN_hostchan_0_writeServer_enq  I     1
// EN_hostchan_0_writeClient_deq  I     1
// EN_hostchan_0_next_deq         I     1
// EN_hostchan_0_verbose_enq      I     1
// EN_txchan_0_writeServer_enq    I     1
// EN_txchan_0_verbose_enq        I     1
// EN_txchan_1_writeServer_enq    I     1
// EN_txchan_1_verbose_enq        I     1
// EN_prev_0_enq                  I     1
// EN_prev_1_enq                  I     1
// EN_prev_2_enq                  I     1
// EN_set_verbosity               I     1
// EN_txchan_0_macTx_get          I     1
// EN_txchan_1_macTx_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkRuntime_2_2_1(CLK_p0,
		       RST_N_p1,
		       CLK_p2,
		       RST_N_p3,
		       CLK,
		       RST_N,

		       rxchan_0_macRx_put,
		       EN_rxchan_0_macRx_put,
		       RDY_rxchan_0_macRx_put,

		       rxchan_0_writeClient_first,
		       RDY_rxchan_0_writeClient_first,

		       EN_rxchan_0_writeClient_deq,
		       RDY_rxchan_0_writeClient_deq,

		       rxchan_0_writeClient_notEmpty,
		       RDY_rxchan_0_writeClient_notEmpty,

		       rxchan_0_next_first,
		       RDY_rxchan_0_next_first,

		       EN_rxchan_0_next_deq,
		       RDY_rxchan_0_next_deq,

		       rxchan_0_next_notEmpty,
		       RDY_rxchan_0_next_notEmpty,

		       rxchan_0_verbose_enq_v,
		       EN_rxchan_0_verbose_enq,
		       RDY_rxchan_0_verbose_enq,

		       rxchan_0_verbose_notFull,
		       RDY_rxchan_0_verbose_notFull,

		       rxchan_1_macRx_put,
		       EN_rxchan_1_macRx_put,
		       RDY_rxchan_1_macRx_put,

		       rxchan_1_writeClient_first,
		       RDY_rxchan_1_writeClient_first,

		       EN_rxchan_1_writeClient_deq,
		       RDY_rxchan_1_writeClient_deq,

		       rxchan_1_writeClient_notEmpty,
		       RDY_rxchan_1_writeClient_notEmpty,

		       rxchan_1_next_first,
		       RDY_rxchan_1_next_first,

		       EN_rxchan_1_next_deq,
		       RDY_rxchan_1_next_deq,

		       rxchan_1_next_notEmpty,
		       RDY_rxchan_1_next_notEmpty,

		       rxchan_1_verbose_enq_v,
		       EN_rxchan_1_verbose_enq,
		       RDY_rxchan_1_verbose_enq,

		       rxchan_1_verbose_notFull,
		       RDY_rxchan_1_verbose_notFull,

		       hostchan_0_writeServer_enq_v,
		       EN_hostchan_0_writeServer_enq,
		       RDY_hostchan_0_writeServer_enq,

		       hostchan_0_writeServer_notFull,
		       RDY_hostchan_0_writeServer_notFull,

		       hostchan_0_writeClient_first,
		       RDY_hostchan_0_writeClient_first,

		       EN_hostchan_0_writeClient_deq,
		       RDY_hostchan_0_writeClient_deq,

		       hostchan_0_writeClient_notEmpty,
		       RDY_hostchan_0_writeClient_notEmpty,

		       hostchan_0_next_first,
		       RDY_hostchan_0_next_first,

		       EN_hostchan_0_next_deq,
		       RDY_hostchan_0_next_deq,

		       hostchan_0_next_notEmpty,
		       RDY_hostchan_0_next_notEmpty,

		       hostchan_0_verbose_enq_v,
		       EN_hostchan_0_verbose_enq,
		       RDY_hostchan_0_verbose_enq,

		       hostchan_0_verbose_notFull,
		       RDY_hostchan_0_verbose_notFull,

		       txchan_0_writeServer_enq_v,
		       EN_txchan_0_writeServer_enq,
		       RDY_txchan_0_writeServer_enq,

		       txchan_0_writeServer_notFull,
		       RDY_txchan_0_writeServer_notFull,

		       EN_txchan_0_macTx_get,
		       txchan_0_macTx_get,
		       RDY_txchan_0_macTx_get,

		       txchan_0_verbose_enq_v,
		       EN_txchan_0_verbose_enq,
		       RDY_txchan_0_verbose_enq,

		       txchan_0_verbose_notFull,
		       RDY_txchan_0_verbose_notFull,

		       txchan_1_writeServer_enq_v,
		       EN_txchan_1_writeServer_enq,
		       RDY_txchan_1_writeServer_enq,

		       txchan_1_writeServer_notFull,
		       RDY_txchan_1_writeServer_notFull,

		       EN_txchan_1_macTx_get,
		       txchan_1_macTx_get,
		       RDY_txchan_1_macTx_get,

		       txchan_1_verbose_enq_v,
		       EN_txchan_1_verbose_enq,
		       RDY_txchan_1_verbose_enq,

		       txchan_1_verbose_notFull,
		       RDY_txchan_1_verbose_notFull,

		       prev_0_enq_v,
		       EN_prev_0_enq,
		       RDY_prev_0_enq,

		       prev_0_notFull,
		       RDY_prev_0_notFull,

		       prev_1_enq_v,
		       EN_prev_1_enq,
		       RDY_prev_1_enq,

		       prev_1_notFull,
		       RDY_prev_1_notFull,

		       prev_2_enq_v,
		       EN_prev_2_enq,
		       RDY_prev_2_enq,

		       prev_2_notFull,
		       RDY_prev_2_notFull,

		       set_verbosity_verbosity,
		       EN_set_verbosity,
		       RDY_set_verbosity);
  input  CLK_p0;
  input  RST_N_p1;
  input  CLK_p2;
  input  RST_N_p3;
  input  CLK;
  input  RST_N;

  // action method rxchan_0_macRx_put
  input  [105 : 0] rxchan_0_macRx_put;
  input  EN_rxchan_0_macRx_put;
  output RDY_rxchan_0_macRx_put;

  // value method rxchan_0_writeClient_first
  output [177 : 0] rxchan_0_writeClient_first;
  output RDY_rxchan_0_writeClient_first;

  // action method rxchan_0_writeClient_deq
  input  EN_rxchan_0_writeClient_deq;
  output RDY_rxchan_0_writeClient_deq;

  // value method rxchan_0_writeClient_notEmpty
  output rxchan_0_writeClient_notEmpty;
  output RDY_rxchan_0_writeClient_notEmpty;

  // value method rxchan_0_next_first
  output [781 : 0] rxchan_0_next_first;
  output RDY_rxchan_0_next_first;

  // action method rxchan_0_next_deq
  input  EN_rxchan_0_next_deq;
  output RDY_rxchan_0_next_deq;

  // value method rxchan_0_next_notEmpty
  output rxchan_0_next_notEmpty;
  output RDY_rxchan_0_next_notEmpty;

  // action method rxchan_0_verbose_enq
  input  [31 : 0] rxchan_0_verbose_enq_v;
  input  EN_rxchan_0_verbose_enq;
  output RDY_rxchan_0_verbose_enq;

  // value method rxchan_0_verbose_notFull
  output rxchan_0_verbose_notFull;
  output RDY_rxchan_0_verbose_notFull;

  // action method rxchan_1_macRx_put
  input  [105 : 0] rxchan_1_macRx_put;
  input  EN_rxchan_1_macRx_put;
  output RDY_rxchan_1_macRx_put;

  // value method rxchan_1_writeClient_first
  output [177 : 0] rxchan_1_writeClient_first;
  output RDY_rxchan_1_writeClient_first;

  // action method rxchan_1_writeClient_deq
  input  EN_rxchan_1_writeClient_deq;
  output RDY_rxchan_1_writeClient_deq;

  // value method rxchan_1_writeClient_notEmpty
  output rxchan_1_writeClient_notEmpty;
  output RDY_rxchan_1_writeClient_notEmpty;

  // value method rxchan_1_next_first
  output [781 : 0] rxchan_1_next_first;
  output RDY_rxchan_1_next_first;

  // action method rxchan_1_next_deq
  input  EN_rxchan_1_next_deq;
  output RDY_rxchan_1_next_deq;

  // value method rxchan_1_next_notEmpty
  output rxchan_1_next_notEmpty;
  output RDY_rxchan_1_next_notEmpty;

  // action method rxchan_1_verbose_enq
  input  [31 : 0] rxchan_1_verbose_enq_v;
  input  EN_rxchan_1_verbose_enq;
  output RDY_rxchan_1_verbose_enq;

  // value method rxchan_1_verbose_notFull
  output rxchan_1_verbose_notFull;
  output RDY_rxchan_1_verbose_notFull;

  // action method hostchan_0_writeServer_enq
  input  [177 : 0] hostchan_0_writeServer_enq_v;
  input  EN_hostchan_0_writeServer_enq;
  output RDY_hostchan_0_writeServer_enq;

  // value method hostchan_0_writeServer_notFull
  output hostchan_0_writeServer_notFull;
  output RDY_hostchan_0_writeServer_notFull;

  // value method hostchan_0_writeClient_first
  output [177 : 0] hostchan_0_writeClient_first;
  output RDY_hostchan_0_writeClient_first;

  // action method hostchan_0_writeClient_deq
  input  EN_hostchan_0_writeClient_deq;
  output RDY_hostchan_0_writeClient_deq;

  // value method hostchan_0_writeClient_notEmpty
  output hostchan_0_writeClient_notEmpty;
  output RDY_hostchan_0_writeClient_notEmpty;

  // value method hostchan_0_next_first
  output [781 : 0] hostchan_0_next_first;
  output RDY_hostchan_0_next_first;

  // action method hostchan_0_next_deq
  input  EN_hostchan_0_next_deq;
  output RDY_hostchan_0_next_deq;

  // value method hostchan_0_next_notEmpty
  output hostchan_0_next_notEmpty;
  output RDY_hostchan_0_next_notEmpty;

  // action method hostchan_0_verbose_enq
  input  [31 : 0] hostchan_0_verbose_enq_v;
  input  EN_hostchan_0_verbose_enq;
  output RDY_hostchan_0_verbose_enq;

  // value method hostchan_0_verbose_notFull
  output hostchan_0_verbose_notFull;
  output RDY_hostchan_0_verbose_notFull;

  // action method txchan_0_writeServer_enq
  input  [177 : 0] txchan_0_writeServer_enq_v;
  input  EN_txchan_0_writeServer_enq;
  output RDY_txchan_0_writeServer_enq;

  // value method txchan_0_writeServer_notFull
  output txchan_0_writeServer_notFull;
  output RDY_txchan_0_writeServer_notFull;

  // actionvalue method txchan_0_macTx_get
  input  EN_txchan_0_macTx_get;
  output [105 : 0] txchan_0_macTx_get;
  output RDY_txchan_0_macTx_get;

  // action method txchan_0_verbose_enq
  input  [31 : 0] txchan_0_verbose_enq_v;
  input  EN_txchan_0_verbose_enq;
  output RDY_txchan_0_verbose_enq;

  // value method txchan_0_verbose_notFull
  output txchan_0_verbose_notFull;
  output RDY_txchan_0_verbose_notFull;

  // action method txchan_1_writeServer_enq
  input  [177 : 0] txchan_1_writeServer_enq_v;
  input  EN_txchan_1_writeServer_enq;
  output RDY_txchan_1_writeServer_enq;

  // value method txchan_1_writeServer_notFull
  output txchan_1_writeServer_notFull;
  output RDY_txchan_1_writeServer_notFull;

  // actionvalue method txchan_1_macTx_get
  input  EN_txchan_1_macTx_get;
  output [105 : 0] txchan_1_macTx_get;
  output RDY_txchan_1_macTx_get;

  // action method txchan_1_verbose_enq
  input  [31 : 0] txchan_1_verbose_enq_v;
  input  EN_txchan_1_verbose_enq;
  output RDY_txchan_1_verbose_enq;

  // value method txchan_1_verbose_notFull
  output txchan_1_verbose_notFull;
  output RDY_txchan_1_verbose_notFull;

  // action method prev_0_enq
  input  [781 : 0] prev_0_enq_v;
  input  EN_prev_0_enq;
  output RDY_prev_0_enq;

  // value method prev_0_notFull
  output prev_0_notFull;
  output RDY_prev_0_notFull;

  // action method prev_1_enq
  input  [781 : 0] prev_1_enq_v;
  input  EN_prev_1_enq;
  output RDY_prev_1_enq;

  // value method prev_1_notFull
  output prev_1_notFull;
  output RDY_prev_1_notFull;

  // action method prev_2_enq
  input  [781 : 0] prev_2_enq_v;
  input  EN_prev_2_enq;
  output RDY_prev_2_enq;

  // value method prev_2_notFull
  output prev_2_notFull;
  output RDY_prev_2_notFull;

  // action method set_verbosity
  input  [31 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // signals for module outputs
  wire [781 : 0] hostchan_0_next_first,
		 rxchan_0_next_first,
		 rxchan_1_next_first;
  wire [177 : 0] hostchan_0_writeClient_first,
		 rxchan_0_writeClient_first,
		 rxchan_1_writeClient_first;
  wire [105 : 0] txchan_0_macTx_get, txchan_1_macTx_get;
  wire RDY_hostchan_0_next_deq,
       RDY_hostchan_0_next_first,
       RDY_hostchan_0_next_notEmpty,
       RDY_hostchan_0_verbose_enq,
       RDY_hostchan_0_verbose_notFull,
       RDY_hostchan_0_writeClient_deq,
       RDY_hostchan_0_writeClient_first,
       RDY_hostchan_0_writeClient_notEmpty,
       RDY_hostchan_0_writeServer_enq,
       RDY_hostchan_0_writeServer_notFull,
       RDY_prev_0_enq,
       RDY_prev_0_notFull,
       RDY_prev_1_enq,
       RDY_prev_1_notFull,
       RDY_prev_2_enq,
       RDY_prev_2_notFull,
       RDY_rxchan_0_macRx_put,
       RDY_rxchan_0_next_deq,
       RDY_rxchan_0_next_first,
       RDY_rxchan_0_next_notEmpty,
       RDY_rxchan_0_verbose_enq,
       RDY_rxchan_0_verbose_notFull,
       RDY_rxchan_0_writeClient_deq,
       RDY_rxchan_0_writeClient_first,
       RDY_rxchan_0_writeClient_notEmpty,
       RDY_rxchan_1_macRx_put,
       RDY_rxchan_1_next_deq,
       RDY_rxchan_1_next_first,
       RDY_rxchan_1_next_notEmpty,
       RDY_rxchan_1_verbose_enq,
       RDY_rxchan_1_verbose_notFull,
       RDY_rxchan_1_writeClient_deq,
       RDY_rxchan_1_writeClient_first,
       RDY_rxchan_1_writeClient_notEmpty,
       RDY_set_verbosity,
       RDY_txchan_0_macTx_get,
       RDY_txchan_0_verbose_enq,
       RDY_txchan_0_verbose_notFull,
       RDY_txchan_0_writeServer_enq,
       RDY_txchan_0_writeServer_notFull,
       RDY_txchan_1_macTx_get,
       RDY_txchan_1_verbose_enq,
       RDY_txchan_1_verbose_notFull,
       RDY_txchan_1_writeServer_enq,
       RDY_txchan_1_writeServer_notFull,
       hostchan_0_next_notEmpty,
       hostchan_0_verbose_notFull,
       hostchan_0_writeClient_notEmpty,
       hostchan_0_writeServer_notFull,
       prev_0_notFull,
       prev_1_notFull,
       prev_2_notFull,
       rxchan_0_next_notEmpty,
       rxchan_0_verbose_notFull,
       rxchan_0_writeClient_notEmpty,
       rxchan_1_next_notEmpty,
       rxchan_1_verbose_notFull,
       rxchan_1_writeClient_notEmpty,
       txchan_0_verbose_notFull,
       txchan_0_writeServer_notFull,
       txchan_1_verbose_notFull,
       txchan_1_writeServer_notFull;

  // inlined wires
  wire [177 : 0] pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget,
		 pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget;
  wire [1 : 0] pktBuff_0_memBuffer_serverAdapterB_s1_1_wget,
	       pktBuff_1_memBuffer_serverAdapterB_s1_1_wget;
  wire pktBuff_0_memBuffer_serverAdapterA_outData_enqData_whas,
       pktBuff_0_memBuffer_serverAdapterA_writeWithResp_whas,
       pktBuff_0_memBuffer_serverAdapterB_cnt_1_whas,
       pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas,
       pktBuff_0_memBuffer_serverAdapterB_outData_outData_whas,
       pktBuff_0_memBuffer_serverAdapterB_writeWithResp_whas,
       pktBuff_1_memBuffer_serverAdapterA_outData_enqData_whas,
       pktBuff_1_memBuffer_serverAdapterA_writeWithResp_whas,
       pktBuff_1_memBuffer_serverAdapterB_cnt_1_whas,
       pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas,
       pktBuff_1_memBuffer_serverAdapterB_outData_outData_whas,
       pktBuff_1_memBuffer_serverAdapterB_writeWithResp_whas;

  // register cf_verbosity
  reg [31 : 0] cf_verbosity;
  wire [31 : 0] cf_verbosity_D_IN;
  wire cf_verbosity_EN;

  // register cf_verbosity_0
  reg [31 : 0] cf_verbosity_0;
  wire [31 : 0] cf_verbosity_0_D_IN;
  wire cf_verbosity_0_EN;

  // register cf_verbosity_0_1
  reg [31 : 0] cf_verbosity_0_1;
  wire [31 : 0] cf_verbosity_0_1_D_IN;
  wire cf_verbosity_0_1_EN;

  // register cf_verbosity_0_2
  reg [31 : 0] cf_verbosity_0_2;
  wire [31 : 0] cf_verbosity_0_2_D_IN;
  wire cf_verbosity_0_2_EN;

  // register cf_verbosity_0_3
  reg [31 : 0] cf_verbosity_0_3;
  wire [31 : 0] cf_verbosity_0_3_D_IN;
  wire cf_verbosity_0_3_EN;

  // register cf_verbosity_1
  reg [31 : 0] cf_verbosity_1;
  wire [31 : 0] cf_verbosity_1_D_IN;
  wire cf_verbosity_1_EN;

  // register cf_verbosity_1_1
  reg [31 : 0] cf_verbosity_1_1;
  wire [31 : 0] cf_verbosity_1_1_D_IN;
  wire cf_verbosity_1_1_EN;

  // register cf_verbosity_1_2
  reg [31 : 0] cf_verbosity_1_2;
  wire [31 : 0] cf_verbosity_1_2_D_IN;
  wire cf_verbosity_1_2_EN;

  // register cf_verbosity_2
  reg [31 : 0] cf_verbosity_2;
  wire [31 : 0] cf_verbosity_2_D_IN;
  wire cf_verbosity_2_EN;

  // register hostchan_0_cf_verbosity
  reg [31 : 0] hostchan_0_cf_verbosity;
  wire [31 : 0] hostchan_0_cf_verbosity_D_IN;
  wire hostchan_0_cf_verbosity_EN;

  // register hostchan_0_readStarted
  reg hostchan_0_readStarted;
  wire hostchan_0_readStarted_D_IN, hostchan_0_readStarted_EN;

  // register hostchan_1_cf_verbosity
  reg [31 : 0] hostchan_1_cf_verbosity;
  wire [31 : 0] hostchan_1_cf_verbosity_D_IN;
  wire hostchan_1_cf_verbosity_EN;

  // register hostchan_1_readStarted
  reg hostchan_1_readStarted;
  wire hostchan_1_readStarted_D_IN, hostchan_1_readStarted_EN;

  // register macToRing_0_data_bytes
  reg [63 : 0] macToRing_0_data_bytes;
  wire [63 : 0] macToRing_0_data_bytes_D_IN;
  wire macToRing_0_data_bytes_EN;

  // register macToRing_0_gearbox_data_bytes
  reg [63 : 0] macToRing_0_gearbox_data_bytes;
  wire [63 : 0] macToRing_0_gearbox_data_bytes_D_IN;
  wire macToRing_0_gearbox_data_bytes_EN;

  // register macToRing_0_gearbox_eopCount
  reg [63 : 0] macToRing_0_gearbox_eopCount;
  wire [63 : 0] macToRing_0_gearbox_eopCount_D_IN;
  wire macToRing_0_gearbox_eopCount_EN;

  // register macToRing_0_gearbox_idle_cycles
  reg [63 : 0] macToRing_0_gearbox_idle_cycles;
  wire [63 : 0] macToRing_0_gearbox_idle_cycles_D_IN;
  wire macToRing_0_gearbox_idle_cycles_EN;

  // register macToRing_0_gearbox_inProgress
  reg macToRing_0_gearbox_inProgress;
  wire macToRing_0_gearbox_inProgress_D_IN, macToRing_0_gearbox_inProgress_EN;

  // register macToRing_0_gearbox_oddBeat
  reg macToRing_0_gearbox_oddBeat;
  wire macToRing_0_gearbox_oddBeat_D_IN, macToRing_0_gearbox_oddBeat_EN;

  // register macToRing_0_gearbox_sopCount
  reg [63 : 0] macToRing_0_gearbox_sopCount;
  wire [63 : 0] macToRing_0_gearbox_sopCount_D_IN;
  wire macToRing_0_gearbox_sopCount_EN;

  // register macToRing_0_gearbox_v_prev
  reg [105 : 0] macToRing_0_gearbox_v_prev;
  wire [105 : 0] macToRing_0_gearbox_v_prev_D_IN;
  wire macToRing_0_gearbox_v_prev_EN;

  // register macToRing_0_total_cycles
  reg [63 : 0] macToRing_0_total_cycles;
  wire [63 : 0] macToRing_0_total_cycles_D_IN;
  wire macToRing_0_total_cycles_EN;

  // register macToRing_1_data_bytes
  reg [63 : 0] macToRing_1_data_bytes;
  wire [63 : 0] macToRing_1_data_bytes_D_IN;
  wire macToRing_1_data_bytes_EN;

  // register macToRing_1_gearbox_data_bytes
  reg [63 : 0] macToRing_1_gearbox_data_bytes;
  wire [63 : 0] macToRing_1_gearbox_data_bytes_D_IN;
  wire macToRing_1_gearbox_data_bytes_EN;

  // register macToRing_1_gearbox_eopCount
  reg [63 : 0] macToRing_1_gearbox_eopCount;
  wire [63 : 0] macToRing_1_gearbox_eopCount_D_IN;
  wire macToRing_1_gearbox_eopCount_EN;

  // register macToRing_1_gearbox_idle_cycles
  reg [63 : 0] macToRing_1_gearbox_idle_cycles;
  wire [63 : 0] macToRing_1_gearbox_idle_cycles_D_IN;
  wire macToRing_1_gearbox_idle_cycles_EN;

  // register macToRing_1_gearbox_inProgress
  reg macToRing_1_gearbox_inProgress;
  wire macToRing_1_gearbox_inProgress_D_IN, macToRing_1_gearbox_inProgress_EN;

  // register macToRing_1_gearbox_oddBeat
  reg macToRing_1_gearbox_oddBeat;
  wire macToRing_1_gearbox_oddBeat_D_IN, macToRing_1_gearbox_oddBeat_EN;

  // register macToRing_1_gearbox_sopCount
  reg [63 : 0] macToRing_1_gearbox_sopCount;
  wire [63 : 0] macToRing_1_gearbox_sopCount_D_IN;
  wire macToRing_1_gearbox_sopCount_EN;

  // register macToRing_1_gearbox_v_prev
  reg [105 : 0] macToRing_1_gearbox_v_prev;
  wire [105 : 0] macToRing_1_gearbox_v_prev_D_IN;
  wire macToRing_1_gearbox_v_prev_EN;

  // register macToRing_1_total_cycles
  reg [63 : 0] macToRing_1_total_cycles;
  wire [63 : 0] macToRing_1_total_cycles_D_IN;
  wire macToRing_1_total_cycles_EN;

  // register pktBuff_0_cf_verbosity
  reg [31 : 0] pktBuff_0_cf_verbosity;
  wire [31 : 0] pktBuff_0_cf_verbosity_D_IN;
  wire pktBuff_0_cf_verbosity_EN;

  // register pktBuff_0_cf_verbosity_1
  reg [31 : 0] pktBuff_0_cf_verbosity_1;
  wire [31 : 0] pktBuff_0_cf_verbosity_1_D_IN;
  wire pktBuff_0_cf_verbosity_1_EN;

  // register pktBuff_0_eopDeq
  reg [63 : 0] pktBuff_0_eopDeq;
  wire [63 : 0] pktBuff_0_eopDeq_D_IN;
  wire pktBuff_0_eopDeq_EN;

  // register pktBuff_0_eopEnq
  reg [63 : 0] pktBuff_0_eopEnq;
  wire [63 : 0] pktBuff_0_eopEnq_D_IN;
  wire pktBuff_0_eopEnq_EN;

  // register pktBuff_0_inPacket
  reg pktBuff_0_inPacket;
  wire pktBuff_0_inPacket_D_IN, pktBuff_0_inPacket_EN;

  // register pktBuff_0_memBuffer_serverAdapterA_cnt
  reg [2 : 0] pktBuff_0_memBuffer_serverAdapterA_cnt;
  wire [2 : 0] pktBuff_0_memBuffer_serverAdapterA_cnt_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterA_cnt_EN;

  // register pktBuff_0_memBuffer_serverAdapterA_s1
  reg [1 : 0] pktBuff_0_memBuffer_serverAdapterA_s1;
  wire [1 : 0] pktBuff_0_memBuffer_serverAdapterA_s1_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterA_s1_EN;

  // register pktBuff_0_memBuffer_serverAdapterA_s2
  reg [1 : 0] pktBuff_0_memBuffer_serverAdapterA_s2;
  wire [1 : 0] pktBuff_0_memBuffer_serverAdapterA_s2_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterA_s2_EN;

  // register pktBuff_0_memBuffer_serverAdapterB_cnt
  reg [2 : 0] pktBuff_0_memBuffer_serverAdapterB_cnt;
  wire [2 : 0] pktBuff_0_memBuffer_serverAdapterB_cnt_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterB_cnt_EN;

  // register pktBuff_0_memBuffer_serverAdapterB_s1
  reg [1 : 0] pktBuff_0_memBuffer_serverAdapterB_s1;
  wire [1 : 0] pktBuff_0_memBuffer_serverAdapterB_s1_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterB_s1_EN;

  // register pktBuff_0_memBuffer_serverAdapterB_s2
  reg [1 : 0] pktBuff_0_memBuffer_serverAdapterB_s2;
  wire [1 : 0] pktBuff_0_memBuffer_serverAdapterB_s2_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterB_s2_EN;

  // register pktBuff_0_outPacket
  reg pktBuff_0_outPacket;
  wire pktBuff_0_outPacket_D_IN, pktBuff_0_outPacket_EN;

  // register pktBuff_0_packetLen
  reg [15 : 0] pktBuff_0_packetLen;
  wire [15 : 0] pktBuff_0_packetLen_D_IN;
  wire pktBuff_0_packetLen_EN;

  // register pktBuff_0_rdCurrPtr
  reg [7 : 0] pktBuff_0_rdCurrPtr;
  wire [7 : 0] pktBuff_0_rdCurrPtr_D_IN;
  wire pktBuff_0_rdCurrPtr_EN;

  // register pktBuff_0_readStarted
  reg pktBuff_0_readStarted;
  wire pktBuff_0_readStarted_D_IN, pktBuff_0_readStarted_EN;

  // register pktBuff_0_sopDeq
  reg [63 : 0] pktBuff_0_sopDeq;
  wire [63 : 0] pktBuff_0_sopDeq_D_IN;
  wire pktBuff_0_sopDeq_EN;

  // register pktBuff_0_sopEnq
  reg [63 : 0] pktBuff_0_sopEnq;
  wire [63 : 0] pktBuff_0_sopEnq_D_IN;
  wire pktBuff_0_sopEnq_EN;

  // register pktBuff_0_wrCurrPtr
  reg [7 : 0] pktBuff_0_wrCurrPtr;
  wire [7 : 0] pktBuff_0_wrCurrPtr_D_IN;
  wire pktBuff_0_wrCurrPtr_EN;

  // register pktBuff_1_cf_verbosity
  reg [31 : 0] pktBuff_1_cf_verbosity;
  wire [31 : 0] pktBuff_1_cf_verbosity_D_IN;
  wire pktBuff_1_cf_verbosity_EN;

  // register pktBuff_1_cf_verbosity_1
  reg [31 : 0] pktBuff_1_cf_verbosity_1;
  wire [31 : 0] pktBuff_1_cf_verbosity_1_D_IN;
  wire pktBuff_1_cf_verbosity_1_EN;

  // register pktBuff_1_eopDeq
  reg [63 : 0] pktBuff_1_eopDeq;
  wire [63 : 0] pktBuff_1_eopDeq_D_IN;
  wire pktBuff_1_eopDeq_EN;

  // register pktBuff_1_eopEnq
  reg [63 : 0] pktBuff_1_eopEnq;
  wire [63 : 0] pktBuff_1_eopEnq_D_IN;
  wire pktBuff_1_eopEnq_EN;

  // register pktBuff_1_inPacket
  reg pktBuff_1_inPacket;
  wire pktBuff_1_inPacket_D_IN, pktBuff_1_inPacket_EN;

  // register pktBuff_1_memBuffer_serverAdapterA_cnt
  reg [2 : 0] pktBuff_1_memBuffer_serverAdapterA_cnt;
  wire [2 : 0] pktBuff_1_memBuffer_serverAdapterA_cnt_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterA_cnt_EN;

  // register pktBuff_1_memBuffer_serverAdapterA_s1
  reg [1 : 0] pktBuff_1_memBuffer_serverAdapterA_s1;
  wire [1 : 0] pktBuff_1_memBuffer_serverAdapterA_s1_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterA_s1_EN;

  // register pktBuff_1_memBuffer_serverAdapterA_s2
  reg [1 : 0] pktBuff_1_memBuffer_serverAdapterA_s2;
  wire [1 : 0] pktBuff_1_memBuffer_serverAdapterA_s2_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterA_s2_EN;

  // register pktBuff_1_memBuffer_serverAdapterB_cnt
  reg [2 : 0] pktBuff_1_memBuffer_serverAdapterB_cnt;
  wire [2 : 0] pktBuff_1_memBuffer_serverAdapterB_cnt_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterB_cnt_EN;

  // register pktBuff_1_memBuffer_serverAdapterB_s1
  reg [1 : 0] pktBuff_1_memBuffer_serverAdapterB_s1;
  wire [1 : 0] pktBuff_1_memBuffer_serverAdapterB_s1_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterB_s1_EN;

  // register pktBuff_1_memBuffer_serverAdapterB_s2
  reg [1 : 0] pktBuff_1_memBuffer_serverAdapterB_s2;
  wire [1 : 0] pktBuff_1_memBuffer_serverAdapterB_s2_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterB_s2_EN;

  // register pktBuff_1_outPacket
  reg pktBuff_1_outPacket;
  wire pktBuff_1_outPacket_D_IN, pktBuff_1_outPacket_EN;

  // register pktBuff_1_packetLen
  reg [15 : 0] pktBuff_1_packetLen;
  wire [15 : 0] pktBuff_1_packetLen_D_IN;
  wire pktBuff_1_packetLen_EN;

  // register pktBuff_1_rdCurrPtr
  reg [7 : 0] pktBuff_1_rdCurrPtr;
  wire [7 : 0] pktBuff_1_rdCurrPtr_D_IN;
  wire pktBuff_1_rdCurrPtr_EN;

  // register pktBuff_1_readStarted
  reg pktBuff_1_readStarted;
  wire pktBuff_1_readStarted_D_IN, pktBuff_1_readStarted_EN;

  // register pktBuff_1_sopDeq
  reg [63 : 0] pktBuff_1_sopDeq;
  wire [63 : 0] pktBuff_1_sopDeq_D_IN;
  wire pktBuff_1_sopDeq_EN;

  // register pktBuff_1_sopEnq
  reg [63 : 0] pktBuff_1_sopEnq;
  wire [63 : 0] pktBuff_1_sopEnq_D_IN;
  wire pktBuff_1_sopEnq_EN;

  // register pktBuff_1_wrCurrPtr
  reg [7 : 0] pktBuff_1_wrCurrPtr;
  wire [7 : 0] pktBuff_1_wrCurrPtr_D_IN;
  wire pktBuff_1_wrCurrPtr_EN;

  // register pktBuff_2_cf_verbosity
  reg [31 : 0] pktBuff_2_cf_verbosity;
  wire [31 : 0] pktBuff_2_cf_verbosity_D_IN;
  wire pktBuff_2_cf_verbosity_EN;

  // register pktBuff_2_readStarted
  reg pktBuff_2_readStarted;
  wire pktBuff_2_readStarted_D_IN, pktBuff_2_readStarted_EN;

  // register readStarted_0
  reg readStarted_0;
  wire readStarted_0_D_IN, readStarted_0_EN;

  // register ringToMac_0_cycle_cnt
  reg [63 : 0] ringToMac_0_cycle_cnt;
  wire [63 : 0] ringToMac_0_cycle_cnt_D_IN;
  wire ringToMac_0_cycle_cnt_EN;

  // register ringToMac_0_data_bytes
  reg [63 : 0] ringToMac_0_data_bytes;
  wire [63 : 0] ringToMac_0_data_bytes_D_IN;
  wire ringToMac_0_data_bytes_EN;

  // register ringToMac_0_eopCount
  reg [63 : 0] ringToMac_0_eopCount;
  wire [63 : 0] ringToMac_0_eopCount_D_IN;
  wire ringToMac_0_eopCount_EN;

  // register ringToMac_0_fifoTxData_block0
  reg [211 : 0] ringToMac_0_fifoTxData_block0;
  wire [211 : 0] ringToMac_0_fifoTxData_block0_D_IN;
  wire ringToMac_0_fifoTxData_block0_EN;

  // register ringToMac_0_fifoTxData_block0_status
  reg ringToMac_0_fifoTxData_block0_status;
  wire ringToMac_0_fifoTxData_block0_status_D_IN,
       ringToMac_0_fifoTxData_block0_status_EN;

  // register ringToMac_0_fifoTxData_block1
  reg [211 : 0] ringToMac_0_fifoTxData_block1;
  wire [211 : 0] ringToMac_0_fifoTxData_block1_D_IN;
  wire ringToMac_0_fifoTxData_block1_EN;

  // register ringToMac_0_fifoTxData_block1_status
  reg ringToMac_0_fifoTxData_block1_status;
  wire ringToMac_0_fifoTxData_block1_status_D_IN,
       ringToMac_0_fifoTxData_block1_status_EN;

  // register ringToMac_0_fifoTxData_dInReset_pre_isInReset
  reg ringToMac_0_fifoTxData_dInReset_pre_isInReset;
  wire ringToMac_0_fifoTxData_dInReset_pre_isInReset_D_IN,
       ringToMac_0_fifoTxData_dInReset_pre_isInReset_EN;

  // register ringToMac_0_fifoTxData_elem0_status_0
  reg ringToMac_0_fifoTxData_elem0_status_0;
  wire ringToMac_0_fifoTxData_elem0_status_0_D_IN,
       ringToMac_0_fifoTxData_elem0_status_0_EN;

  // register ringToMac_0_fifoTxData_elem0_status_1
  reg ringToMac_0_fifoTxData_elem0_status_1;
  wire ringToMac_0_fifoTxData_elem0_status_1_D_IN,
       ringToMac_0_fifoTxData_elem0_status_1_EN;

  // register ringToMac_0_fifoTxData_elem1_status_0
  reg ringToMac_0_fifoTxData_elem1_status_0;
  wire ringToMac_0_fifoTxData_elem1_status_0_D_IN,
       ringToMac_0_fifoTxData_elem1_status_0_EN;

  // register ringToMac_0_fifoTxData_elem1_status_1
  reg ringToMac_0_fifoTxData_elem1_status_1;
  wire ringToMac_0_fifoTxData_elem1_status_1_D_IN,
       ringToMac_0_fifoTxData_elem1_status_1_EN;

  // register ringToMac_0_fifoTxData_read_block
  reg ringToMac_0_fifoTxData_read_block;
  wire ringToMac_0_fifoTxData_read_block_D_IN,
       ringToMac_0_fifoTxData_read_block_EN;

  // register ringToMac_0_fifoTxData_sInReset_pre_isInReset
  reg ringToMac_0_fifoTxData_sInReset_pre_isInReset;
  wire ringToMac_0_fifoTxData_sInReset_pre_isInReset_D_IN,
       ringToMac_0_fifoTxData_sInReset_pre_isInReset_EN;

  // register ringToMac_0_fifoTxData_write_block
  reg ringToMac_0_fifoTxData_write_block;
  wire ringToMac_0_fifoTxData_write_block_D_IN,
       ringToMac_0_fifoTxData_write_block_EN;

  // register ringToMac_0_goodputCount
  reg [63 : 0] ringToMac_0_goodputCount;
  wire [63 : 0] ringToMac_0_goodputCount_D_IN;
  wire ringToMac_0_goodputCount_EN;

  // register ringToMac_0_idleCount
  reg [63 : 0] ringToMac_0_idleCount;
  wire [63 : 0] ringToMac_0_idleCount_D_IN;
  wire ringToMac_0_idleCount_EN;

  // register ringToMac_0_idle_cycles
  reg [63 : 0] ringToMac_0_idle_cycles;
  wire [63 : 0] ringToMac_0_idle_cycles_D_IN;
  wire ringToMac_0_idle_cycles_EN;

  // register ringToMac_0_last_endofpacket
  reg [63 : 0] ringToMac_0_last_endofpacket;
  wire [63 : 0] ringToMac_0_last_endofpacket_D_IN;
  wire ringToMac_0_last_endofpacket_EN;

  // register ringToMac_0_last_startofpacket
  reg [63 : 0] ringToMac_0_last_startofpacket;
  wire [63 : 0] ringToMac_0_last_startofpacket_D_IN;
  wire ringToMac_0_last_startofpacket_EN;

  // register ringToMac_0_sopCount
  reg [63 : 0] ringToMac_0_sopCount;
  wire [63 : 0] ringToMac_0_sopCount_D_IN;
  wire ringToMac_0_sopCount_EN;

  // register ringToMac_0_total_cycles
  reg [63 : 0] ringToMac_0_total_cycles;
  wire [63 : 0] ringToMac_0_total_cycles_D_IN;
  wire ringToMac_0_total_cycles_EN;

  // register ringToMac_1_cycle_cnt
  reg [63 : 0] ringToMac_1_cycle_cnt;
  wire [63 : 0] ringToMac_1_cycle_cnt_D_IN;
  wire ringToMac_1_cycle_cnt_EN;

  // register ringToMac_1_data_bytes
  reg [63 : 0] ringToMac_1_data_bytes;
  wire [63 : 0] ringToMac_1_data_bytes_D_IN;
  wire ringToMac_1_data_bytes_EN;

  // register ringToMac_1_eopCount
  reg [63 : 0] ringToMac_1_eopCount;
  wire [63 : 0] ringToMac_1_eopCount_D_IN;
  wire ringToMac_1_eopCount_EN;

  // register ringToMac_1_fifoTxData_block0
  reg [211 : 0] ringToMac_1_fifoTxData_block0;
  wire [211 : 0] ringToMac_1_fifoTxData_block0_D_IN;
  wire ringToMac_1_fifoTxData_block0_EN;

  // register ringToMac_1_fifoTxData_block0_status
  reg ringToMac_1_fifoTxData_block0_status;
  wire ringToMac_1_fifoTxData_block0_status_D_IN,
       ringToMac_1_fifoTxData_block0_status_EN;

  // register ringToMac_1_fifoTxData_block1
  reg [211 : 0] ringToMac_1_fifoTxData_block1;
  wire [211 : 0] ringToMac_1_fifoTxData_block1_D_IN;
  wire ringToMac_1_fifoTxData_block1_EN;

  // register ringToMac_1_fifoTxData_block1_status
  reg ringToMac_1_fifoTxData_block1_status;
  wire ringToMac_1_fifoTxData_block1_status_D_IN,
       ringToMac_1_fifoTxData_block1_status_EN;

  // register ringToMac_1_fifoTxData_dInReset_pre_isInReset
  reg ringToMac_1_fifoTxData_dInReset_pre_isInReset;
  wire ringToMac_1_fifoTxData_dInReset_pre_isInReset_D_IN,
       ringToMac_1_fifoTxData_dInReset_pre_isInReset_EN;

  // register ringToMac_1_fifoTxData_elem0_status_0
  reg ringToMac_1_fifoTxData_elem0_status_0;
  wire ringToMac_1_fifoTxData_elem0_status_0_D_IN,
       ringToMac_1_fifoTxData_elem0_status_0_EN;

  // register ringToMac_1_fifoTxData_elem0_status_1
  reg ringToMac_1_fifoTxData_elem0_status_1;
  wire ringToMac_1_fifoTxData_elem0_status_1_D_IN,
       ringToMac_1_fifoTxData_elem0_status_1_EN;

  // register ringToMac_1_fifoTxData_elem1_status_0
  reg ringToMac_1_fifoTxData_elem1_status_0;
  wire ringToMac_1_fifoTxData_elem1_status_0_D_IN,
       ringToMac_1_fifoTxData_elem1_status_0_EN;

  // register ringToMac_1_fifoTxData_elem1_status_1
  reg ringToMac_1_fifoTxData_elem1_status_1;
  wire ringToMac_1_fifoTxData_elem1_status_1_D_IN,
       ringToMac_1_fifoTxData_elem1_status_1_EN;

  // register ringToMac_1_fifoTxData_read_block
  reg ringToMac_1_fifoTxData_read_block;
  wire ringToMac_1_fifoTxData_read_block_D_IN,
       ringToMac_1_fifoTxData_read_block_EN;

  // register ringToMac_1_fifoTxData_sInReset_pre_isInReset
  reg ringToMac_1_fifoTxData_sInReset_pre_isInReset;
  wire ringToMac_1_fifoTxData_sInReset_pre_isInReset_D_IN,
       ringToMac_1_fifoTxData_sInReset_pre_isInReset_EN;

  // register ringToMac_1_fifoTxData_write_block
  reg ringToMac_1_fifoTxData_write_block;
  wire ringToMac_1_fifoTxData_write_block_D_IN,
       ringToMac_1_fifoTxData_write_block_EN;

  // register ringToMac_1_goodputCount
  reg [63 : 0] ringToMac_1_goodputCount;
  wire [63 : 0] ringToMac_1_goodputCount_D_IN;
  wire ringToMac_1_goodputCount_EN;

  // register ringToMac_1_idleCount
  reg [63 : 0] ringToMac_1_idleCount;
  wire [63 : 0] ringToMac_1_idleCount_D_IN;
  wire ringToMac_1_idleCount_EN;

  // register ringToMac_1_idle_cycles
  reg [63 : 0] ringToMac_1_idle_cycles;
  wire [63 : 0] ringToMac_1_idle_cycles_D_IN;
  wire ringToMac_1_idle_cycles_EN;

  // register ringToMac_1_last_endofpacket
  reg [63 : 0] ringToMac_1_last_endofpacket;
  wire [63 : 0] ringToMac_1_last_endofpacket_D_IN;
  wire ringToMac_1_last_endofpacket_EN;

  // register ringToMac_1_last_startofpacket
  reg [63 : 0] ringToMac_1_last_startofpacket;
  wire [63 : 0] ringToMac_1_last_startofpacket_D_IN;
  wire ringToMac_1_last_startofpacket_EN;

  // register ringToMac_1_sopCount
  reg [63 : 0] ringToMac_1_sopCount;
  wire [63 : 0] ringToMac_1_sopCount_D_IN;
  wire ringToMac_1_sopCount_EN;

  // register ringToMac_1_total_cycles
  reg [63 : 0] ringToMac_1_total_cycles;
  wire [63 : 0] ringToMac_1_total_cycles_D_IN;
  wire ringToMac_1_total_cycles_EN;

  // register xbar_lower_merges_1_fi0HasPrio
  reg xbar_lower_merges_1_fi0HasPrio;
  reg xbar_lower_merges_1_fi0HasPrio_D_IN;
  wire xbar_lower_merges_1_fi0HasPrio_EN;

  // register xbar_lower_merges_1_routeFrom
  reg [1 : 0] xbar_lower_merges_1_routeFrom;
  wire [1 : 0] xbar_lower_merges_1_routeFrom_D_IN;
  wire xbar_lower_merges_1_routeFrom_EN;

  // register xbar_lower_merges_fi0HasPrio
  reg xbar_lower_merges_fi0HasPrio;
  reg xbar_lower_merges_fi0HasPrio_D_IN;
  wire xbar_lower_merges_fi0HasPrio_EN;

  // register xbar_lower_merges_routeFrom
  reg [1 : 0] xbar_lower_merges_routeFrom;
  wire [1 : 0] xbar_lower_merges_routeFrom_D_IN;
  wire xbar_lower_merges_routeFrom_EN;

  // register xbar_merges_1_fi0HasPrio
  reg xbar_merges_1_fi0HasPrio;
  reg xbar_merges_1_fi0HasPrio_D_IN;
  wire xbar_merges_1_fi0HasPrio_EN;

  // register xbar_merges_1_routeFrom
  reg [1 : 0] xbar_merges_1_routeFrom;
  wire [1 : 0] xbar_merges_1_routeFrom_D_IN;
  wire xbar_merges_1_routeFrom_EN;

  // register xbar_merges_2_fi0HasPrio
  reg xbar_merges_2_fi0HasPrio;
  reg xbar_merges_2_fi0HasPrio_D_IN;
  wire xbar_merges_2_fi0HasPrio_EN;

  // register xbar_merges_2_routeFrom
  reg [1 : 0] xbar_merges_2_routeFrom;
  wire [1 : 0] xbar_merges_2_routeFrom_D_IN;
  wire xbar_merges_2_routeFrom_EN;

  // register xbar_merges_3_fi0HasPrio
  reg xbar_merges_3_fi0HasPrio;
  reg xbar_merges_3_fi0HasPrio_D_IN;
  wire xbar_merges_3_fi0HasPrio_EN;

  // register xbar_merges_3_routeFrom
  reg [1 : 0] xbar_merges_3_routeFrom;
  wire [1 : 0] xbar_merges_3_routeFrom_D_IN;
  wire xbar_merges_3_routeFrom_EN;

  // register xbar_merges_fi0HasPrio
  reg xbar_merges_fi0HasPrio;
  reg xbar_merges_fi0HasPrio_D_IN;
  wire xbar_merges_fi0HasPrio_EN;

  // register xbar_merges_routeFrom
  reg [1 : 0] xbar_merges_routeFrom;
  wire [1 : 0] xbar_merges_routeFrom_D_IN;
  wire xbar_merges_routeFrom_EN;

  // register xbar_upper_merges_1_fi0HasPrio
  reg xbar_upper_merges_1_fi0HasPrio;
  reg xbar_upper_merges_1_fi0HasPrio_D_IN;
  wire xbar_upper_merges_1_fi0HasPrio_EN;

  // register xbar_upper_merges_1_routeFrom
  reg [1 : 0] xbar_upper_merges_1_routeFrom;
  wire [1 : 0] xbar_upper_merges_1_routeFrom_D_IN;
  wire xbar_upper_merges_1_routeFrom_EN;

  // register xbar_upper_merges_fi0HasPrio
  reg xbar_upper_merges_fi0HasPrio;
  reg xbar_upper_merges_fi0HasPrio_D_IN;
  wire xbar_upper_merges_fi0HasPrio_EN;

  // register xbar_upper_merges_routeFrom
  reg [1 : 0] xbar_upper_merges_routeFrom;
  wire [1 : 0] xbar_upper_merges_routeFrom_D_IN;
  wire xbar_upper_merges_routeFrom_EN;

  // ports of submodule gearbox_dn_16_0
  wire [321 : 0] gearbox_dn_16_0_datain_put;
  wire [177 : 0] gearbox_dn_16_0_dataout_get;
  wire gearbox_dn_16_0_EN_datain_put,
       gearbox_dn_16_0_EN_dataout_get,
       gearbox_dn_16_0_RDY_datain_put,
       gearbox_dn_16_0_RDY_dataout_get;

  // ports of submodule gearbox_dn_16_1
  wire [321 : 0] gearbox_dn_16_1_datain_put;
  wire [177 : 0] gearbox_dn_16_1_dataout_get;
  wire gearbox_dn_16_1_EN_datain_put,
       gearbox_dn_16_1_EN_dataout_get,
       gearbox_dn_16_1_RDY_datain_put,
       gearbox_dn_16_1_RDY_dataout_get;

  // ports of submodule gearbox_dn_32_0
  wire [609 : 0] gearbox_dn_32_0_datain_put;
  wire [321 : 0] gearbox_dn_32_0_dataout_get;
  wire gearbox_dn_32_0_EN_datain_put,
       gearbox_dn_32_0_EN_dataout_get,
       gearbox_dn_32_0_RDY_datain_put,
       gearbox_dn_32_0_RDY_dataout_get;

  // ports of submodule gearbox_dn_32_1
  wire [609 : 0] gearbox_dn_32_1_datain_put;
  wire [321 : 0] gearbox_dn_32_1_dataout_get;
  wire gearbox_dn_32_1_EN_datain_put,
       gearbox_dn_32_1_EN_dataout_get,
       gearbox_dn_32_1_RDY_datain_put,
       gearbox_dn_32_1_RDY_dataout_get;

  // ports of submodule gearbox_up_16_0
  wire [321 : 0] gearbox_up_16_0_dataout_get;
  wire [177 : 0] gearbox_up_16_0_datain_put;
  wire gearbox_up_16_0_EN_datain_put,
       gearbox_up_16_0_EN_dataout_get,
       gearbox_up_16_0_RDY_datain_put,
       gearbox_up_16_0_RDY_dataout_get;

  // ports of submodule gearbox_up_16_1
  wire [321 : 0] gearbox_up_16_1_dataout_get;
  wire [177 : 0] gearbox_up_16_1_datain_put;
  wire gearbox_up_16_1_EN_datain_put,
       gearbox_up_16_1_EN_dataout_get,
       gearbox_up_16_1_RDY_datain_put,
       gearbox_up_16_1_RDY_dataout_get;

  // ports of submodule gearbox_up_16_2
  wire [321 : 0] gearbox_up_16_2_dataout_get;
  wire [177 : 0] gearbox_up_16_2_datain_put;
  wire gearbox_up_16_2_EN_datain_put,
       gearbox_up_16_2_EN_dataout_get,
       gearbox_up_16_2_RDY_datain_put,
       gearbox_up_16_2_RDY_dataout_get;

  // ports of submodule gearbox_up_32_0
  wire [609 : 0] gearbox_up_32_0_dataout_get;
  wire [321 : 0] gearbox_up_32_0_datain_put;
  wire gearbox_up_32_0_EN_datain_put,
       gearbox_up_32_0_EN_dataout_get,
       gearbox_up_32_0_RDY_datain_put,
       gearbox_up_32_0_RDY_dataout_get;

  // ports of submodule gearbox_up_32_1
  wire [609 : 0] gearbox_up_32_1_dataout_get;
  wire [321 : 0] gearbox_up_32_1_datain_put;
  wire gearbox_up_32_1_EN_datain_put,
       gearbox_up_32_1_EN_dataout_get,
       gearbox_up_32_1_RDY_datain_put,
       gearbox_up_32_1_RDY_dataout_get;

  // ports of submodule gearbox_up_32_2
  wire [609 : 0] gearbox_up_32_2_dataout_get;
  wire [321 : 0] gearbox_up_32_2_datain_put;
  wire gearbox_up_32_2_EN_datain_put,
       gearbox_up_32_2_EN_dataout_get,
       gearbox_up_32_2_RDY_datain_put,
       gearbox_up_32_2_RDY_dataout_get;

  // ports of submodule hostchan_0_outReqFifo
  wire [781 : 0] hostchan_0_outReqFifo_D_IN, hostchan_0_outReqFifo_D_OUT;
  wire hostchan_0_outReqFifo_CLR,
       hostchan_0_outReqFifo_DEQ,
       hostchan_0_outReqFifo_EMPTY_N,
       hostchan_0_outReqFifo_ENQ,
       hostchan_0_outReqFifo_FULL_N;

  // ports of submodule hostchan_0_parser
  wire [760 : 0] hostchan_0_parser_meta_get;
  wire [177 : 0] hostchan_0_parser_frameIn_put;
  wire [31 : 0] hostchan_0_parser_set_verbosity_verbosity;
  wire hostchan_0_parser_EN_frameIn_put,
       hostchan_0_parser_EN_meta_get,
       hostchan_0_parser_EN_set_verbosity,
       hostchan_0_parser_RDY_frameIn_put,
       hostchan_0_parser_RDY_meta_get;

  // ports of submodule hostchan_0_pktBuff
  wire [177 : 0] hostchan_0_pktBuff_readServer_readData_get,
		 hostchan_0_pktBuff_writeServer_enq_v;
  wire [31 : 0] hostchan_0_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] hostchan_0_pktBuff_readServer_readLen_get,
		hostchan_0_pktBuff_readServer_readReq_put;
  wire hostchan_0_pktBuff_EN_readServer_readData_get,
       hostchan_0_pktBuff_EN_readServer_readLen_get,
       hostchan_0_pktBuff_EN_readServer_readReq_put,
       hostchan_0_pktBuff_EN_set_verbosity,
       hostchan_0_pktBuff_EN_writeServer_enq,
       hostchan_0_pktBuff_RDY_readServer_readData_get,
       hostchan_0_pktBuff_RDY_readServer_readLen_get,
       hostchan_0_pktBuff_RDY_readServer_readReq_put,
       hostchan_0_pktBuff_RDY_writeServer_enq;

  // ports of submodule hostchan_0_pktLenFifo
  wire [15 : 0] hostchan_0_pktLenFifo_D_IN, hostchan_0_pktLenFifo_D_OUT;
  wire hostchan_0_pktLenFifo_CLR,
       hostchan_0_pktLenFifo_DEQ,
       hostchan_0_pktLenFifo_EMPTY_N,
       hostchan_0_pktLenFifo_ENQ,
       hostchan_0_pktLenFifo_FULL_N;

  // ports of submodule hostchan_0_readDataFifo
  wire [177 : 0] hostchan_0_readDataFifo_D_IN, hostchan_0_readDataFifo_D_OUT;
  wire hostchan_0_readDataFifo_CLR,
       hostchan_0_readDataFifo_DEQ,
       hostchan_0_readDataFifo_EMPTY_N,
       hostchan_0_readDataFifo_ENQ,
       hostchan_0_readDataFifo_FULL_N;

  // ports of submodule hostchan_0_readLenFifo
  wire [15 : 0] hostchan_0_readLenFifo_D_IN, hostchan_0_readLenFifo_D_OUT;
  wire hostchan_0_readLenFifo_CLR,
       hostchan_0_readLenFifo_DEQ,
       hostchan_0_readLenFifo_EMPTY_N,
       hostchan_0_readLenFifo_ENQ,
       hostchan_0_readLenFifo_FULL_N;

  // ports of submodule hostchan_0_readReqFifo
  wire [15 : 0] hostchan_0_readReqFifo_D_IN, hostchan_0_readReqFifo_D_OUT;
  wire hostchan_0_readReqFifo_CLR,
       hostchan_0_readReqFifo_DEQ,
       hostchan_0_readReqFifo_EMPTY_N,
       hostchan_0_readReqFifo_ENQ,
       hostchan_0_readReqFifo_FULL_N;

  // ports of submodule hostchan_0_verbose_ff
  wire [31 : 0] hostchan_0_verbose_ff_D_IN, hostchan_0_verbose_ff_D_OUT;
  wire hostchan_0_verbose_ff_CLR,
       hostchan_0_verbose_ff_DEQ,
       hostchan_0_verbose_ff_EMPTY_N,
       hostchan_0_verbose_ff_ENQ;

  // ports of submodule hostchan_0_writeDataFifo
  wire [177 : 0] hostchan_0_writeDataFifo_D_IN,
		 hostchan_0_writeDataFifo_D_OUT;
  wire hostchan_0_writeDataFifo_CLR,
       hostchan_0_writeDataFifo_DEQ,
       hostchan_0_writeDataFifo_EMPTY_N,
       hostchan_0_writeDataFifo_ENQ,
       hostchan_0_writeDataFifo_FULL_N;

  // ports of submodule hostchan_1_outReqFifo
  wire [781 : 0] hostchan_1_outReqFifo_D_IN, hostchan_1_outReqFifo_D_OUT;
  wire hostchan_1_outReqFifo_CLR,
       hostchan_1_outReqFifo_DEQ,
       hostchan_1_outReqFifo_EMPTY_N,
       hostchan_1_outReqFifo_ENQ,
       hostchan_1_outReqFifo_FULL_N;

  // ports of submodule hostchan_1_parser
  wire [760 : 0] hostchan_1_parser_meta_get;
  wire [177 : 0] hostchan_1_parser_frameIn_put;
  wire [31 : 0] hostchan_1_parser_set_verbosity_verbosity;
  wire hostchan_1_parser_EN_frameIn_put,
       hostchan_1_parser_EN_meta_get,
       hostchan_1_parser_EN_set_verbosity,
       hostchan_1_parser_RDY_frameIn_put,
       hostchan_1_parser_RDY_meta_get;

  // ports of submodule hostchan_1_pktBuff
  wire [177 : 0] hostchan_1_pktBuff_readServer_readData_get,
		 hostchan_1_pktBuff_writeServer_enq_v;
  wire [31 : 0] hostchan_1_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] hostchan_1_pktBuff_readServer_readLen_get,
		hostchan_1_pktBuff_readServer_readReq_put;
  wire hostchan_1_pktBuff_EN_readServer_readData_get,
       hostchan_1_pktBuff_EN_readServer_readLen_get,
       hostchan_1_pktBuff_EN_readServer_readReq_put,
       hostchan_1_pktBuff_EN_set_verbosity,
       hostchan_1_pktBuff_EN_writeServer_enq,
       hostchan_1_pktBuff_RDY_readServer_readData_get,
       hostchan_1_pktBuff_RDY_readServer_readLen_get,
       hostchan_1_pktBuff_RDY_readServer_readReq_put,
       hostchan_1_pktBuff_RDY_writeServer_enq;

  // ports of submodule hostchan_1_pktLenFifo
  wire [15 : 0] hostchan_1_pktLenFifo_D_IN, hostchan_1_pktLenFifo_D_OUT;
  wire hostchan_1_pktLenFifo_CLR,
       hostchan_1_pktLenFifo_DEQ,
       hostchan_1_pktLenFifo_EMPTY_N,
       hostchan_1_pktLenFifo_ENQ,
       hostchan_1_pktLenFifo_FULL_N;

  // ports of submodule hostchan_1_readDataFifo
  wire [177 : 0] hostchan_1_readDataFifo_D_IN, hostchan_1_readDataFifo_D_OUT;
  wire hostchan_1_readDataFifo_CLR,
       hostchan_1_readDataFifo_DEQ,
       hostchan_1_readDataFifo_EMPTY_N,
       hostchan_1_readDataFifo_ENQ,
       hostchan_1_readDataFifo_FULL_N;

  // ports of submodule hostchan_1_readLenFifo
  wire [15 : 0] hostchan_1_readLenFifo_D_IN, hostchan_1_readLenFifo_D_OUT;
  wire hostchan_1_readLenFifo_CLR,
       hostchan_1_readLenFifo_DEQ,
       hostchan_1_readLenFifo_EMPTY_N,
       hostchan_1_readLenFifo_ENQ,
       hostchan_1_readLenFifo_FULL_N;

  // ports of submodule hostchan_1_readReqFifo
  wire [15 : 0] hostchan_1_readReqFifo_D_IN, hostchan_1_readReqFifo_D_OUT;
  wire hostchan_1_readReqFifo_CLR,
       hostchan_1_readReqFifo_DEQ,
       hostchan_1_readReqFifo_EMPTY_N,
       hostchan_1_readReqFifo_ENQ,
       hostchan_1_readReqFifo_FULL_N;

  // ports of submodule hostchan_1_verbose_ff
  wire [31 : 0] hostchan_1_verbose_ff_D_IN, hostchan_1_verbose_ff_D_OUT;
  wire hostchan_1_verbose_ff_CLR,
       hostchan_1_verbose_ff_DEQ,
       hostchan_1_verbose_ff_EMPTY_N,
       hostchan_1_verbose_ff_ENQ;

  // ports of submodule hostchan_1_writeDataFifo
  wire [177 : 0] hostchan_1_writeDataFifo_D_IN,
		 hostchan_1_writeDataFifo_D_OUT;
  wire hostchan_1_writeDataFifo_CLR,
       hostchan_1_writeDataFifo_DEQ,
       hostchan_1_writeDataFifo_EMPTY_N,
       hostchan_1_writeDataFifo_ENQ,
       hostchan_1_writeDataFifo_FULL_N;

  // ports of submodule input_queues_0
  wire [609 : 0] input_queues_0_readServer_readData_get,
		 input_queues_0_writeServer_enq_v;
  wire [31 : 0] input_queues_0_set_verbosity_verbosity;
  wire [15 : 0] input_queues_0_readServer_readLen_get,
		input_queues_0_readServer_readReq_put;
  wire input_queues_0_EN_readServer_readData_get,
       input_queues_0_EN_readServer_readLen_get,
       input_queues_0_EN_readServer_readReq_put,
       input_queues_0_EN_set_verbosity,
       input_queues_0_EN_writeServer_enq,
       input_queues_0_RDY_readServer_readData_get,
       input_queues_0_RDY_readServer_readLen_get,
       input_queues_0_RDY_readServer_readReq_put,
       input_queues_0_RDY_writeServer_enq;

  // ports of submodule input_queues_1
  wire [609 : 0] input_queues_1_readServer_readData_get,
		 input_queues_1_writeServer_enq_v;
  wire [31 : 0] input_queues_1_set_verbosity_verbosity;
  wire [15 : 0] input_queues_1_readServer_readLen_get,
		input_queues_1_readServer_readReq_put;
  wire input_queues_1_EN_readServer_readData_get,
       input_queues_1_EN_readServer_readLen_get,
       input_queues_1_EN_readServer_readReq_put,
       input_queues_1_EN_set_verbosity,
       input_queues_1_EN_writeServer_enq,
       input_queues_1_RDY_readServer_readData_get,
       input_queues_1_RDY_readServer_readLen_get,
       input_queues_1_RDY_readServer_readReq_put,
       input_queues_1_RDY_writeServer_enq;

  // ports of submodule input_queues_2
  wire [609 : 0] input_queues_2_readServer_readData_get,
		 input_queues_2_writeServer_enq_v;
  wire [31 : 0] input_queues_2_set_verbosity_verbosity;
  wire [15 : 0] input_queues_2_readServer_readLen_get,
		input_queues_2_readServer_readReq_put;
  wire input_queues_2_EN_readServer_readData_get,
       input_queues_2_EN_readServer_readLen_get,
       input_queues_2_EN_readServer_readReq_put,
       input_queues_2_EN_set_verbosity,
       input_queues_2_EN_writeServer_enq,
       input_queues_2_RDY_readServer_readData_get,
       input_queues_2_RDY_readServer_readLen_get,
       input_queues_2_RDY_readServer_readReq_put,
       input_queues_2_RDY_writeServer_enq;

  // ports of submodule localReset
  wire localReset_OUT_RST;

  // ports of submodule macToRing_0_gearbox_in_ff
  wire [105 : 0] macToRing_0_gearbox_in_ff_D_IN,
		 macToRing_0_gearbox_in_ff_D_OUT;
  wire macToRing_0_gearbox_in_ff_CLR,
       macToRing_0_gearbox_in_ff_DEQ,
       macToRing_0_gearbox_in_ff_EMPTY_N,
       macToRing_0_gearbox_in_ff_ENQ,
       macToRing_0_gearbox_in_ff_FULL_N;

  // ports of submodule macToRing_0_gearbox_out_ff
  wire [177 : 0] macToRing_0_gearbox_out_ff_D_IN,
		 macToRing_0_gearbox_out_ff_D_OUT;
  wire macToRing_0_gearbox_out_ff_CLR,
       macToRing_0_gearbox_out_ff_DEQ,
       macToRing_0_gearbox_out_ff_EMPTY_N,
       macToRing_0_gearbox_out_ff_ENQ,
       macToRing_0_gearbox_out_ff_FULL_N;

  // ports of submodule macToRing_0_writeDataFifo
  wire [177 : 0] macToRing_0_writeDataFifo_dD_OUT,
		 macToRing_0_writeDataFifo_sD_IN;
  wire macToRing_0_writeDataFifo_dDEQ,
       macToRing_0_writeDataFifo_dEMPTY_N,
       macToRing_0_writeDataFifo_sENQ,
       macToRing_0_writeDataFifo_sFULL_N;

  // ports of submodule macToRing_1_gearbox_in_ff
  wire [105 : 0] macToRing_1_gearbox_in_ff_D_IN,
		 macToRing_1_gearbox_in_ff_D_OUT;
  wire macToRing_1_gearbox_in_ff_CLR,
       macToRing_1_gearbox_in_ff_DEQ,
       macToRing_1_gearbox_in_ff_EMPTY_N,
       macToRing_1_gearbox_in_ff_ENQ,
       macToRing_1_gearbox_in_ff_FULL_N;

  // ports of submodule macToRing_1_gearbox_out_ff
  wire [177 : 0] macToRing_1_gearbox_out_ff_D_IN,
		 macToRing_1_gearbox_out_ff_D_OUT;
  wire macToRing_1_gearbox_out_ff_CLR,
       macToRing_1_gearbox_out_ff_DEQ,
       macToRing_1_gearbox_out_ff_EMPTY_N,
       macToRing_1_gearbox_out_ff_ENQ,
       macToRing_1_gearbox_out_ff_FULL_N;

  // ports of submodule macToRing_1_writeDataFifo
  wire [177 : 0] macToRing_1_writeDataFifo_dD_OUT,
		 macToRing_1_writeDataFifo_sD_IN;
  wire macToRing_1_writeDataFifo_dDEQ,
       macToRing_1_writeDataFifo_dEMPTY_N,
       macToRing_1_writeDataFifo_sENQ,
       macToRing_1_writeDataFifo_sFULL_N;

  // ports of submodule meta_ff_0
  wire [781 : 0] meta_ff_0_D_IN, meta_ff_0_D_OUT;
  wire meta_ff_0_CLR,
       meta_ff_0_DEQ,
       meta_ff_0_EMPTY_N,
       meta_ff_0_ENQ,
       meta_ff_0_FULL_N;

  // ports of submodule meta_ff_0_1
  wire [781 : 0] meta_ff_0_1_D_IN, meta_ff_0_1_D_OUT;
  wire meta_ff_0_1_CLR,
       meta_ff_0_1_DEQ,
       meta_ff_0_1_EMPTY_N,
       meta_ff_0_1_ENQ,
       meta_ff_0_1_FULL_N;

  // ports of submodule meta_ff_1
  wire [781 : 0] meta_ff_1_D_IN, meta_ff_1_D_OUT;
  wire meta_ff_1_CLR,
       meta_ff_1_DEQ,
       meta_ff_1_EMPTY_N,
       meta_ff_1_ENQ,
       meta_ff_1_FULL_N;

  // ports of submodule meta_ff_1_1
  wire [781 : 0] meta_ff_1_1_D_IN, meta_ff_1_1_D_OUT;
  wire meta_ff_1_1_CLR,
       meta_ff_1_1_DEQ,
       meta_ff_1_1_EMPTY_N,
       meta_ff_1_1_ENQ,
       meta_ff_1_1_FULL_N;

  // ports of submodule meta_ff_2
  wire [781 : 0] meta_ff_2_D_IN, meta_ff_2_D_OUT;
  wire meta_ff_2_CLR,
       meta_ff_2_DEQ,
       meta_ff_2_EMPTY_N,
       meta_ff_2_ENQ,
       meta_ff_2_FULL_N;

  // ports of submodule meta_ff_2_1
  wire [781 : 0] meta_ff_2_1_D_IN, meta_ff_2_1_D_OUT;
  wire meta_ff_2_1_CLR,
       meta_ff_2_1_DEQ,
       meta_ff_2_1_EMPTY_N,
       meta_ff_2_1_ENQ,
       meta_ff_2_1_FULL_N;

  // ports of submodule modifier_0
  wire [781 : 0] modifier_0_prev_enq_v;
  wire [177 : 0] modifier_0_writeClient_first, modifier_0_writeServer_enq_v;
  wire [31 : 0] modifier_0_set_verbosity_verbosity;
  wire modifier_0_EN_prev_enq,
       modifier_0_EN_set_verbosity,
       modifier_0_EN_writeClient_deq,
       modifier_0_EN_writeServer_enq,
       modifier_0_RDY_prev_enq,
       modifier_0_RDY_writeClient_deq,
       modifier_0_RDY_writeClient_first,
       modifier_0_RDY_writeServer_enq;

  // ports of submodule modifier_1
  wire [781 : 0] modifier_1_prev_enq_v;
  wire [177 : 0] modifier_1_writeClient_first, modifier_1_writeServer_enq_v;
  wire [31 : 0] modifier_1_set_verbosity_verbosity;
  wire modifier_1_EN_prev_enq,
       modifier_1_EN_set_verbosity,
       modifier_1_EN_writeClient_deq,
       modifier_1_EN_writeServer_enq,
       modifier_1_RDY_prev_enq,
       modifier_1_RDY_writeClient_deq,
       modifier_1_RDY_writeClient_first,
       modifier_1_RDY_writeServer_enq;

  // ports of submodule modifier_2
  wire [781 : 0] modifier_2_prev_enq_v;
  wire [177 : 0] modifier_2_writeClient_first, modifier_2_writeServer_enq_v;
  wire [31 : 0] modifier_2_set_verbosity_verbosity;
  wire modifier_2_EN_prev_enq,
       modifier_2_EN_set_verbosity,
       modifier_2_EN_writeClient_deq,
       modifier_2_EN_writeServer_enq,
       modifier_2_RDY_prev_enq,
       modifier_2_RDY_writeClient_deq,
       modifier_2_RDY_writeClient_first,
       modifier_2_RDY_writeServer_enq;

  // ports of submodule outReqFifo_0
  wire [781 : 0] outReqFifo_0_D_IN, outReqFifo_0_D_OUT;
  wire outReqFifo_0_CLR,
       outReqFifo_0_DEQ,
       outReqFifo_0_EMPTY_N,
       outReqFifo_0_ENQ,
       outReqFifo_0_FULL_N;

  // ports of submodule output_queues_0
  wire [609 : 0] output_queues_0_readServer_readData_get,
		 output_queues_0_writeServer_enq_v;
  wire [31 : 0] output_queues_0_set_verbosity_verbosity;
  wire [15 : 0] output_queues_0_readServer_readLen_get,
		output_queues_0_readServer_readReq_put;
  wire output_queues_0_EN_readServer_readData_get,
       output_queues_0_EN_readServer_readLen_get,
       output_queues_0_EN_readServer_readReq_put,
       output_queues_0_EN_set_verbosity,
       output_queues_0_EN_writeServer_enq,
       output_queues_0_RDY_readServer_readData_get,
       output_queues_0_RDY_readServer_readLen_get,
       output_queues_0_RDY_readServer_readReq_put,
       output_queues_0_RDY_writeServer_enq;

  // ports of submodule output_queues_1
  wire [609 : 0] output_queues_1_readServer_readData_get,
		 output_queues_1_writeServer_enq_v;
  wire [31 : 0] output_queues_1_set_verbosity_verbosity;
  wire [15 : 0] output_queues_1_readServer_readLen_get,
		output_queues_1_readServer_readReq_put;
  wire output_queues_1_EN_readServer_readData_get,
       output_queues_1_EN_readServer_readLen_get,
       output_queues_1_EN_readServer_readReq_put,
       output_queues_1_EN_set_verbosity,
       output_queues_1_EN_writeServer_enq,
       output_queues_1_RDY_readServer_readData_get,
       output_queues_1_RDY_readServer_readLen_get,
       output_queues_1_RDY_readServer_readReq_put,
       output_queues_1_RDY_writeServer_enq;

  // ports of submodule output_queues_2
  wire [609 : 0] output_queues_2_readServer_readData_get,
		 output_queues_2_writeServer_enq_v;
  wire [31 : 0] output_queues_2_set_verbosity_verbosity;
  wire [15 : 0] output_queues_2_readServer_readLen_get,
		output_queues_2_readServer_readReq_put;
  wire output_queues_2_EN_readServer_readData_get,
       output_queues_2_EN_readServer_readLen_get,
       output_queues_2_EN_readServer_readReq_put,
       output_queues_2_EN_set_verbosity,
       output_queues_2_EN_writeServer_enq,
       output_queues_2_RDY_readServer_readData_get,
       output_queues_2_RDY_readServer_readLen_get,
       output_queues_2_RDY_readServer_readReq_put,
       output_queues_2_RDY_writeServer_enq;

  // ports of submodule output_queues_3
  wire [609 : 0] output_queues_3_readServer_readData_get,
		 output_queues_3_writeServer_enq_v;
  wire [31 : 0] output_queues_3_set_verbosity_verbosity;
  wire [15 : 0] output_queues_3_readServer_readLen_get,
		output_queues_3_readServer_readReq_put;
  wire output_queues_3_EN_readServer_readData_get,
       output_queues_3_EN_readServer_readLen_get,
       output_queues_3_EN_readServer_readReq_put,
       output_queues_3_EN_set_verbosity,
       output_queues_3_EN_writeServer_enq,
       output_queues_3_RDY_readServer_readData_get,
       output_queues_3_RDY_readServer_readLen_get,
       output_queues_3_RDY_readServer_readReq_put,
       output_queues_3_RDY_writeServer_enq;

  // ports of submodule parser_0
  wire [760 : 0] parser_0_meta_get;
  wire [177 : 0] parser_0_frameIn_put;
  wire [31 : 0] parser_0_set_verbosity_verbosity;
  wire parser_0_EN_frameIn_put,
       parser_0_EN_meta_get,
       parser_0_EN_set_verbosity,
       parser_0_RDY_frameIn_put,
       parser_0_RDY_meta_get;

  // ports of submodule pktBuff_0
  wire [177 : 0] pktBuff_0_readServer_readData_get,
		 pktBuff_0_writeServer_enq_v;
  wire [31 : 0] pktBuff_0_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_0_readServer_readLen_get,
		pktBuff_0_readServer_readReq_put;
  wire pktBuff_0_EN_readServer_readData_get,
       pktBuff_0_EN_readServer_readLen_get,
       pktBuff_0_EN_readServer_readReq_put,
       pktBuff_0_EN_set_verbosity,
       pktBuff_0_EN_writeServer_enq,
       pktBuff_0_RDY_readServer_readData_get,
       pktBuff_0_RDY_readServer_readLen_get,
       pktBuff_0_RDY_readServer_readReq_put,
       pktBuff_0_RDY_writeServer_enq,
       pktBuff_0_writeServer_notFull;

  // ports of submodule pktBuff_0_fifoEop
  wire [15 : 0] pktBuff_0_fifoEop_D_IN, pktBuff_0_fifoEop_D_OUT;
  wire pktBuff_0_fifoEop_CLR,
       pktBuff_0_fifoEop_DEQ,
       pktBuff_0_fifoEop_EMPTY_N,
       pktBuff_0_fifoEop_ENQ,
       pktBuff_0_fifoEop_FULL_N;

  // ports of submodule pktBuff_0_fifoLen
  wire [15 : 0] pktBuff_0_fifoLen_D_IN, pktBuff_0_fifoLen_D_OUT;
  wire pktBuff_0_fifoLen_CLR,
       pktBuff_0_fifoLen_DEQ,
       pktBuff_0_fifoLen_EMPTY_N,
       pktBuff_0_fifoLen_ENQ,
       pktBuff_0_fifoLen_FULL_N;

  // ports of submodule pktBuff_0_fifoReadData
  wire [177 : 0] pktBuff_0_fifoReadData_D_IN, pktBuff_0_fifoReadData_D_OUT;
  wire pktBuff_0_fifoReadData_CLR,
       pktBuff_0_fifoReadData_DEQ,
       pktBuff_0_fifoReadData_EMPTY_N,
       pktBuff_0_fifoReadData_ENQ,
       pktBuff_0_fifoReadData_FULL_N;

  // ports of submodule pktBuff_0_fifoReadReq
  wire [15 : 0] pktBuff_0_fifoReadReq_D_IN;
  wire pktBuff_0_fifoReadReq_CLR,
       pktBuff_0_fifoReadReq_DEQ,
       pktBuff_0_fifoReadReq_EMPTY_N,
       pktBuff_0_fifoReadReq_ENQ,
       pktBuff_0_fifoReadReq_FULL_N;

  // ports of submodule pktBuff_0_fifoWriteData
  wire [177 : 0] pktBuff_0_fifoWriteData_D_IN, pktBuff_0_fifoWriteData_D_OUT;
  wire pktBuff_0_fifoWriteData_CLR,
       pktBuff_0_fifoWriteData_DEQ,
       pktBuff_0_fifoWriteData_EMPTY_N,
       pktBuff_0_fifoWriteData_ENQ,
       pktBuff_0_fifoWriteData_FULL_N;

  // ports of submodule pktBuff_0_incomingReqs
  wire [185 : 0] pktBuff_0_incomingReqs_D_IN, pktBuff_0_incomingReqs_D_OUT;
  wire pktBuff_0_incomingReqs_CLR,
       pktBuff_0_incomingReqs_DEQ,
       pktBuff_0_incomingReqs_EMPTY_N,
       pktBuff_0_incomingReqs_ENQ,
       pktBuff_0_incomingReqs_FULL_N;

  // ports of submodule pktBuff_0_memBuffer_memory
  wire [177 : 0] pktBuff_0_memBuffer_memory_DIA,
		 pktBuff_0_memBuffer_memory_DIB,
		 pktBuff_0_memBuffer_memory_DOA,
		 pktBuff_0_memBuffer_memory_DOB;
  wire [7 : 0] pktBuff_0_memBuffer_memory_ADDRA,
	       pktBuff_0_memBuffer_memory_ADDRB;
  wire pktBuff_0_memBuffer_memory_ENA,
       pktBuff_0_memBuffer_memory_ENB,
       pktBuff_0_memBuffer_memory_WEA,
       pktBuff_0_memBuffer_memory_WEB;

  // ports of submodule pktBuff_0_memBuffer_serverAdapterA_outDataCore
  wire [177 : 0] pktBuff_0_memBuffer_serverAdapterA_outDataCore_D_IN;
  wire pktBuff_0_memBuffer_serverAdapterA_outDataCore_CLR,
       pktBuff_0_memBuffer_serverAdapterA_outDataCore_DEQ,
       pktBuff_0_memBuffer_serverAdapterA_outDataCore_ENQ,
       pktBuff_0_memBuffer_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule pktBuff_0_memBuffer_serverAdapterB_outDataCore
  wire [177 : 0] pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_IN,
		 pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_OUT;
  wire pktBuff_0_memBuffer_serverAdapterB_outDataCore_CLR,
       pktBuff_0_memBuffer_serverAdapterB_outDataCore_DEQ,
       pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N,
       pktBuff_0_memBuffer_serverAdapterB_outDataCore_ENQ,
       pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule pktBuff_0_meta_ff
  wire [781 : 0] pktBuff_0_meta_ff_D_IN;
  wire pktBuff_0_meta_ff_CLR,
       pktBuff_0_meta_ff_DEQ,
       pktBuff_0_meta_ff_EMPTY_N,
       pktBuff_0_meta_ff_ENQ,
       pktBuff_0_meta_ff_FULL_N;

  // ports of submodule pktBuff_0_pktBuff
  wire [177 : 0] pktBuff_0_pktBuff_readServer_readData_get,
		 pktBuff_0_pktBuff_writeServer_enq_v;
  wire [31 : 0] pktBuff_0_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_0_pktBuff_readServer_readLen_get,
		pktBuff_0_pktBuff_readServer_readReq_put;
  wire pktBuff_0_pktBuff_EN_readServer_readData_get,
       pktBuff_0_pktBuff_EN_readServer_readLen_get,
       pktBuff_0_pktBuff_EN_readServer_readReq_put,
       pktBuff_0_pktBuff_EN_set_verbosity,
       pktBuff_0_pktBuff_EN_writeServer_enq,
       pktBuff_0_pktBuff_RDY_readServer_readData_get,
       pktBuff_0_pktBuff_RDY_readServer_readLen_get,
       pktBuff_0_pktBuff_RDY_readServer_readReq_put,
       pktBuff_0_pktBuff_RDY_writeServer_enq;

  // ports of submodule pktBuff_0_readDataFifo
  wire [177 : 0] pktBuff_0_readDataFifo_D_IN, pktBuff_0_readDataFifo_D_OUT;
  wire pktBuff_0_readDataFifo_CLR,
       pktBuff_0_readDataFifo_DEQ,
       pktBuff_0_readDataFifo_EMPTY_N,
       pktBuff_0_readDataFifo_ENQ,
       pktBuff_0_readDataFifo_FULL_N;

  // ports of submodule pktBuff_0_readLenFifo
  wire [15 : 0] pktBuff_0_readLenFifo_D_IN, pktBuff_0_readLenFifo_D_OUT;
  wire pktBuff_0_readLenFifo_CLR,
       pktBuff_0_readLenFifo_DEQ,
       pktBuff_0_readLenFifo_EMPTY_N,
       pktBuff_0_readLenFifo_ENQ,
       pktBuff_0_readLenFifo_FULL_N;

  // ports of submodule pktBuff_0_readReqFifo
  wire [15 : 0] pktBuff_0_readReqFifo_D_IN, pktBuff_0_readReqFifo_D_OUT;
  wire pktBuff_0_readReqFifo_CLR,
       pktBuff_0_readReqFifo_DEQ,
       pktBuff_0_readReqFifo_EMPTY_N,
       pktBuff_0_readReqFifo_ENQ,
       pktBuff_0_readReqFifo_FULL_N;

  // ports of submodule pktBuff_0_writeDataFifo
  wire [177 : 0] pktBuff_0_writeDataFifo_D_IN, pktBuff_0_writeDataFifo_D_OUT;
  wire pktBuff_0_writeDataFifo_CLR,
       pktBuff_0_writeDataFifo_DEQ,
       pktBuff_0_writeDataFifo_EMPTY_N,
       pktBuff_0_writeDataFifo_ENQ,
       pktBuff_0_writeDataFifo_FULL_N;

  // ports of submodule pktBuff_1_fifoEop
  wire [15 : 0] pktBuff_1_fifoEop_D_IN, pktBuff_1_fifoEop_D_OUT;
  wire pktBuff_1_fifoEop_CLR,
       pktBuff_1_fifoEop_DEQ,
       pktBuff_1_fifoEop_EMPTY_N,
       pktBuff_1_fifoEop_ENQ,
       pktBuff_1_fifoEop_FULL_N;

  // ports of submodule pktBuff_1_fifoLen
  wire [15 : 0] pktBuff_1_fifoLen_D_IN, pktBuff_1_fifoLen_D_OUT;
  wire pktBuff_1_fifoLen_CLR,
       pktBuff_1_fifoLen_DEQ,
       pktBuff_1_fifoLen_EMPTY_N,
       pktBuff_1_fifoLen_ENQ,
       pktBuff_1_fifoLen_FULL_N;

  // ports of submodule pktBuff_1_fifoReadData
  wire [177 : 0] pktBuff_1_fifoReadData_D_IN, pktBuff_1_fifoReadData_D_OUT;
  wire pktBuff_1_fifoReadData_CLR,
       pktBuff_1_fifoReadData_DEQ,
       pktBuff_1_fifoReadData_EMPTY_N,
       pktBuff_1_fifoReadData_ENQ,
       pktBuff_1_fifoReadData_FULL_N;

  // ports of submodule pktBuff_1_fifoReadReq
  wire [15 : 0] pktBuff_1_fifoReadReq_D_IN;
  wire pktBuff_1_fifoReadReq_CLR,
       pktBuff_1_fifoReadReq_DEQ,
       pktBuff_1_fifoReadReq_EMPTY_N,
       pktBuff_1_fifoReadReq_ENQ,
       pktBuff_1_fifoReadReq_FULL_N;

  // ports of submodule pktBuff_1_fifoWriteData
  wire [177 : 0] pktBuff_1_fifoWriteData_D_IN, pktBuff_1_fifoWriteData_D_OUT;
  wire pktBuff_1_fifoWriteData_CLR,
       pktBuff_1_fifoWriteData_DEQ,
       pktBuff_1_fifoWriteData_EMPTY_N,
       pktBuff_1_fifoWriteData_ENQ,
       pktBuff_1_fifoWriteData_FULL_N;

  // ports of submodule pktBuff_1_incomingReqs
  wire [185 : 0] pktBuff_1_incomingReqs_D_IN, pktBuff_1_incomingReqs_D_OUT;
  wire pktBuff_1_incomingReqs_CLR,
       pktBuff_1_incomingReqs_DEQ,
       pktBuff_1_incomingReqs_EMPTY_N,
       pktBuff_1_incomingReqs_ENQ,
       pktBuff_1_incomingReqs_FULL_N;

  // ports of submodule pktBuff_1_memBuffer_memory
  wire [177 : 0] pktBuff_1_memBuffer_memory_DIA,
		 pktBuff_1_memBuffer_memory_DIB,
		 pktBuff_1_memBuffer_memory_DOA,
		 pktBuff_1_memBuffer_memory_DOB;
  wire [7 : 0] pktBuff_1_memBuffer_memory_ADDRA,
	       pktBuff_1_memBuffer_memory_ADDRB;
  wire pktBuff_1_memBuffer_memory_ENA,
       pktBuff_1_memBuffer_memory_ENB,
       pktBuff_1_memBuffer_memory_WEA,
       pktBuff_1_memBuffer_memory_WEB;

  // ports of submodule pktBuff_1_memBuffer_serverAdapterA_outDataCore
  wire [177 : 0] pktBuff_1_memBuffer_serverAdapterA_outDataCore_D_IN;
  wire pktBuff_1_memBuffer_serverAdapterA_outDataCore_CLR,
       pktBuff_1_memBuffer_serverAdapterA_outDataCore_DEQ,
       pktBuff_1_memBuffer_serverAdapterA_outDataCore_ENQ,
       pktBuff_1_memBuffer_serverAdapterA_outDataCore_FULL_N;

  // ports of submodule pktBuff_1_memBuffer_serverAdapterB_outDataCore
  wire [177 : 0] pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_IN,
		 pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_OUT;
  wire pktBuff_1_memBuffer_serverAdapterB_outDataCore_CLR,
       pktBuff_1_memBuffer_serverAdapterB_outDataCore_DEQ,
       pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N,
       pktBuff_1_memBuffer_serverAdapterB_outDataCore_ENQ,
       pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N;

  // ports of submodule pktBuff_1_meta_ff
  wire [781 : 0] pktBuff_1_meta_ff_D_IN;
  wire pktBuff_1_meta_ff_CLR,
       pktBuff_1_meta_ff_DEQ,
       pktBuff_1_meta_ff_EMPTY_N,
       pktBuff_1_meta_ff_ENQ,
       pktBuff_1_meta_ff_FULL_N;

  // ports of submodule pktBuff_1_pktBuff
  wire [177 : 0] pktBuff_1_pktBuff_readServer_readData_get,
		 pktBuff_1_pktBuff_writeServer_enq_v;
  wire [31 : 0] pktBuff_1_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_1_pktBuff_readServer_readLen_get,
		pktBuff_1_pktBuff_readServer_readReq_put;
  wire pktBuff_1_pktBuff_EN_readServer_readData_get,
       pktBuff_1_pktBuff_EN_readServer_readLen_get,
       pktBuff_1_pktBuff_EN_readServer_readReq_put,
       pktBuff_1_pktBuff_EN_set_verbosity,
       pktBuff_1_pktBuff_EN_writeServer_enq,
       pktBuff_1_pktBuff_RDY_readServer_readData_get,
       pktBuff_1_pktBuff_RDY_readServer_readLen_get,
       pktBuff_1_pktBuff_RDY_readServer_readReq_put,
       pktBuff_1_pktBuff_RDY_writeServer_enq;

  // ports of submodule pktBuff_1_readDataFifo
  wire [177 : 0] pktBuff_1_readDataFifo_D_IN, pktBuff_1_readDataFifo_D_OUT;
  wire pktBuff_1_readDataFifo_CLR,
       pktBuff_1_readDataFifo_DEQ,
       pktBuff_1_readDataFifo_EMPTY_N,
       pktBuff_1_readDataFifo_ENQ,
       pktBuff_1_readDataFifo_FULL_N;

  // ports of submodule pktBuff_1_readLenFifo
  wire [15 : 0] pktBuff_1_readLenFifo_D_IN, pktBuff_1_readLenFifo_D_OUT;
  wire pktBuff_1_readLenFifo_CLR,
       pktBuff_1_readLenFifo_DEQ,
       pktBuff_1_readLenFifo_EMPTY_N,
       pktBuff_1_readLenFifo_ENQ,
       pktBuff_1_readLenFifo_FULL_N;

  // ports of submodule pktBuff_1_readReqFifo
  wire [15 : 0] pktBuff_1_readReqFifo_D_IN, pktBuff_1_readReqFifo_D_OUT;
  wire pktBuff_1_readReqFifo_CLR,
       pktBuff_1_readReqFifo_DEQ,
       pktBuff_1_readReqFifo_EMPTY_N,
       pktBuff_1_readReqFifo_ENQ,
       pktBuff_1_readReqFifo_FULL_N;

  // ports of submodule pktBuff_1_writeDataFifo
  wire [177 : 0] pktBuff_1_writeDataFifo_D_IN, pktBuff_1_writeDataFifo_D_OUT;
  wire pktBuff_1_writeDataFifo_CLR,
       pktBuff_1_writeDataFifo_DEQ,
       pktBuff_1_writeDataFifo_EMPTY_N,
       pktBuff_1_writeDataFifo_ENQ,
       pktBuff_1_writeDataFifo_FULL_N;

  // ports of submodule pktBuff_2_meta_ff
  wire [781 : 0] pktBuff_2_meta_ff_D_IN;
  wire pktBuff_2_meta_ff_CLR,
       pktBuff_2_meta_ff_DEQ,
       pktBuff_2_meta_ff_EMPTY_N,
       pktBuff_2_meta_ff_ENQ,
       pktBuff_2_meta_ff_FULL_N;

  // ports of submodule pktBuff_2_pktBuff
  wire [177 : 0] pktBuff_2_pktBuff_readServer_readData_get,
		 pktBuff_2_pktBuff_writeServer_enq_v;
  wire [31 : 0] pktBuff_2_pktBuff_set_verbosity_verbosity;
  wire [15 : 0] pktBuff_2_pktBuff_readServer_readLen_get,
		pktBuff_2_pktBuff_readServer_readReq_put;
  wire pktBuff_2_pktBuff_EN_readServer_readData_get,
       pktBuff_2_pktBuff_EN_readServer_readLen_get,
       pktBuff_2_pktBuff_EN_readServer_readReq_put,
       pktBuff_2_pktBuff_EN_set_verbosity,
       pktBuff_2_pktBuff_EN_writeServer_enq,
       pktBuff_2_pktBuff_RDY_readServer_readData_get,
       pktBuff_2_pktBuff_RDY_readServer_readLen_get,
       pktBuff_2_pktBuff_RDY_readServer_readReq_put,
       pktBuff_2_pktBuff_RDY_writeServer_enq;

  // ports of submodule pktBuff_2_readDataFifo
  wire [177 : 0] pktBuff_2_readDataFifo_D_IN, pktBuff_2_readDataFifo_D_OUT;
  wire pktBuff_2_readDataFifo_CLR,
       pktBuff_2_readDataFifo_DEQ,
       pktBuff_2_readDataFifo_EMPTY_N,
       pktBuff_2_readDataFifo_ENQ,
       pktBuff_2_readDataFifo_FULL_N;

  // ports of submodule pktBuff_2_readLenFifo
  wire [15 : 0] pktBuff_2_readLenFifo_D_IN, pktBuff_2_readLenFifo_D_OUT;
  wire pktBuff_2_readLenFifo_CLR,
       pktBuff_2_readLenFifo_DEQ,
       pktBuff_2_readLenFifo_EMPTY_N,
       pktBuff_2_readLenFifo_ENQ,
       pktBuff_2_readLenFifo_FULL_N;

  // ports of submodule pktBuff_2_readReqFifo
  wire [15 : 0] pktBuff_2_readReqFifo_D_IN, pktBuff_2_readReqFifo_D_OUT;
  wire pktBuff_2_readReqFifo_CLR,
       pktBuff_2_readReqFifo_DEQ,
       pktBuff_2_readReqFifo_EMPTY_N,
       pktBuff_2_readReqFifo_ENQ,
       pktBuff_2_readReqFifo_FULL_N;

  // ports of submodule pktBuff_2_writeDataFifo
  wire [177 : 0] pktBuff_2_writeDataFifo_D_IN, pktBuff_2_writeDataFifo_D_OUT;
  wire pktBuff_2_writeDataFifo_CLR,
       pktBuff_2_writeDataFifo_DEQ,
       pktBuff_2_writeDataFifo_EMPTY_N,
       pktBuff_2_writeDataFifo_ENQ,
       pktBuff_2_writeDataFifo_FULL_N;

  // ports of submodule pktLenFifo_0
  wire [15 : 0] pktLenFifo_0_D_IN, pktLenFifo_0_D_OUT;
  wire pktLenFifo_0_CLR,
       pktLenFifo_0_DEQ,
       pktLenFifo_0_EMPTY_N,
       pktLenFifo_0_ENQ,
       pktLenFifo_0_FULL_N;

  // ports of submodule readDataFifo_0
  wire [177 : 0] readDataFifo_0_D_IN, readDataFifo_0_D_OUT;
  wire readDataFifo_0_CLR,
       readDataFifo_0_DEQ,
       readDataFifo_0_EMPTY_N,
       readDataFifo_0_ENQ,
       readDataFifo_0_FULL_N;

  // ports of submodule readLenFifo_0
  wire [15 : 0] readLenFifo_0_D_IN, readLenFifo_0_D_OUT;
  wire readLenFifo_0_CLR,
       readLenFifo_0_DEQ,
       readLenFifo_0_EMPTY_N,
       readLenFifo_0_ENQ,
       readLenFifo_0_FULL_N;

  // ports of submodule readReqFifo_0
  wire [15 : 0] readReqFifo_0_D_IN, readReqFifo_0_D_OUT;
  wire readReqFifo_0_CLR,
       readReqFifo_0_DEQ,
       readReqFifo_0_EMPTY_N,
       readReqFifo_0_ENQ,
       readReqFifo_0_FULL_N;

  // ports of submodule ringToMac_0_fifoTxData_dCombinedReset
  wire ringToMac_0_fifoTxData_dCombinedReset_RST_OUT;

  // ports of submodule ringToMac_0_fifoTxData_dCrossedsReset
  wire ringToMac_0_fifoTxData_dCrossedsReset_OUT_RST;

  // ports of submodule ringToMac_0_fifoTxData_sCombinedReset
  wire ringToMac_0_fifoTxData_sCombinedReset_RST_OUT;

  // ports of submodule ringToMac_0_fifoTxData_sCrosseddReset
  wire ringToMac_0_fifoTxData_sCrosseddReset_OUT_RST;

  // ports of submodule ringToMac_0_readDataFifo
  wire [177 : 0] ringToMac_0_readDataFifo_D_IN,
		 ringToMac_0_readDataFifo_D_OUT;
  wire ringToMac_0_readDataFifo_CLR,
       ringToMac_0_readDataFifo_DEQ,
       ringToMac_0_readDataFifo_EMPTY_N,
       ringToMac_0_readDataFifo_ENQ,
       ringToMac_0_readDataFifo_FULL_N;

  // ports of submodule ringToMac_0_readLenFifo
  wire [15 : 0] ringToMac_0_readLenFifo_D_IN, ringToMac_0_readLenFifo_D_OUT;
  wire ringToMac_0_readLenFifo_CLR,
       ringToMac_0_readLenFifo_DEQ,
       ringToMac_0_readLenFifo_EMPTY_N,
       ringToMac_0_readLenFifo_ENQ,
       ringToMac_0_readLenFifo_FULL_N;

  // ports of submodule ringToMac_0_readReqFifo
  wire [15 : 0] ringToMac_0_readReqFifo_D_IN, ringToMac_0_readReqFifo_D_OUT;
  wire ringToMac_0_readReqFifo_CLR,
       ringToMac_0_readReqFifo_DEQ,
       ringToMac_0_readReqFifo_EMPTY_N,
       ringToMac_0_readReqFifo_ENQ,
       ringToMac_0_readReqFifo_FULL_N;

  // ports of submodule ringToMac_0_tx_fifo
  wire [177 : 0] ringToMac_0_tx_fifo_dD_OUT, ringToMac_0_tx_fifo_sD_IN;
  wire ringToMac_0_tx_fifo_dDEQ,
       ringToMac_0_tx_fifo_dEMPTY_N,
       ringToMac_0_tx_fifo_sENQ,
       ringToMac_0_tx_fifo_sFULL_N;

  // ports of submodule ringToMac_0_writeMacFifo
  wire [105 : 0] ringToMac_0_writeMacFifo_D_IN,
		 ringToMac_0_writeMacFifo_D_OUT;
  wire ringToMac_0_writeMacFifo_CLR,
       ringToMac_0_writeMacFifo_DEQ,
       ringToMac_0_writeMacFifo_EMPTY_N,
       ringToMac_0_writeMacFifo_ENQ,
       ringToMac_0_writeMacFifo_FULL_N;

  // ports of submodule ringToMac_1_fifoTxData_dCombinedReset
  wire ringToMac_1_fifoTxData_dCombinedReset_RST_OUT;

  // ports of submodule ringToMac_1_fifoTxData_dCrossedsReset
  wire ringToMac_1_fifoTxData_dCrossedsReset_OUT_RST;

  // ports of submodule ringToMac_1_fifoTxData_sCombinedReset
  wire ringToMac_1_fifoTxData_sCombinedReset_RST_OUT;

  // ports of submodule ringToMac_1_fifoTxData_sCrosseddReset
  wire ringToMac_1_fifoTxData_sCrosseddReset_OUT_RST;

  // ports of submodule ringToMac_1_readDataFifo
  wire [177 : 0] ringToMac_1_readDataFifo_D_IN,
		 ringToMac_1_readDataFifo_D_OUT;
  wire ringToMac_1_readDataFifo_CLR,
       ringToMac_1_readDataFifo_DEQ,
       ringToMac_1_readDataFifo_EMPTY_N,
       ringToMac_1_readDataFifo_ENQ,
       ringToMac_1_readDataFifo_FULL_N;

  // ports of submodule ringToMac_1_readLenFifo
  wire [15 : 0] ringToMac_1_readLenFifo_D_IN, ringToMac_1_readLenFifo_D_OUT;
  wire ringToMac_1_readLenFifo_CLR,
       ringToMac_1_readLenFifo_DEQ,
       ringToMac_1_readLenFifo_EMPTY_N,
       ringToMac_1_readLenFifo_ENQ,
       ringToMac_1_readLenFifo_FULL_N;

  // ports of submodule ringToMac_1_readReqFifo
  wire [15 : 0] ringToMac_1_readReqFifo_D_IN, ringToMac_1_readReqFifo_D_OUT;
  wire ringToMac_1_readReqFifo_CLR,
       ringToMac_1_readReqFifo_DEQ,
       ringToMac_1_readReqFifo_EMPTY_N,
       ringToMac_1_readReqFifo_ENQ,
       ringToMac_1_readReqFifo_FULL_N;

  // ports of submodule ringToMac_1_tx_fifo
  wire [177 : 0] ringToMac_1_tx_fifo_dD_OUT, ringToMac_1_tx_fifo_sD_IN;
  wire ringToMac_1_tx_fifo_dDEQ,
       ringToMac_1_tx_fifo_dEMPTY_N,
       ringToMac_1_tx_fifo_sENQ,
       ringToMac_1_tx_fifo_sFULL_N;

  // ports of submodule ringToMac_1_writeMacFifo
  wire [105 : 0] ringToMac_1_writeMacFifo_D_IN,
		 ringToMac_1_writeMacFifo_D_OUT;
  wire ringToMac_1_writeMacFifo_CLR,
       ringToMac_1_writeMacFifo_DEQ,
       ringToMac_1_writeMacFifo_EMPTY_N,
       ringToMac_1_writeMacFifo_ENQ,
       ringToMac_1_writeMacFifo_FULL_N;

  // ports of submodule verbose_ff_0
  wire [31 : 0] verbose_ff_0_D_IN, verbose_ff_0_D_OUT;
  wire verbose_ff_0_CLR,
       verbose_ff_0_DEQ,
       verbose_ff_0_EMPTY_N,
       verbose_ff_0_ENQ,
       verbose_ff_0_FULL_N;

  // ports of submodule verbose_ff_0_1
  wire [31 : 0] verbose_ff_0_1_D_IN, verbose_ff_0_1_D_OUT;
  wire verbose_ff_0_1_CLR,
       verbose_ff_0_1_DEQ,
       verbose_ff_0_1_EMPTY_N,
       verbose_ff_0_1_ENQ,
       verbose_ff_0_1_FULL_N;

  // ports of submodule verbose_ff_0_2
  wire [31 : 0] verbose_ff_0_2_D_IN, verbose_ff_0_2_D_OUT;
  wire verbose_ff_0_2_CLR,
       verbose_ff_0_2_DEQ,
       verbose_ff_0_2_EMPTY_N,
       verbose_ff_0_2_ENQ,
       verbose_ff_0_2_FULL_N;

  // ports of submodule verbose_ff_0_3
  wire [31 : 0] verbose_ff_0_3_D_IN;
  wire verbose_ff_0_3_CLR,
       verbose_ff_0_3_DEQ,
       verbose_ff_0_3_ENQ,
       verbose_ff_0_3_FULL_N;

  // ports of submodule verbose_ff_1
  wire [31 : 0] verbose_ff_1_D_IN, verbose_ff_1_D_OUT;
  wire verbose_ff_1_CLR,
       verbose_ff_1_DEQ,
       verbose_ff_1_EMPTY_N,
       verbose_ff_1_ENQ,
       verbose_ff_1_FULL_N;

  // ports of submodule verbose_ff_1_1
  wire [31 : 0] verbose_ff_1_1_D_IN, verbose_ff_1_1_D_OUT;
  wire verbose_ff_1_1_CLR,
       verbose_ff_1_1_DEQ,
       verbose_ff_1_1_EMPTY_N,
       verbose_ff_1_1_ENQ,
       verbose_ff_1_1_FULL_N;

  // ports of submodule verbose_ff_1_2
  wire [31 : 0] verbose_ff_1_2_D_IN;
  wire verbose_ff_1_2_CLR,
       verbose_ff_1_2_DEQ,
       verbose_ff_1_2_ENQ,
       verbose_ff_1_2_FULL_N;

  // ports of submodule verbose_ff_2
  wire [31 : 0] verbose_ff_2_D_IN, verbose_ff_2_D_OUT;
  wire verbose_ff_2_CLR,
       verbose_ff_2_DEQ,
       verbose_ff_2_EMPTY_N,
       verbose_ff_2_ENQ,
       verbose_ff_2_FULL_N;

  // ports of submodule writeDataFifo_0
  wire [177 : 0] writeDataFifo_0_D_IN, writeDataFifo_0_D_OUT;
  wire writeDataFifo_0_CLR,
       writeDataFifo_0_DEQ,
       writeDataFifo_0_EMPTY_N,
       writeDataFifo_0_ENQ,
       writeDataFifo_0_FULL_N;

  // ports of submodule xbar_lower_lower_f
  wire [609 : 0] xbar_lower_lower_f_D_IN, xbar_lower_lower_f_D_OUT;
  wire xbar_lower_lower_f_CLR,
       xbar_lower_lower_f_DEQ,
       xbar_lower_lower_f_EMPTY_N,
       xbar_lower_lower_f_ENQ;

  // ports of submodule xbar_lower_merges_1_fi0
  wire [609 : 0] xbar_lower_merges_1_fi0_D_IN, xbar_lower_merges_1_fi0_D_OUT;
  wire xbar_lower_merges_1_fi0_CLR,
       xbar_lower_merges_1_fi0_DEQ,
       xbar_lower_merges_1_fi0_EMPTY_N,
       xbar_lower_merges_1_fi0_ENQ,
       xbar_lower_merges_1_fi0_FULL_N;

  // ports of submodule xbar_lower_merges_1_fi1
  wire [609 : 0] xbar_lower_merges_1_fi1_D_IN, xbar_lower_merges_1_fi1_D_OUT;
  wire xbar_lower_merges_1_fi1_CLR,
       xbar_lower_merges_1_fi1_DEQ,
       xbar_lower_merges_1_fi1_EMPTY_N,
       xbar_lower_merges_1_fi1_ENQ,
       xbar_lower_merges_1_fi1_FULL_N;

  // ports of submodule xbar_lower_merges_1_fo
  reg [609 : 0] xbar_lower_merges_1_fo_D_IN;
  wire [609 : 0] xbar_lower_merges_1_fo_D_OUT;
  wire xbar_lower_merges_1_fo_CLR,
       xbar_lower_merges_1_fo_DEQ,
       xbar_lower_merges_1_fo_EMPTY_N,
       xbar_lower_merges_1_fo_ENQ,
       xbar_lower_merges_1_fo_FULL_N;

  // ports of submodule xbar_lower_merges_fi0
  wire [609 : 0] xbar_lower_merges_fi0_D_IN, xbar_lower_merges_fi0_D_OUT;
  wire xbar_lower_merges_fi0_CLR,
       xbar_lower_merges_fi0_DEQ,
       xbar_lower_merges_fi0_EMPTY_N,
       xbar_lower_merges_fi0_ENQ,
       xbar_lower_merges_fi0_FULL_N;

  // ports of submodule xbar_lower_merges_fi1
  wire [609 : 0] xbar_lower_merges_fi1_D_IN, xbar_lower_merges_fi1_D_OUT;
  wire xbar_lower_merges_fi1_CLR,
       xbar_lower_merges_fi1_DEQ,
       xbar_lower_merges_fi1_EMPTY_N,
       xbar_lower_merges_fi1_ENQ,
       xbar_lower_merges_fi1_FULL_N;

  // ports of submodule xbar_lower_merges_fo
  reg [609 : 0] xbar_lower_merges_fo_D_IN;
  wire [609 : 0] xbar_lower_merges_fo_D_OUT;
  wire xbar_lower_merges_fo_CLR,
       xbar_lower_merges_fo_DEQ,
       xbar_lower_merges_fo_EMPTY_N,
       xbar_lower_merges_fo_ENQ,
       xbar_lower_merges_fo_FULL_N;

  // ports of submodule xbar_lower_upper_f
  wire [609 : 0] xbar_lower_upper_f_D_IN, xbar_lower_upper_f_D_OUT;
  wire xbar_lower_upper_f_CLR,
       xbar_lower_upper_f_DEQ,
       xbar_lower_upper_f_EMPTY_N,
       xbar_lower_upper_f_ENQ,
       xbar_lower_upper_f_FULL_N;

  // ports of submodule xbar_merges_1_fi0
  wire [609 : 0] xbar_merges_1_fi0_D_IN, xbar_merges_1_fi0_D_OUT;
  wire xbar_merges_1_fi0_CLR,
       xbar_merges_1_fi0_DEQ,
       xbar_merges_1_fi0_EMPTY_N,
       xbar_merges_1_fi0_ENQ,
       xbar_merges_1_fi0_FULL_N;

  // ports of submodule xbar_merges_1_fi1
  wire [609 : 0] xbar_merges_1_fi1_D_IN, xbar_merges_1_fi1_D_OUT;
  wire xbar_merges_1_fi1_CLR,
       xbar_merges_1_fi1_DEQ,
       xbar_merges_1_fi1_EMPTY_N,
       xbar_merges_1_fi1_ENQ,
       xbar_merges_1_fi1_FULL_N;

  // ports of submodule xbar_merges_1_fo
  reg [609 : 0] xbar_merges_1_fo_D_IN;
  wire [609 : 0] xbar_merges_1_fo_D_OUT;
  wire xbar_merges_1_fo_CLR,
       xbar_merges_1_fo_DEQ,
       xbar_merges_1_fo_EMPTY_N,
       xbar_merges_1_fo_ENQ,
       xbar_merges_1_fo_FULL_N;

  // ports of submodule xbar_merges_2_fi0
  wire [609 : 0] xbar_merges_2_fi0_D_IN, xbar_merges_2_fi0_D_OUT;
  wire xbar_merges_2_fi0_CLR,
       xbar_merges_2_fi0_DEQ,
       xbar_merges_2_fi0_EMPTY_N,
       xbar_merges_2_fi0_ENQ,
       xbar_merges_2_fi0_FULL_N;

  // ports of submodule xbar_merges_2_fi1
  wire [609 : 0] xbar_merges_2_fi1_D_IN, xbar_merges_2_fi1_D_OUT;
  wire xbar_merges_2_fi1_CLR,
       xbar_merges_2_fi1_DEQ,
       xbar_merges_2_fi1_EMPTY_N,
       xbar_merges_2_fi1_ENQ,
       xbar_merges_2_fi1_FULL_N;

  // ports of submodule xbar_merges_2_fo
  reg [609 : 0] xbar_merges_2_fo_D_IN;
  wire [609 : 0] xbar_merges_2_fo_D_OUT;
  wire xbar_merges_2_fo_CLR,
       xbar_merges_2_fo_DEQ,
       xbar_merges_2_fo_EMPTY_N,
       xbar_merges_2_fo_ENQ,
       xbar_merges_2_fo_FULL_N;

  // ports of submodule xbar_merges_3_fi0
  wire [609 : 0] xbar_merges_3_fi0_D_IN, xbar_merges_3_fi0_D_OUT;
  wire xbar_merges_3_fi0_CLR,
       xbar_merges_3_fi0_DEQ,
       xbar_merges_3_fi0_EMPTY_N,
       xbar_merges_3_fi0_ENQ,
       xbar_merges_3_fi0_FULL_N;

  // ports of submodule xbar_merges_3_fi1
  wire [609 : 0] xbar_merges_3_fi1_D_IN, xbar_merges_3_fi1_D_OUT;
  wire xbar_merges_3_fi1_CLR,
       xbar_merges_3_fi1_DEQ,
       xbar_merges_3_fi1_EMPTY_N,
       xbar_merges_3_fi1_ENQ,
       xbar_merges_3_fi1_FULL_N;

  // ports of submodule xbar_merges_3_fo
  reg [609 : 0] xbar_merges_3_fo_D_IN;
  wire [609 : 0] xbar_merges_3_fo_D_OUT;
  wire xbar_merges_3_fo_CLR,
       xbar_merges_3_fo_DEQ,
       xbar_merges_3_fo_EMPTY_N,
       xbar_merges_3_fo_ENQ,
       xbar_merges_3_fo_FULL_N;

  // ports of submodule xbar_merges_fi0
  wire [609 : 0] xbar_merges_fi0_D_IN, xbar_merges_fi0_D_OUT;
  wire xbar_merges_fi0_CLR,
       xbar_merges_fi0_DEQ,
       xbar_merges_fi0_EMPTY_N,
       xbar_merges_fi0_ENQ,
       xbar_merges_fi0_FULL_N;

  // ports of submodule xbar_merges_fi1
  wire [609 : 0] xbar_merges_fi1_D_IN, xbar_merges_fi1_D_OUT;
  wire xbar_merges_fi1_CLR,
       xbar_merges_fi1_DEQ,
       xbar_merges_fi1_EMPTY_N,
       xbar_merges_fi1_ENQ,
       xbar_merges_fi1_FULL_N;

  // ports of submodule xbar_merges_fo
  reg [609 : 0] xbar_merges_fo_D_IN;
  wire [609 : 0] xbar_merges_fo_D_OUT;
  wire xbar_merges_fo_CLR,
       xbar_merges_fo_DEQ,
       xbar_merges_fo_EMPTY_N,
       xbar_merges_fo_ENQ,
       xbar_merges_fo_FULL_N;

  // ports of submodule xbar_upper_lower_f
  wire [609 : 0] xbar_upper_lower_f_D_IN, xbar_upper_lower_f_D_OUT;
  wire xbar_upper_lower_f_CLR,
       xbar_upper_lower_f_DEQ,
       xbar_upper_lower_f_EMPTY_N,
       xbar_upper_lower_f_ENQ,
       xbar_upper_lower_f_FULL_N;

  // ports of submodule xbar_upper_merges_1_fi0
  wire [609 : 0] xbar_upper_merges_1_fi0_D_IN, xbar_upper_merges_1_fi0_D_OUT;
  wire xbar_upper_merges_1_fi0_CLR,
       xbar_upper_merges_1_fi0_DEQ,
       xbar_upper_merges_1_fi0_EMPTY_N,
       xbar_upper_merges_1_fi0_ENQ,
       xbar_upper_merges_1_fi0_FULL_N;

  // ports of submodule xbar_upper_merges_1_fi1
  wire [609 : 0] xbar_upper_merges_1_fi1_D_IN, xbar_upper_merges_1_fi1_D_OUT;
  wire xbar_upper_merges_1_fi1_CLR,
       xbar_upper_merges_1_fi1_DEQ,
       xbar_upper_merges_1_fi1_EMPTY_N,
       xbar_upper_merges_1_fi1_ENQ,
       xbar_upper_merges_1_fi1_FULL_N;

  // ports of submodule xbar_upper_merges_1_fo
  reg [609 : 0] xbar_upper_merges_1_fo_D_IN;
  wire [609 : 0] xbar_upper_merges_1_fo_D_OUT;
  wire xbar_upper_merges_1_fo_CLR,
       xbar_upper_merges_1_fo_DEQ,
       xbar_upper_merges_1_fo_EMPTY_N,
       xbar_upper_merges_1_fo_ENQ,
       xbar_upper_merges_1_fo_FULL_N;

  // ports of submodule xbar_upper_merges_fi0
  wire [609 : 0] xbar_upper_merges_fi0_D_IN, xbar_upper_merges_fi0_D_OUT;
  wire xbar_upper_merges_fi0_CLR,
       xbar_upper_merges_fi0_DEQ,
       xbar_upper_merges_fi0_EMPTY_N,
       xbar_upper_merges_fi0_ENQ,
       xbar_upper_merges_fi0_FULL_N;

  // ports of submodule xbar_upper_merges_fi1
  wire [609 : 0] xbar_upper_merges_fi1_D_IN, xbar_upper_merges_fi1_D_OUT;
  wire xbar_upper_merges_fi1_CLR,
       xbar_upper_merges_fi1_DEQ,
       xbar_upper_merges_fi1_EMPTY_N,
       xbar_upper_merges_fi1_ENQ,
       xbar_upper_merges_fi1_FULL_N;

  // ports of submodule xbar_upper_merges_fo
  reg [609 : 0] xbar_upper_merges_fo_D_IN;
  wire [609 : 0] xbar_upper_merges_fo_D_OUT;
  wire xbar_upper_merges_fo_CLR,
       xbar_upper_merges_fo_DEQ,
       xbar_upper_merges_fo_EMPTY_N,
       xbar_upper_merges_fo_ENQ,
       xbar_upper_merges_fo_FULL_N;

  // ports of submodule xbar_upper_upper_f
  wire [609 : 0] xbar_upper_upper_f_D_IN, xbar_upper_upper_f_D_OUT;
  wire xbar_upper_upper_f_CLR,
       xbar_upper_upper_f_DEQ,
       xbar_upper_upper_f_EMPTY_N,
       xbar_upper_upper_f_ENQ,
       xbar_upper_upper_f_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_mkConnectionGetPut_10,
       CAN_FIRE_RL_mkConnectionGetPut_11,
       CAN_FIRE_RL_mkConnectionGetPut_39,
       CAN_FIRE_RL_mkConnectionGetPut_40,
       CAN_FIRE_RL_mkConnectionGetPut_9,
       WILL_FIRE_RL_hostchan_0_packetReadInProgress,
       WILL_FIRE_RL_hostchan_1_packetReadInProgress,
       WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven,
       WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd,
       WILL_FIRE_RL_macToRing_0_gearbox_startOfPacket,
       WILL_FIRE_RL_macToRing_0_writeData,
       WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven,
       WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd,
       WILL_FIRE_RL_macToRing_1_gearbox_startOfPacket,
       WILL_FIRE_RL_macToRing_1_writeData,
       WILL_FIRE_RL_packetReadInProgress,
       WILL_FIRE_RL_pktBuff_0_commit_packet,
       WILL_FIRE_RL_pktBuff_0_dequeue_first_beat,
       WILL_FIRE_RL_pktBuff_0_dequeue_next_beat,
       WILL_FIRE_RL_pktBuff_0_enq_stage1,
       WILL_FIRE_RL_pktBuff_0_enqueue_first_beat,
       WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_pktBuff_0_packetReadInProgress,
       WILL_FIRE_RL_pktBuff_1_commit_packet,
       WILL_FIRE_RL_pktBuff_1_dequeue_first_beat,
       WILL_FIRE_RL_pktBuff_1_dequeue_next_beat,
       WILL_FIRE_RL_pktBuff_1_enq_stage1,
       WILL_FIRE_RL_pktBuff_1_enqueue_first_beat,
       WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_pktBuff_1_packetReadInProgress,
       WILL_FIRE_RL_pktBuff_2_packetReadInProgress,
       WILL_FIRE_RL_ringToMac_0_cross_clocking,
       WILL_FIRE_RL_ringToMac_0_process_incoming_packet,
       WILL_FIRE_RL_ringToMac_0_process_outgoing_packet,
       WILL_FIRE_RL_ringToMac_1_cross_clocking,
       WILL_FIRE_RL_ringToMac_1_process_incoming_packet,
       WILL_FIRE_RL_ringToMac_1_process_outgoing_packet,
       WILL_FIRE_RL_xbar_lower_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_both_have_data,
       WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_lower_route,
       WILL_FIRE_RL_xbar_lower_route_1,
       WILL_FIRE_RL_xbar_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_2_both_have_data,
       WILL_FIRE_RL_xbar_merges_2_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_2_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_3_both_have_data,
       WILL_FIRE_RL_xbar_merges_3_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_3_fi1_is_empty,
       WILL_FIRE_RL_xbar_merges_both_have_data,
       WILL_FIRE_RL_xbar_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_route,
       WILL_FIRE_RL_xbar_route_1,
       WILL_FIRE_RL_xbar_route_2,
       WILL_FIRE_RL_xbar_route_3,
       WILL_FIRE_RL_xbar_upper_merges_1_both_have_data,
       WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_both_have_data,
       WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty,
       WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty,
       WILL_FIRE_RL_xbar_upper_route,
       WILL_FIRE_RL_xbar_upper_route_1;

  // inputs to muxes for submodule ports
  wire [609 : 0] MUX_xbar_lower_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_lower_merges_fo_enq_1__VAL_1,
		 MUX_xbar_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_merges_2_fo_enq_1__VAL_1,
		 MUX_xbar_merges_3_fo_enq_1__VAL_1,
		 MUX_xbar_merges_fo_enq_1__VAL_1,
		 MUX_xbar_upper_merges_1_fo_enq_1__VAL_1,
		 MUX_xbar_upper_merges_fo_enq_1__VAL_1;
  wire [177 : 0] MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_1,
		 MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_2,
		 MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_1,
		 MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_2;
  wire [63 : 0] MUX_ringToMac_0_idle_cycles_write_1__VAL_1,
		MUX_ringToMac_1_idle_cycles_write_1__VAL_1;
  wire [7 : 0] MUX_pktBuff_0_rdCurrPtr_write_1__VAL_1,
	       MUX_pktBuff_1_rdCurrPtr_write_1__VAL_1;
  wire MUX_hostchan_0_readStarted_write_1__SEL_1,
       MUX_hostchan_0_readStarted_write_1__SEL_2,
       MUX_hostchan_1_readStarted_write_1__SEL_1,
       MUX_hostchan_1_readStarted_write_1__SEL_2,
       MUX_macToRing_0_gearbox_inProgress_write_1__PSEL_1,
       MUX_macToRing_0_gearbox_inProgress_write_1__SEL_1,
       MUX_macToRing_0_gearbox_oddBeat_write_1__SEL_1,
       MUX_macToRing_0_gearbox_out_ff_enq_1__SEL_1,
       MUX_macToRing_1_gearbox_inProgress_write_1__PSEL_1,
       MUX_macToRing_1_gearbox_inProgress_write_1__SEL_1,
       MUX_macToRing_1_gearbox_oddBeat_write_1__SEL_1,
       MUX_macToRing_1_gearbox_out_ff_enq_1__SEL_1,
       MUX_pktBuff_0_fifoWriteData_enq_1__SEL_2,
       MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1,
       MUX_pktBuff_0_outPacket_write_1__SEL_1,
       MUX_pktBuff_0_readStarted_write_1__SEL_1,
       MUX_pktBuff_0_readStarted_write_1__SEL_2,
       MUX_pktBuff_1_fifoWriteData_enq_1__SEL_2,
       MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1,
       MUX_pktBuff_1_outPacket_write_1__SEL_1,
       MUX_pktBuff_1_readStarted_write_1__SEL_1,
       MUX_pktBuff_1_readStarted_write_1__SEL_2,
       MUX_pktBuff_2_readStarted_write_1__SEL_1,
       MUX_pktBuff_2_readStarted_write_1__SEL_2,
       MUX_readStarted_0_write_1__SEL_1,
       MUX_readStarted_0_write_1__SEL_2,
       MUX_ringToMac_0_idle_cycles_write_1__SEL_1,
       MUX_ringToMac_1_idle_cycles_write_1__SEL_1,
       MUX_xbar_lower_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_lower_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_lower_merges_fo_enq_1__SEL_1,
       MUX_xbar_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_merges_2_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_2_fo_enq_1__SEL_1,
       MUX_xbar_merges_3_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_3_fo_enq_1__SEL_1,
       MUX_xbar_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_merges_fo_enq_1__SEL_1,
       MUX_xbar_upper_merges_1_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_merges_1_fo_enq_1__SEL_1,
       MUX_xbar_upper_merges_fi0HasPrio_write_1__SEL_1,
       MUX_xbar_upper_merges_fo_enq_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v___1__h100946,
	       v___1__h101203,
	       v__h11023,
	       v__h113231,
	       v__h18017,
	       v__h83030,
	       v__h83097,
	       v__h84077,
	       v__h84143,
	       v__h84726,
	       v__h84785,
	       v__h85142,
	       v__h85195,
	       v__h86237,
	       v__h86303,
	       v__h87283,
	       v__h87349,
	       v__h87932,
	       v__h87991,
	       v__h88348,
	       v__h88401,
	       v__h89205,
	       v__h89271,
	       v__h90251,
	       v__h90317,
	       v__h91297,
	       v__h91363,
	       v__h92343,
	       v__h92409,
	       v__h93023,
	       v__h93082,
	       v__h93456,
	       v__h93510,
	       v__h93904,
	       v__h93957,
	       v__h94330,
	       v__h94383;
  wire [127 : 0] x_data__h10291,
		 x_data__h16327,
		 x_data__h17285,
		 x_data__h9333;
  wire [63 : 0] y__h15903,
		y__h43278,
		y__h43365,
		y__h50313,
		y__h61915,
		y__h62002,
		y__h68947,
		y__h8909;
  wire [15 : 0] newPacketLen__h37823,
		newPacketLen__h56460,
		x_mask__h10292,
		x_mask__h17286;
  wire [7 : 0] IF_ringToMac_0_fifoTxData_read_block_271_THEN__ETC___d1309,
	       IF_ringToMac_1_fifoTxData_read_block_715_THEN__ETC___d1753,
	       mask__h49951,
	       mask__h50060,
	       mask__h68585,
	       mask__h68694;
  wire [4 : 0] x__h37912,
	       x__h37927,
	       x__h37939,
	       x__h37951,
	       x__h37963,
	       x__h37975,
	       x__h37987,
	       x__h37999,
	       x__h38011,
	       x__h38023,
	       x__h38035,
	       x__h38047,
	       x__h38059,
	       x__h38071,
	       x__h38083,
	       x__h38095,
	       x__h56549,
	       x__h56564,
	       x__h56576,
	       x__h56588,
	       x__h56600,
	       x__h56612,
	       x__h56624,
	       x__h56636,
	       x__h56648,
	       x__h56660,
	       x__h56672,
	       x__h56684,
	       x__h56696,
	       x__h56708,
	       x__h56720,
	       x__h56732,
	       y__h37928,
	       y__h37940,
	       y__h37952,
	       y__h37964,
	       y__h37976,
	       y__h37988,
	       y__h38000,
	       y__h38012,
	       y__h38024,
	       y__h38036,
	       y__h38048,
	       y__h38060,
	       y__h38072,
	       y__h38084,
	       y__h38096,
	       y__h56565,
	       y__h56577,
	       y__h56589,
	       y__h56601,
	       y__h56613,
	       y__h56625,
	       y__h56637,
	       y__h56649,
	       y__h56661,
	       y__h56673,
	       y__h56685,
	       y__h56697,
	       y__h56709,
	       y__h56721,
	       y__h56733;
  wire [3 : 0] x__h15906,
	       x__h15921,
	       x__h15933,
	       x__h15945,
	       x__h15957,
	       x__h15969,
	       x__h15981,
	       x__h15993,
	       x__h50317,
	       x__h50333,
	       x__h50345,
	       x__h50357,
	       x__h50369,
	       x__h50381,
	       x__h50393,
	       x__h50405,
	       x__h68951,
	       x__h68967,
	       x__h68979,
	       x__h68991,
	       x__h69003,
	       x__h69015,
	       x__h69027,
	       x__h69039,
	       x__h8912,
	       x__h8927,
	       x__h8939,
	       x__h8951,
	       x__h8963,
	       x__h8975,
	       x__h8987,
	       x__h8999,
	       y__h15922,
	       y__h15934,
	       y__h15946,
	       y__h15958,
	       y__h15970,
	       y__h15982,
	       y__h15994,
	       y__h50334,
	       y__h50346,
	       y__h50358,
	       y__h50370,
	       y__h50382,
	       y__h50394,
	       y__h50406,
	       y__h68968,
	       y__h68980,
	       y__h68992,
	       y__h69004,
	       y__h69016,
	       y__h69028,
	       y__h69040,
	       y__h8928,
	       y__h8940,
	       y__h8952,
	       y__h8964,
	       y__h8976,
	       y__h8988,
	       y__h9000;
  wire [2 : 0] pktBuff_0_memBuffer_serverAdapterB_cnt_051_PLU_ETC___d1057,
	       pktBuff_1_memBuffer_serverAdapterB_cnt_495_PLU_ETC___d1501;
  wire [1 : 0] ab__h36853,
	       ab__h55490,
	       x__h43450,
	       x__h43905,
	       x__h47698,
	       x__h48077,
	       x__h62087,
	       x__h62539,
	       x__h66332,
	       x__h66711;
  wire IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_NOT_ETC___d2480,
       IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2481,
       IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2494,
       IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2506,
       IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2511,
       IF_xbar_lower_merges_1_routeFrom_468_BIT_0_470_ETC___d2501,
       IF_xbar_lower_merges_fi0HasPrio_398_THEN_NOT_x_ETC___d2405,
       IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2406,
       IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2419,
       IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2431,
       IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2436,
       IF_xbar_lower_merges_routeFrom_393_BIT_0_395_T_ETC___d2426,
       IF_xbar_merges_1_fi0HasPrio_645_THEN_NOT_xbar__ETC___d2652,
       IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2653,
       IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2666,
       IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2678,
       IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2683,
       IF_xbar_merges_1_routeFrom_640_BIT_0_642_THEN__ETC___d2673,
       IF_xbar_merges_2_fi0HasPrio_720_THEN_NOT_xbar__ETC___d2727,
       IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2728,
       IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2741,
       IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2753,
       IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2758,
       IF_xbar_merges_2_routeFrom_715_BIT_0_717_THEN__ETC___d2748,
       IF_xbar_merges_3_fi0HasPrio_795_THEN_NOT_xbar__ETC___d2802,
       IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2803,
       IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2816,
       IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2828,
       IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2833,
       IF_xbar_merges_3_routeFrom_790_BIT_0_792_THEN__ETC___d2823,
       IF_xbar_merges_fi0HasPrio_570_THEN_NOT_xbar_me_ETC___d2577,
       IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2578,
       IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2591,
       IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2603,
       IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2608,
       IF_xbar_merges_routeFrom_565_BIT_0_567_THEN_xb_ETC___d2598,
       IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_NOT_ETC___d2306,
       IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2307,
       IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2320,
       IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2332,
       IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2337,
       IF_xbar_upper_merges_1_routeFrom_294_BIT_0_296_ETC___d2327,
       IF_xbar_upper_merges_fi0HasPrio_224_THEN_NOT_x_ETC___d2231,
       IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2232,
       IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2245,
       IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2257,
       IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2262,
       IF_xbar_upper_merges_routeFrom_219_BIT_0_221_T_ETC___d2252,
       NOT_IF_ringToMac_0_fifoTxData_read_block_271_T_ETC___d1366,
       NOT_IF_ringToMac_1_fifoTxData_read_block_715_T_ETC___d1810,
       NOT_ringToMac_0_fifoTxData_read_block_271_272__ETC___d1294,
       NOT_ringToMac_0_fifoTxData_write_block_231_232_ETC___d1252,
       NOT_ringToMac_1_fifoTxData_read_block_715_716__ETC___d1738,
       NOT_ringToMac_1_fifoTxData_write_block_675_676_ETC___d1696,
       pktBuff_0_memBuffer_serverAdapterA_cnt_86_SLT_3___d1155,
       pktBuff_0_memBuffer_serverAdapterB_cnt_051_SLT_3___d1181,
       pktBuff_1_memBuffer_serverAdapterA_cnt_430_SLT_3___d1599,
       pktBuff_1_memBuffer_serverAdapterB_cnt_495_SLT_3___d1625,
       ringToMac_0_fifoTxData_elem0_status_0__read__2_ETC___d1277,
       ringToMac_0_fifoTxData_elem0_status_1__read__2_ETC___d1275,
       ringToMac_0_fifoTxData_elem1_status_0__read__2_ETC___d1286,
       ringToMac_0_fifoTxData_elem1_status_1__read__2_ETC___d1284,
       ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d1721,
       ringToMac_1_fifoTxData_elem0_status_1__read__7_ETC___d1719,
       ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d1730,
       ringToMac_1_fifoTxData_elem1_status_1__read__7_ETC___d1728,
       verbose_ff_1_i_notFull__171_AND_verbose_ff_0_i_ETC___d3558,
       xbar_lower_merges_1_fo_i_notFull__456_AND_IF_x_ETC___d2472,
       xbar_lower_merges_1_routeFrom_468_BIT_1_469_AN_ETC___d2514,
       xbar_lower_merges_fo_i_notFull__381_AND_IF_xba_ETC___d2397,
       xbar_lower_merges_routeFrom_393_BIT_1_394_AND__ETC___d2439,
       xbar_merges_1_fo_i_notFull__628_AND_IF_xbar_me_ETC___d2644,
       xbar_merges_1_routeFrom_640_BIT_1_641_AND_IF_x_ETC___d2686,
       xbar_merges_2_fo_i_notFull__703_AND_IF_xbar_me_ETC___d2719,
       xbar_merges_2_routeFrom_715_BIT_1_716_AND_IF_x_ETC___d2761,
       xbar_merges_3_fo_i_notFull__778_AND_IF_xbar_me_ETC___d2794,
       xbar_merges_3_routeFrom_790_BIT_1_791_AND_IF_x_ETC___d2836,
       xbar_merges_fo_i_notFull__553_AND_IF_xbar_merg_ETC___d2569,
       xbar_merges_routeFrom_565_BIT_1_566_AND_IF_xba_ETC___d2611,
       xbar_upper_merges_1_fo_i_notFull__282_AND_IF_x_ETC___d2298,
       xbar_upper_merges_1_routeFrom_294_BIT_1_295_AN_ETC___d2340,
       xbar_upper_merges_fo_i_notFull__207_AND_IF_xba_ETC___d2223,
       xbar_upper_merges_routeFrom_219_BIT_1_220_AND__ETC___d2265;

  // action method rxchan_0_macRx_put
  assign RDY_rxchan_0_macRx_put = macToRing_0_gearbox_in_ff_FULL_N ;

  // value method rxchan_0_writeClient_first
  assign rxchan_0_writeClient_first = hostchan_0_writeDataFifo_D_OUT ;
  assign RDY_rxchan_0_writeClient_first = hostchan_0_writeDataFifo_EMPTY_N ;

  // action method rxchan_0_writeClient_deq
  assign RDY_rxchan_0_writeClient_deq = hostchan_0_writeDataFifo_EMPTY_N ;

  // value method rxchan_0_writeClient_notEmpty
  assign rxchan_0_writeClient_notEmpty = hostchan_0_writeDataFifo_EMPTY_N ;
  assign RDY_rxchan_0_writeClient_notEmpty = 1'd1 ;

  // value method rxchan_0_next_first
  assign rxchan_0_next_first = hostchan_0_outReqFifo_D_OUT ;
  assign RDY_rxchan_0_next_first = hostchan_0_outReqFifo_EMPTY_N ;

  // action method rxchan_0_next_deq
  assign RDY_rxchan_0_next_deq = hostchan_0_outReqFifo_EMPTY_N ;

  // value method rxchan_0_next_notEmpty
  assign rxchan_0_next_notEmpty = hostchan_0_outReqFifo_EMPTY_N ;
  assign RDY_rxchan_0_next_notEmpty = 1'd1 ;

  // action method rxchan_0_verbose_enq
  assign RDY_rxchan_0_verbose_enq = verbose_ff_0_1_FULL_N ;

  // value method rxchan_0_verbose_notFull
  assign rxchan_0_verbose_notFull = verbose_ff_0_1_FULL_N ;
  assign RDY_rxchan_0_verbose_notFull = 1'd1 ;

  // action method rxchan_1_macRx_put
  assign RDY_rxchan_1_macRx_put = macToRing_1_gearbox_in_ff_FULL_N ;

  // value method rxchan_1_writeClient_first
  assign rxchan_1_writeClient_first = hostchan_1_writeDataFifo_D_OUT ;
  assign RDY_rxchan_1_writeClient_first = hostchan_1_writeDataFifo_EMPTY_N ;

  // action method rxchan_1_writeClient_deq
  assign RDY_rxchan_1_writeClient_deq = hostchan_1_writeDataFifo_EMPTY_N ;

  // value method rxchan_1_writeClient_notEmpty
  assign rxchan_1_writeClient_notEmpty = hostchan_1_writeDataFifo_EMPTY_N ;
  assign RDY_rxchan_1_writeClient_notEmpty = 1'd1 ;

  // value method rxchan_1_next_first
  assign rxchan_1_next_first = hostchan_1_outReqFifo_D_OUT ;
  assign RDY_rxchan_1_next_first = hostchan_1_outReqFifo_EMPTY_N ;

  // action method rxchan_1_next_deq
  assign RDY_rxchan_1_next_deq = hostchan_1_outReqFifo_EMPTY_N ;

  // value method rxchan_1_next_notEmpty
  assign rxchan_1_next_notEmpty = hostchan_1_outReqFifo_EMPTY_N ;
  assign RDY_rxchan_1_next_notEmpty = 1'd1 ;

  // action method rxchan_1_verbose_enq
  assign RDY_rxchan_1_verbose_enq = verbose_ff_1_FULL_N ;

  // value method rxchan_1_verbose_notFull
  assign rxchan_1_verbose_notFull = verbose_ff_1_FULL_N ;
  assign RDY_rxchan_1_verbose_notFull = 1'd1 ;

  // action method hostchan_0_writeServer_enq
  assign RDY_hostchan_0_writeServer_enq = pktBuff_0_RDY_writeServer_enq ;

  // value method hostchan_0_writeServer_notFull
  assign hostchan_0_writeServer_notFull = pktBuff_0_writeServer_notFull ;
  assign RDY_hostchan_0_writeServer_notFull = 1'd1 ;

  // value method hostchan_0_writeClient_first
  assign hostchan_0_writeClient_first = writeDataFifo_0_D_OUT ;
  assign RDY_hostchan_0_writeClient_first = writeDataFifo_0_EMPTY_N ;

  // action method hostchan_0_writeClient_deq
  assign RDY_hostchan_0_writeClient_deq = writeDataFifo_0_EMPTY_N ;

  // value method hostchan_0_writeClient_notEmpty
  assign hostchan_0_writeClient_notEmpty = writeDataFifo_0_EMPTY_N ;
  assign RDY_hostchan_0_writeClient_notEmpty = 1'd1 ;

  // value method hostchan_0_next_first
  assign hostchan_0_next_first = outReqFifo_0_D_OUT ;
  assign RDY_hostchan_0_next_first = outReqFifo_0_EMPTY_N ;

  // action method hostchan_0_next_deq
  assign RDY_hostchan_0_next_deq = outReqFifo_0_EMPTY_N ;

  // value method hostchan_0_next_notEmpty
  assign hostchan_0_next_notEmpty = outReqFifo_0_EMPTY_N ;
  assign RDY_hostchan_0_next_notEmpty = 1'd1 ;

  // action method hostchan_0_verbose_enq
  assign RDY_hostchan_0_verbose_enq = verbose_ff_0_FULL_N ;

  // value method hostchan_0_verbose_notFull
  assign hostchan_0_verbose_notFull = verbose_ff_0_FULL_N ;
  assign RDY_hostchan_0_verbose_notFull = 1'd1 ;

  // action method txchan_0_writeServer_enq
  assign RDY_txchan_0_writeServer_enq = pktBuff_0_fifoWriteData_FULL_N ;

  // value method txchan_0_writeServer_notFull
  assign txchan_0_writeServer_notFull = pktBuff_0_fifoWriteData_FULL_N ;
  assign RDY_txchan_0_writeServer_notFull = 1'd1 ;

  // actionvalue method txchan_0_macTx_get
  assign txchan_0_macTx_get = ringToMac_0_writeMacFifo_D_OUT ;
  assign RDY_txchan_0_macTx_get = ringToMac_0_writeMacFifo_EMPTY_N ;

  // action method txchan_0_verbose_enq
  assign RDY_txchan_0_verbose_enq = verbose_ff_0_3_FULL_N ;

  // value method txchan_0_verbose_notFull
  assign txchan_0_verbose_notFull = verbose_ff_0_3_FULL_N ;
  assign RDY_txchan_0_verbose_notFull = 1'd1 ;

  // action method txchan_1_writeServer_enq
  assign RDY_txchan_1_writeServer_enq = pktBuff_1_fifoWriteData_FULL_N ;

  // value method txchan_1_writeServer_notFull
  assign txchan_1_writeServer_notFull = pktBuff_1_fifoWriteData_FULL_N ;
  assign RDY_txchan_1_writeServer_notFull = 1'd1 ;

  // actionvalue method txchan_1_macTx_get
  assign txchan_1_macTx_get = ringToMac_1_writeMacFifo_D_OUT ;
  assign RDY_txchan_1_macTx_get = ringToMac_1_writeMacFifo_EMPTY_N ;

  // action method txchan_1_verbose_enq
  assign RDY_txchan_1_verbose_enq = verbose_ff_1_2_FULL_N ;

  // value method txchan_1_verbose_notFull
  assign txchan_1_verbose_notFull = verbose_ff_1_2_FULL_N ;
  assign RDY_txchan_1_verbose_notFull = 1'd1 ;

  // action method prev_0_enq
  assign RDY_prev_0_enq = meta_ff_0_FULL_N ;

  // value method prev_0_notFull
  assign prev_0_notFull = meta_ff_0_FULL_N ;
  assign RDY_prev_0_notFull = 1'd1 ;

  // action method prev_1_enq
  assign RDY_prev_1_enq = meta_ff_1_FULL_N ;

  // value method prev_1_notFull
  assign prev_1_notFull = meta_ff_1_FULL_N ;
  assign RDY_prev_1_notFull = 1'd1 ;

  // action method prev_2_enq
  assign RDY_prev_2_enq = meta_ff_2_FULL_N ;

  // value method prev_2_notFull
  assign prev_2_notFull = meta_ff_2_FULL_N ;
  assign RDY_prev_2_notFull = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity =
	     verbose_ff_0_1_FULL_N &&
	     verbose_ff_1_i_notFull__171_AND_verbose_ff_0_i_ETC___d3558 ;

  // submodule gearbox_dn_16_0
  mkStreamGearboxDn_32_16 gearbox_dn_16_0(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_16_0_datain_put),
					  .EN_datain_put(gearbox_dn_16_0_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_16_0_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_16_0_RDY_datain_put),
					  .dataout_get(gearbox_dn_16_0_dataout_get),
					  .RDY_dataout_get(gearbox_dn_16_0_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_16_1
  mkStreamGearboxDn_32_16 gearbox_dn_16_1(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_16_1_datain_put),
					  .EN_datain_put(gearbox_dn_16_1_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_16_1_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_16_1_RDY_datain_put),
					  .dataout_get(gearbox_dn_16_1_dataout_get),
					  .RDY_dataout_get(gearbox_dn_16_1_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_32_0
  mkStreamGearboxDn_64_32 gearbox_dn_32_0(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_32_0_datain_put),
					  .EN_datain_put(gearbox_dn_32_0_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_32_0_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_32_0_RDY_datain_put),
					  .dataout_get(gearbox_dn_32_0_dataout_get),
					  .RDY_dataout_get(gearbox_dn_32_0_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_dn_32_1
  mkStreamGearboxDn_64_32 gearbox_dn_32_1(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_dn_32_1_datain_put),
					  .EN_datain_put(gearbox_dn_32_1_EN_datain_put),
					  .EN_dataout_get(gearbox_dn_32_1_EN_dataout_get),
					  .RDY_datain_put(gearbox_dn_32_1_RDY_datain_put),
					  .dataout_get(gearbox_dn_32_1_dataout_get),
					  .RDY_dataout_get(gearbox_dn_32_1_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_16_0
  mkStreamGearboxUp_16_32 gearbox_up_16_0(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_16_0_datain_put),
					  .EN_datain_put(gearbox_up_16_0_EN_datain_put),
					  .EN_dataout_get(gearbox_up_16_0_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_16_0_RDY_datain_put),
					  .dataout_get(gearbox_up_16_0_dataout_get),
					  .RDY_dataout_get(gearbox_up_16_0_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_16_1
  mkStreamGearboxUp_16_32 gearbox_up_16_1(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_16_1_datain_put),
					  .EN_datain_put(gearbox_up_16_1_EN_datain_put),
					  .EN_dataout_get(gearbox_up_16_1_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_16_1_RDY_datain_put),
					  .dataout_get(gearbox_up_16_1_dataout_get),
					  .RDY_dataout_get(gearbox_up_16_1_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_16_2
  mkStreamGearboxUp_16_32 gearbox_up_16_2(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_16_2_datain_put),
					  .EN_datain_put(gearbox_up_16_2_EN_datain_put),
					  .EN_dataout_get(gearbox_up_16_2_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_16_2_RDY_datain_put),
					  .dataout_get(gearbox_up_16_2_dataout_get),
					  .RDY_dataout_get(gearbox_up_16_2_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_32_0
  mkStreamGearboxUp_32_64 gearbox_up_32_0(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_32_0_datain_put),
					  .EN_datain_put(gearbox_up_32_0_EN_datain_put),
					  .EN_dataout_get(gearbox_up_32_0_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_32_0_RDY_datain_put),
					  .dataout_get(gearbox_up_32_0_dataout_get),
					  .RDY_dataout_get(gearbox_up_32_0_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_32_1
  mkStreamGearboxUp_32_64 gearbox_up_32_1(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_32_1_datain_put),
					  .EN_datain_put(gearbox_up_32_1_EN_datain_put),
					  .EN_dataout_get(gearbox_up_32_1_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_32_1_RDY_datain_put),
					  .dataout_get(gearbox_up_32_1_dataout_get),
					  .RDY_dataout_get(gearbox_up_32_1_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule gearbox_up_32_2
  mkStreamGearboxUp_32_64 gearbox_up_32_2(.CLK(CLK),
					  .RST_N(localReset_OUT_RST),
					  .datain_put(gearbox_up_32_2_datain_put),
					  .EN_datain_put(gearbox_up_32_2_EN_datain_put),
					  .EN_dataout_get(gearbox_up_32_2_EN_dataout_get),
					  .RDY_datain_put(gearbox_up_32_2_RDY_datain_put),
					  .dataout_get(gearbox_up_32_2_dataout_get),
					  .RDY_dataout_get(gearbox_up_32_2_RDY_dataout_get),
					  .getEopCount(),
					  .RDY_getEopCount(),
					  .getSopCount(),
					  .RDY_getSopCount(),
					  .getIdleCount(),
					  .RDY_getIdleCount(),
					  .getDataCount(),
					  .RDY_getDataCount());

  // submodule hostchan_0_outReqFifo
  FIFO2 #(.width(32'd782),
	  .guarded(32'd1)) hostchan_0_outReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_0_outReqFifo_D_IN),
						 .ENQ(hostchan_0_outReqFifo_ENQ),
						 .DEQ(hostchan_0_outReqFifo_DEQ),
						 .CLR(hostchan_0_outReqFifo_CLR),
						 .D_OUT(hostchan_0_outReqFifo_D_OUT),
						 .FULL_N(hostchan_0_outReqFifo_FULL_N),
						 .EMPTY_N(hostchan_0_outReqFifo_EMPTY_N));

  // submodule hostchan_0_parser
  mkParser hostchan_0_parser(.CLK(CLK),
			     .RST_N(localReset_OUT_RST),
			     .frameIn_put(hostchan_0_parser_frameIn_put),
			     .set_verbosity_verbosity(hostchan_0_parser_set_verbosity_verbosity),
			     .EN_frameIn_put(hostchan_0_parser_EN_frameIn_put),
			     .EN_meta_get(hostchan_0_parser_EN_meta_get),
			     .EN_set_verbosity(hostchan_0_parser_EN_set_verbosity),
			     .RDY_frameIn_put(hostchan_0_parser_RDY_frameIn_put),
			     .meta_get(hostchan_0_parser_meta_get),
			     .RDY_meta_get(hostchan_0_parser_RDY_meta_get),
			     .RDY_set_verbosity(),
			     .read_perf_info(),
			     .RDY_read_perf_info());

  // submodule hostchan_0_pktBuff
  mkPacketBuffer_16 #(.param1("streamIn channel")) hostchan_0_pktBuff(.CLK(CLK),
								      .RST_N(localReset_OUT_RST),
								      .readServer_readReq_put(hostchan_0_pktBuff_readServer_readReq_put),
								      .set_verbosity_verbosity(hostchan_0_pktBuff_set_verbosity_verbosity),
								      .writeServer_enq_v(hostchan_0_pktBuff_writeServer_enq_v),
								      .EN_writeServer_enq(hostchan_0_pktBuff_EN_writeServer_enq),
								      .EN_readServer_readData_get(hostchan_0_pktBuff_EN_readServer_readData_get),
								      .EN_readServer_readLen_get(hostchan_0_pktBuff_EN_readServer_readLen_get),
								      .EN_readServer_readReq_put(hostchan_0_pktBuff_EN_readServer_readReq_put),
								      .EN_set_verbosity(hostchan_0_pktBuff_EN_set_verbosity),
								      .RDY_writeServer_enq(hostchan_0_pktBuff_RDY_writeServer_enq),
								      .writeServer_notFull(),
								      .RDY_writeServer_notFull(),
								      .readServer_readData_get(hostchan_0_pktBuff_readServer_readData_get),
								      .RDY_readServer_readData_get(hostchan_0_pktBuff_RDY_readServer_readData_get),
								      .readServer_readLen_get(hostchan_0_pktBuff_readServer_readLen_get),
								      .RDY_readServer_readLen_get(hostchan_0_pktBuff_RDY_readServer_readLen_get),
								      .RDY_readServer_readReq_put(hostchan_0_pktBuff_RDY_readServer_readReq_put),
								      .dbg(),
								      .RDY_dbg(),
								      .RDY_set_verbosity());

  // submodule hostchan_0_pktLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_0_pktLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_0_pktLenFifo_D_IN),
						 .ENQ(hostchan_0_pktLenFifo_ENQ),
						 .DEQ(hostchan_0_pktLenFifo_DEQ),
						 .CLR(hostchan_0_pktLenFifo_CLR),
						 .D_OUT(hostchan_0_pktLenFifo_D_OUT),
						 .FULL_N(hostchan_0_pktLenFifo_FULL_N),
						 .EMPTY_N(hostchan_0_pktLenFifo_EMPTY_N));

  // submodule hostchan_0_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_0_readDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(hostchan_0_readDataFifo_D_IN),
						   .ENQ(hostchan_0_readDataFifo_ENQ),
						   .DEQ(hostchan_0_readDataFifo_DEQ),
						   .CLR(hostchan_0_readDataFifo_CLR),
						   .D_OUT(hostchan_0_readDataFifo_D_OUT),
						   .FULL_N(hostchan_0_readDataFifo_FULL_N),
						   .EMPTY_N(hostchan_0_readDataFifo_EMPTY_N));

  // submodule hostchan_0_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_0_readLenFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_0_readLenFifo_D_IN),
						  .ENQ(hostchan_0_readLenFifo_ENQ),
						  .DEQ(hostchan_0_readLenFifo_DEQ),
						  .CLR(hostchan_0_readLenFifo_CLR),
						  .D_OUT(hostchan_0_readLenFifo_D_OUT),
						  .FULL_N(hostchan_0_readLenFifo_FULL_N),
						  .EMPTY_N(hostchan_0_readLenFifo_EMPTY_N));

  // submodule hostchan_0_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_0_readReqFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_0_readReqFifo_D_IN),
						  .ENQ(hostchan_0_readReqFifo_ENQ),
						  .DEQ(hostchan_0_readReqFifo_DEQ),
						  .CLR(hostchan_0_readReqFifo_CLR),
						  .D_OUT(hostchan_0_readReqFifo_D_OUT),
						  .FULL_N(hostchan_0_readReqFifo_FULL_N),
						  .EMPTY_N(hostchan_0_readReqFifo_EMPTY_N));

  // submodule hostchan_0_verbose_ff
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) hostchan_0_verbose_ff(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_0_verbose_ff_D_IN),
						 .ENQ(hostchan_0_verbose_ff_ENQ),
						 .DEQ(hostchan_0_verbose_ff_DEQ),
						 .CLR(hostchan_0_verbose_ff_CLR),
						 .D_OUT(hostchan_0_verbose_ff_D_OUT),
						 .FULL_N(),
						 .EMPTY_N(hostchan_0_verbose_ff_EMPTY_N));

  // submodule hostchan_0_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_0_writeDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(hostchan_0_writeDataFifo_D_IN),
						    .ENQ(hostchan_0_writeDataFifo_ENQ),
						    .DEQ(hostchan_0_writeDataFifo_DEQ),
						    .CLR(hostchan_0_writeDataFifo_CLR),
						    .D_OUT(hostchan_0_writeDataFifo_D_OUT),
						    .FULL_N(hostchan_0_writeDataFifo_FULL_N),
						    .EMPTY_N(hostchan_0_writeDataFifo_EMPTY_N));

  // submodule hostchan_1_outReqFifo
  FIFO2 #(.width(32'd782),
	  .guarded(32'd1)) hostchan_1_outReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_1_outReqFifo_D_IN),
						 .ENQ(hostchan_1_outReqFifo_ENQ),
						 .DEQ(hostchan_1_outReqFifo_DEQ),
						 .CLR(hostchan_1_outReqFifo_CLR),
						 .D_OUT(hostchan_1_outReqFifo_D_OUT),
						 .FULL_N(hostchan_1_outReqFifo_FULL_N),
						 .EMPTY_N(hostchan_1_outReqFifo_EMPTY_N));

  // submodule hostchan_1_parser
  mkParser hostchan_1_parser(.CLK(CLK),
			     .RST_N(localReset_OUT_RST),
			     .frameIn_put(hostchan_1_parser_frameIn_put),
			     .set_verbosity_verbosity(hostchan_1_parser_set_verbosity_verbosity),
			     .EN_frameIn_put(hostchan_1_parser_EN_frameIn_put),
			     .EN_meta_get(hostchan_1_parser_EN_meta_get),
			     .EN_set_verbosity(hostchan_1_parser_EN_set_verbosity),
			     .RDY_frameIn_put(hostchan_1_parser_RDY_frameIn_put),
			     .meta_get(hostchan_1_parser_meta_get),
			     .RDY_meta_get(hostchan_1_parser_RDY_meta_get),
			     .RDY_set_verbosity(),
			     .read_perf_info(),
			     .RDY_read_perf_info());

  // submodule hostchan_1_pktBuff
  mkPacketBuffer_16 #(.param1("streamIn channel")) hostchan_1_pktBuff(.CLK(CLK),
								      .RST_N(localReset_OUT_RST),
								      .readServer_readReq_put(hostchan_1_pktBuff_readServer_readReq_put),
								      .set_verbosity_verbosity(hostchan_1_pktBuff_set_verbosity_verbosity),
								      .writeServer_enq_v(hostchan_1_pktBuff_writeServer_enq_v),
								      .EN_writeServer_enq(hostchan_1_pktBuff_EN_writeServer_enq),
								      .EN_readServer_readData_get(hostchan_1_pktBuff_EN_readServer_readData_get),
								      .EN_readServer_readLen_get(hostchan_1_pktBuff_EN_readServer_readLen_get),
								      .EN_readServer_readReq_put(hostchan_1_pktBuff_EN_readServer_readReq_put),
								      .EN_set_verbosity(hostchan_1_pktBuff_EN_set_verbosity),
								      .RDY_writeServer_enq(hostchan_1_pktBuff_RDY_writeServer_enq),
								      .writeServer_notFull(),
								      .RDY_writeServer_notFull(),
								      .readServer_readData_get(hostchan_1_pktBuff_readServer_readData_get),
								      .RDY_readServer_readData_get(hostchan_1_pktBuff_RDY_readServer_readData_get),
								      .readServer_readLen_get(hostchan_1_pktBuff_readServer_readLen_get),
								      .RDY_readServer_readLen_get(hostchan_1_pktBuff_RDY_readServer_readLen_get),
								      .RDY_readServer_readReq_put(hostchan_1_pktBuff_RDY_readServer_readReq_put),
								      .dbg(),
								      .RDY_dbg(),
								      .RDY_set_verbosity());

  // submodule hostchan_1_pktLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_1_pktLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_1_pktLenFifo_D_IN),
						 .ENQ(hostchan_1_pktLenFifo_ENQ),
						 .DEQ(hostchan_1_pktLenFifo_DEQ),
						 .CLR(hostchan_1_pktLenFifo_CLR),
						 .D_OUT(hostchan_1_pktLenFifo_D_OUT),
						 .FULL_N(hostchan_1_pktLenFifo_FULL_N),
						 .EMPTY_N(hostchan_1_pktLenFifo_EMPTY_N));

  // submodule hostchan_1_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_1_readDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(hostchan_1_readDataFifo_D_IN),
						   .ENQ(hostchan_1_readDataFifo_ENQ),
						   .DEQ(hostchan_1_readDataFifo_DEQ),
						   .CLR(hostchan_1_readDataFifo_CLR),
						   .D_OUT(hostchan_1_readDataFifo_D_OUT),
						   .FULL_N(hostchan_1_readDataFifo_FULL_N),
						   .EMPTY_N(hostchan_1_readDataFifo_EMPTY_N));

  // submodule hostchan_1_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_1_readLenFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_1_readLenFifo_D_IN),
						  .ENQ(hostchan_1_readLenFifo_ENQ),
						  .DEQ(hostchan_1_readLenFifo_DEQ),
						  .CLR(hostchan_1_readLenFifo_CLR),
						  .D_OUT(hostchan_1_readLenFifo_D_OUT),
						  .FULL_N(hostchan_1_readLenFifo_FULL_N),
						  .EMPTY_N(hostchan_1_readLenFifo_EMPTY_N));

  // submodule hostchan_1_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) hostchan_1_readReqFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(hostchan_1_readReqFifo_D_IN),
						  .ENQ(hostchan_1_readReqFifo_ENQ),
						  .DEQ(hostchan_1_readReqFifo_DEQ),
						  .CLR(hostchan_1_readReqFifo_CLR),
						  .D_OUT(hostchan_1_readReqFifo_D_OUT),
						  .FULL_N(hostchan_1_readReqFifo_FULL_N),
						  .EMPTY_N(hostchan_1_readReqFifo_EMPTY_N));

  // submodule hostchan_1_verbose_ff
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) hostchan_1_verbose_ff(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(hostchan_1_verbose_ff_D_IN),
						 .ENQ(hostchan_1_verbose_ff_ENQ),
						 .DEQ(hostchan_1_verbose_ff_DEQ),
						 .CLR(hostchan_1_verbose_ff_CLR),
						 .D_OUT(hostchan_1_verbose_ff_D_OUT),
						 .FULL_N(),
						 .EMPTY_N(hostchan_1_verbose_ff_EMPTY_N));

  // submodule hostchan_1_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) hostchan_1_writeDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(hostchan_1_writeDataFifo_D_IN),
						    .ENQ(hostchan_1_writeDataFifo_ENQ),
						    .DEQ(hostchan_1_writeDataFifo_DEQ),
						    .CLR(hostchan_1_writeDataFifo_CLR),
						    .D_OUT(hostchan_1_writeDataFifo_D_OUT),
						    .FULL_N(hostchan_1_writeDataFifo_FULL_N),
						    .EMPTY_N(hostchan_1_writeDataFifo_EMPTY_N));

  // submodule input_queues_0
  mkPacketBuffer_64 #(.param1("inputQ 0")) input_queues_0(.CLK(CLK),
							  .RST_N(localReset_OUT_RST),
							  .readServer_readReq_put(input_queues_0_readServer_readReq_put),
							  .set_verbosity_verbosity(input_queues_0_set_verbosity_verbosity),
							  .writeServer_enq_v(input_queues_0_writeServer_enq_v),
							  .EN_writeServer_enq(input_queues_0_EN_writeServer_enq),
							  .EN_readServer_readData_get(input_queues_0_EN_readServer_readData_get),
							  .EN_readServer_readLen_get(input_queues_0_EN_readServer_readLen_get),
							  .EN_readServer_readReq_put(input_queues_0_EN_readServer_readReq_put),
							  .EN_set_verbosity(input_queues_0_EN_set_verbosity),
							  .RDY_writeServer_enq(input_queues_0_RDY_writeServer_enq),
							  .writeServer_notFull(),
							  .RDY_writeServer_notFull(),
							  .readServer_readData_get(input_queues_0_readServer_readData_get),
							  .RDY_readServer_readData_get(input_queues_0_RDY_readServer_readData_get),
							  .readServer_readLen_get(input_queues_0_readServer_readLen_get),
							  .RDY_readServer_readLen_get(input_queues_0_RDY_readServer_readLen_get),
							  .RDY_readServer_readReq_put(input_queues_0_RDY_readServer_readReq_put),
							  .dbg(),
							  .RDY_dbg(),
							  .RDY_set_verbosity());

  // submodule input_queues_1
  mkPacketBuffer_64 #(.param1("inputQ 1")) input_queues_1(.CLK(CLK),
							  .RST_N(localReset_OUT_RST),
							  .readServer_readReq_put(input_queues_1_readServer_readReq_put),
							  .set_verbosity_verbosity(input_queues_1_set_verbosity_verbosity),
							  .writeServer_enq_v(input_queues_1_writeServer_enq_v),
							  .EN_writeServer_enq(input_queues_1_EN_writeServer_enq),
							  .EN_readServer_readData_get(input_queues_1_EN_readServer_readData_get),
							  .EN_readServer_readLen_get(input_queues_1_EN_readServer_readLen_get),
							  .EN_readServer_readReq_put(input_queues_1_EN_readServer_readReq_put),
							  .EN_set_verbosity(input_queues_1_EN_set_verbosity),
							  .RDY_writeServer_enq(input_queues_1_RDY_writeServer_enq),
							  .writeServer_notFull(),
							  .RDY_writeServer_notFull(),
							  .readServer_readData_get(input_queues_1_readServer_readData_get),
							  .RDY_readServer_readData_get(input_queues_1_RDY_readServer_readData_get),
							  .readServer_readLen_get(input_queues_1_readServer_readLen_get),
							  .RDY_readServer_readLen_get(input_queues_1_RDY_readServer_readLen_get),
							  .RDY_readServer_readReq_put(input_queues_1_RDY_readServer_readReq_put),
							  .dbg(),
							  .RDY_dbg(),
							  .RDY_set_verbosity());

  // submodule input_queues_2
  mkPacketBuffer_64 #(.param1("inputQ 2")) input_queues_2(.CLK(CLK),
							  .RST_N(localReset_OUT_RST),
							  .readServer_readReq_put(input_queues_2_readServer_readReq_put),
							  .set_verbosity_verbosity(input_queues_2_set_verbosity_verbosity),
							  .writeServer_enq_v(input_queues_2_writeServer_enq_v),
							  .EN_writeServer_enq(input_queues_2_EN_writeServer_enq),
							  .EN_readServer_readData_get(input_queues_2_EN_readServer_readData_get),
							  .EN_readServer_readLen_get(input_queues_2_EN_readServer_readLen_get),
							  .EN_readServer_readReq_put(input_queues_2_EN_readServer_readReq_put),
							  .EN_set_verbosity(input_queues_2_EN_set_verbosity),
							  .RDY_writeServer_enq(input_queues_2_RDY_writeServer_enq),
							  .writeServer_notFull(),
							  .RDY_writeServer_notFull(),
							  .readServer_readData_get(input_queues_2_readServer_readData_get),
							  .RDY_readServer_readData_get(input_queues_2_RDY_readServer_readData_get),
							  .readServer_readLen_get(input_queues_2_readServer_readLen_get),
							  .RDY_readServer_readLen_get(input_queues_2_RDY_readServer_readLen_get),
							  .RDY_readServer_readReq_put(input_queues_2_RDY_readServer_readReq_put),
							  .dbg(),
							  .RDY_dbg(),
							  .RDY_set_verbosity());

  // submodule localReset
  SyncReset #(.RSTDELAY(32'd1)) localReset(.CLK(CLK),
					   .IN_RST(RST_N),
					   .OUT_RST(localReset_OUT_RST));

  // submodule macToRing_0_gearbox_in_ff
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) macToRing_0_gearbox_in_ff(.RST(RST_N_p1),
						     .CLK(CLK_p0),
						     .D_IN(macToRing_0_gearbox_in_ff_D_IN),
						     .ENQ(macToRing_0_gearbox_in_ff_ENQ),
						     .DEQ(macToRing_0_gearbox_in_ff_DEQ),
						     .CLR(macToRing_0_gearbox_in_ff_CLR),
						     .D_OUT(macToRing_0_gearbox_in_ff_D_OUT),
						     .FULL_N(macToRing_0_gearbox_in_ff_FULL_N),
						     .EMPTY_N(macToRing_0_gearbox_in_ff_EMPTY_N));

  // submodule macToRing_0_gearbox_out_ff
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) macToRing_0_gearbox_out_ff(.RST(RST_N_p1),
						      .CLK(CLK_p0),
						      .D_IN(macToRing_0_gearbox_out_ff_D_IN),
						      .ENQ(macToRing_0_gearbox_out_ff_ENQ),
						      .DEQ(macToRing_0_gearbox_out_ff_DEQ),
						      .CLR(macToRing_0_gearbox_out_ff_CLR),
						      .D_OUT(macToRing_0_gearbox_out_ff_D_OUT),
						      .FULL_N(macToRing_0_gearbox_out_ff_FULL_N),
						      .EMPTY_N(macToRing_0_gearbox_out_ff_EMPTY_N));

  // submodule macToRing_0_writeDataFifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) macToRing_0_writeDataFifo(.sCLK(CLK_p0),
							  .dCLK(CLK),
							  .sRST(RST_N_p1),
							  .sD_IN(macToRing_0_writeDataFifo_sD_IN),
							  .sENQ(macToRing_0_writeDataFifo_sENQ),
							  .dDEQ(macToRing_0_writeDataFifo_dDEQ),
							  .sFULL_N(macToRing_0_writeDataFifo_sFULL_N),
							  .dEMPTY_N(macToRing_0_writeDataFifo_dEMPTY_N),
							  .dD_OUT(macToRing_0_writeDataFifo_dD_OUT));

  // submodule macToRing_1_gearbox_in_ff
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) macToRing_1_gearbox_in_ff(.RST(RST_N_p1),
						     .CLK(CLK_p0),
						     .D_IN(macToRing_1_gearbox_in_ff_D_IN),
						     .ENQ(macToRing_1_gearbox_in_ff_ENQ),
						     .DEQ(macToRing_1_gearbox_in_ff_DEQ),
						     .CLR(macToRing_1_gearbox_in_ff_CLR),
						     .D_OUT(macToRing_1_gearbox_in_ff_D_OUT),
						     .FULL_N(macToRing_1_gearbox_in_ff_FULL_N),
						     .EMPTY_N(macToRing_1_gearbox_in_ff_EMPTY_N));

  // submodule macToRing_1_gearbox_out_ff
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) macToRing_1_gearbox_out_ff(.RST(RST_N_p1),
						      .CLK(CLK_p0),
						      .D_IN(macToRing_1_gearbox_out_ff_D_IN),
						      .ENQ(macToRing_1_gearbox_out_ff_ENQ),
						      .DEQ(macToRing_1_gearbox_out_ff_DEQ),
						      .CLR(macToRing_1_gearbox_out_ff_CLR),
						      .D_OUT(macToRing_1_gearbox_out_ff_D_OUT),
						      .FULL_N(macToRing_1_gearbox_out_ff_FULL_N),
						      .EMPTY_N(macToRing_1_gearbox_out_ff_EMPTY_N));

  // submodule macToRing_1_writeDataFifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) macToRing_1_writeDataFifo(.sCLK(CLK_p0),
							  .dCLK(CLK),
							  .sRST(RST_N_p1),
							  .sD_IN(macToRing_1_writeDataFifo_sD_IN),
							  .sENQ(macToRing_1_writeDataFifo_sENQ),
							  .dDEQ(macToRing_1_writeDataFifo_dDEQ),
							  .sFULL_N(macToRing_1_writeDataFifo_sFULL_N),
							  .dEMPTY_N(macToRing_1_writeDataFifo_dEMPTY_N),
							  .dD_OUT(macToRing_1_writeDataFifo_dD_OUT));

  // submodule meta_ff_0
  FIFO2 #(.width(32'd782),
	  .guarded(32'd1)) meta_ff_0(.RST(localReset_OUT_RST),
				     .CLK(CLK),
				     .D_IN(meta_ff_0_D_IN),
				     .ENQ(meta_ff_0_ENQ),
				     .DEQ(meta_ff_0_DEQ),
				     .CLR(meta_ff_0_CLR),
				     .D_OUT(meta_ff_0_D_OUT),
				     .FULL_N(meta_ff_0_FULL_N),
				     .EMPTY_N(meta_ff_0_EMPTY_N));

  // submodule meta_ff_0_1
  FIFO2 #(.width(32'd782),
	  .guarded(32'd1)) meta_ff_0_1(.RST(localReset_OUT_RST),
				       .CLK(CLK),
				       .D_IN(meta_ff_0_1_D_IN),
				       .ENQ(meta_ff_0_1_ENQ),
				       .DEQ(meta_ff_0_1_DEQ),
				       .CLR(meta_ff_0_1_CLR),
				       .D_OUT(meta_ff_0_1_D_OUT),
				       .FULL_N(meta_ff_0_1_FULL_N),
				       .EMPTY_N(meta_ff_0_1_EMPTY_N));

  // submodule meta_ff_1
  FIFO2 #(.width(32'd782),
	  .guarded(32'd1)) meta_ff_1(.RST(localReset_OUT_RST),
				     .CLK(CLK),
				     .D_IN(meta_ff_1_D_IN),
				     .ENQ(meta_ff_1_ENQ),
				     .DEQ(meta_ff_1_DEQ),
				     .CLR(meta_ff_1_CLR),
				     .D_OUT(meta_ff_1_D_OUT),
				     .FULL_N(meta_ff_1_FULL_N),
				     .EMPTY_N(meta_ff_1_EMPTY_N));

  // submodule meta_ff_1_1
  FIFO2 #(.width(32'd782),
	  .guarded(32'd1)) meta_ff_1_1(.RST(localReset_OUT_RST),
				       .CLK(CLK),
				       .D_IN(meta_ff_1_1_D_IN),
				       .ENQ(meta_ff_1_1_ENQ),
				       .DEQ(meta_ff_1_1_DEQ),
				       .CLR(meta_ff_1_1_CLR),
				       .D_OUT(meta_ff_1_1_D_OUT),
				       .FULL_N(meta_ff_1_1_FULL_N),
				       .EMPTY_N(meta_ff_1_1_EMPTY_N));

  // submodule meta_ff_2
  FIFO2 #(.width(32'd782),
	  .guarded(32'd1)) meta_ff_2(.RST(localReset_OUT_RST),
				     .CLK(CLK),
				     .D_IN(meta_ff_2_D_IN),
				     .ENQ(meta_ff_2_ENQ),
				     .DEQ(meta_ff_2_DEQ),
				     .CLR(meta_ff_2_CLR),
				     .D_OUT(meta_ff_2_D_OUT),
				     .FULL_N(meta_ff_2_FULL_N),
				     .EMPTY_N(meta_ff_2_EMPTY_N));

  // submodule meta_ff_2_1
  FIFO2 #(.width(32'd782),
	  .guarded(32'd1)) meta_ff_2_1(.RST(localReset_OUT_RST),
				       .CLK(CLK),
				       .D_IN(meta_ff_2_1_D_IN),
				       .ENQ(meta_ff_2_1_ENQ),
				       .DEQ(meta_ff_2_1_DEQ),
				       .CLR(meta_ff_2_1_CLR),
				       .D_OUT(meta_ff_2_1_D_OUT),
				       .FULL_N(meta_ff_2_1_FULL_N),
				       .EMPTY_N(meta_ff_2_1_EMPTY_N));

  // submodule modifier_0
  mkPacketModifier modifier_0(.CLK(CLK),
			      .RST_N(localReset_OUT_RST),
			      .prev_enq_v(modifier_0_prev_enq_v),
			      .set_verbosity_verbosity(modifier_0_set_verbosity_verbosity),
			      .writeServer_enq_v(modifier_0_writeServer_enq_v),
			      .EN_prev_enq(modifier_0_EN_prev_enq),
			      .EN_writeServer_enq(modifier_0_EN_writeServer_enq),
			      .EN_writeClient_deq(modifier_0_EN_writeClient_deq),
			      .EN_set_verbosity(modifier_0_EN_set_verbosity),
			      .RDY_prev_enq(modifier_0_RDY_prev_enq),
			      .prev_notFull(),
			      .RDY_prev_notFull(),
			      .RDY_writeServer_enq(modifier_0_RDY_writeServer_enq),
			      .writeServer_notFull(),
			      .RDY_writeServer_notFull(),
			      .writeClient_first(modifier_0_writeClient_first),
			      .RDY_writeClient_first(modifier_0_RDY_writeClient_first),
			      .RDY_writeClient_deq(modifier_0_RDY_writeClient_deq),
			      .writeClient_notEmpty(),
			      .RDY_writeClient_notEmpty(),
			      .RDY_set_verbosity());

  // submodule modifier_1
  mkPacketModifier modifier_1(.CLK(CLK),
			      .RST_N(localReset_OUT_RST),
			      .prev_enq_v(modifier_1_prev_enq_v),
			      .set_verbosity_verbosity(modifier_1_set_verbosity_verbosity),
			      .writeServer_enq_v(modifier_1_writeServer_enq_v),
			      .EN_prev_enq(modifier_1_EN_prev_enq),
			      .EN_writeServer_enq(modifier_1_EN_writeServer_enq),
			      .EN_writeClient_deq(modifier_1_EN_writeClient_deq),
			      .EN_set_verbosity(modifier_1_EN_set_verbosity),
			      .RDY_prev_enq(modifier_1_RDY_prev_enq),
			      .prev_notFull(),
			      .RDY_prev_notFull(),
			      .RDY_writeServer_enq(modifier_1_RDY_writeServer_enq),
			      .writeServer_notFull(),
			      .RDY_writeServer_notFull(),
			      .writeClient_first(modifier_1_writeClient_first),
			      .RDY_writeClient_first(modifier_1_RDY_writeClient_first),
			      .RDY_writeClient_deq(modifier_1_RDY_writeClient_deq),
			      .writeClient_notEmpty(),
			      .RDY_writeClient_notEmpty(),
			      .RDY_set_verbosity());

  // submodule modifier_2
  mkPacketModifier modifier_2(.CLK(CLK),
			      .RST_N(localReset_OUT_RST),
			      .prev_enq_v(modifier_2_prev_enq_v),
			      .set_verbosity_verbosity(modifier_2_set_verbosity_verbosity),
			      .writeServer_enq_v(modifier_2_writeServer_enq_v),
			      .EN_prev_enq(modifier_2_EN_prev_enq),
			      .EN_writeServer_enq(modifier_2_EN_writeServer_enq),
			      .EN_writeClient_deq(modifier_2_EN_writeClient_deq),
			      .EN_set_verbosity(modifier_2_EN_set_verbosity),
			      .RDY_prev_enq(modifier_2_RDY_prev_enq),
			      .prev_notFull(),
			      .RDY_prev_notFull(),
			      .RDY_writeServer_enq(modifier_2_RDY_writeServer_enq),
			      .writeServer_notFull(),
			      .RDY_writeServer_notFull(),
			      .writeClient_first(modifier_2_writeClient_first),
			      .RDY_writeClient_first(modifier_2_RDY_writeClient_first),
			      .RDY_writeClient_deq(modifier_2_RDY_writeClient_deq),
			      .writeClient_notEmpty(),
			      .RDY_writeClient_notEmpty(),
			      .RDY_set_verbosity());

  // submodule outReqFifo_0
  FIFO2 #(.width(32'd782),
	  .guarded(32'd1)) outReqFifo_0(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(outReqFifo_0_D_IN),
					.ENQ(outReqFifo_0_ENQ),
					.DEQ(outReqFifo_0_DEQ),
					.CLR(outReqFifo_0_CLR),
					.D_OUT(outReqFifo_0_D_OUT),
					.FULL_N(outReqFifo_0_FULL_N),
					.EMPTY_N(outReqFifo_0_EMPTY_N));

  // submodule output_queues_0
  mkPacketBuffer_64 #(.param1("outputQ 0")) output_queues_0(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_0_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_0_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_0_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_0_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_0_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_0_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_0_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_0_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_0_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_0_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_0_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_0_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_0_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_0_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_1
  mkPacketBuffer_64 #(.param1("outputQ 1")) output_queues_1(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_1_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_1_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_1_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_1_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_1_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_1_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_1_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_1_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_1_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_1_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_1_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_1_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_1_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_1_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_2
  mkPacketBuffer_64 #(.param1("outputQ 2")) output_queues_2(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_2_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_2_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_2_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_2_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_2_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_2_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_2_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_2_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_2_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_2_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_2_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_2_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_2_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_2_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule output_queues_3
  mkPacketBuffer_64 #(.param1("outputQ 3")) output_queues_3(.CLK(CLK),
							    .RST_N(localReset_OUT_RST),
							    .readServer_readReq_put(output_queues_3_readServer_readReq_put),
							    .set_verbosity_verbosity(output_queues_3_set_verbosity_verbosity),
							    .writeServer_enq_v(output_queues_3_writeServer_enq_v),
							    .EN_writeServer_enq(output_queues_3_EN_writeServer_enq),
							    .EN_readServer_readData_get(output_queues_3_EN_readServer_readData_get),
							    .EN_readServer_readLen_get(output_queues_3_EN_readServer_readLen_get),
							    .EN_readServer_readReq_put(output_queues_3_EN_readServer_readReq_put),
							    .EN_set_verbosity(output_queues_3_EN_set_verbosity),
							    .RDY_writeServer_enq(output_queues_3_RDY_writeServer_enq),
							    .writeServer_notFull(),
							    .RDY_writeServer_notFull(),
							    .readServer_readData_get(output_queues_3_readServer_readData_get),
							    .RDY_readServer_readData_get(output_queues_3_RDY_readServer_readData_get),
							    .readServer_readLen_get(output_queues_3_readServer_readLen_get),
							    .RDY_readServer_readLen_get(output_queues_3_RDY_readServer_readLen_get),
							    .RDY_readServer_readReq_put(output_queues_3_RDY_readServer_readReq_put),
							    .dbg(),
							    .RDY_dbg(),
							    .RDY_set_verbosity());

  // submodule parser_0
  mkParser parser_0(.CLK(CLK),
		    .RST_N(localReset_OUT_RST),
		    .frameIn_put(parser_0_frameIn_put),
		    .set_verbosity_verbosity(parser_0_set_verbosity_verbosity),
		    .EN_frameIn_put(parser_0_EN_frameIn_put),
		    .EN_meta_get(parser_0_EN_meta_get),
		    .EN_set_verbosity(parser_0_EN_set_verbosity),
		    .RDY_frameIn_put(parser_0_RDY_frameIn_put),
		    .meta_get(parser_0_meta_get),
		    .RDY_meta_get(parser_0_RDY_meta_get),
		    .RDY_set_verbosity(),
		    .read_perf_info(),
		    .RDY_read_perf_info());

  // submodule pktBuff_0
  mkPacketBuffer_16 #(.param1("streamIn channel")) pktBuff_0(.CLK(CLK),
							     .RST_N(localReset_OUT_RST),
							     .readServer_readReq_put(pktBuff_0_readServer_readReq_put),
							     .set_verbosity_verbosity(pktBuff_0_set_verbosity_verbosity),
							     .writeServer_enq_v(pktBuff_0_writeServer_enq_v),
							     .EN_writeServer_enq(pktBuff_0_EN_writeServer_enq),
							     .EN_readServer_readData_get(pktBuff_0_EN_readServer_readData_get),
							     .EN_readServer_readLen_get(pktBuff_0_EN_readServer_readLen_get),
							     .EN_readServer_readReq_put(pktBuff_0_EN_readServer_readReq_put),
							     .EN_set_verbosity(pktBuff_0_EN_set_verbosity),
							     .RDY_writeServer_enq(pktBuff_0_RDY_writeServer_enq),
							     .writeServer_notFull(pktBuff_0_writeServer_notFull),
							     .RDY_writeServer_notFull(),
							     .readServer_readData_get(pktBuff_0_readServer_readData_get),
							     .RDY_readServer_readData_get(pktBuff_0_RDY_readServer_readData_get),
							     .readServer_readLen_get(pktBuff_0_readServer_readLen_get),
							     .RDY_readServer_readLen_get(pktBuff_0_RDY_readServer_readLen_get),
							     .RDY_readServer_readReq_put(pktBuff_0_RDY_readServer_readReq_put),
							     .dbg(),
							     .RDY_dbg(),
							     .RDY_set_verbosity());

  // submodule pktBuff_0_fifoEop
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_0_fifoEop(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_0_fifoEop_D_IN),
					     .ENQ(pktBuff_0_fifoEop_ENQ),
					     .DEQ(pktBuff_0_fifoEop_DEQ),
					     .CLR(pktBuff_0_fifoEop_CLR),
					     .D_OUT(pktBuff_0_fifoEop_D_OUT),
					     .FULL_N(pktBuff_0_fifoEop_FULL_N),
					     .EMPTY_N(pktBuff_0_fifoEop_EMPTY_N));

  // submodule pktBuff_0_fifoLen
  SizedFIFO #(.p1width(32'd16),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) pktBuff_0_fifoLen(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_0_fifoLen_D_IN),
						 .ENQ(pktBuff_0_fifoLen_ENQ),
						 .DEQ(pktBuff_0_fifoLen_DEQ),
						 .CLR(pktBuff_0_fifoLen_CLR),
						 .D_OUT(pktBuff_0_fifoLen_D_OUT),
						 .FULL_N(pktBuff_0_fifoLen_FULL_N),
						 .EMPTY_N(pktBuff_0_fifoLen_EMPTY_N));

  // submodule pktBuff_0_fifoReadData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_0_fifoReadData(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_0_fifoReadData_D_IN),
						  .ENQ(pktBuff_0_fifoReadData_ENQ),
						  .DEQ(pktBuff_0_fifoReadData_DEQ),
						  .CLR(pktBuff_0_fifoReadData_CLR),
						  .D_OUT(pktBuff_0_fifoReadData_D_OUT),
						  .FULL_N(pktBuff_0_fifoReadData_FULL_N),
						  .EMPTY_N(pktBuff_0_fifoReadData_EMPTY_N));

  // submodule pktBuff_0_fifoReadReq
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_0_fifoReadReq(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_0_fifoReadReq_D_IN),
						 .ENQ(pktBuff_0_fifoReadReq_ENQ),
						 .DEQ(pktBuff_0_fifoReadReq_DEQ),
						 .CLR(pktBuff_0_fifoReadReq_CLR),
						 .D_OUT(),
						 .FULL_N(pktBuff_0_fifoReadReq_FULL_N),
						 .EMPTY_N(pktBuff_0_fifoReadReq_EMPTY_N));

  // submodule pktBuff_0_fifoWriteData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_0_fifoWriteData(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_0_fifoWriteData_D_IN),
						   .ENQ(pktBuff_0_fifoWriteData_ENQ),
						   .DEQ(pktBuff_0_fifoWriteData_DEQ),
						   .CLR(pktBuff_0_fifoWriteData_CLR),
						   .D_OUT(pktBuff_0_fifoWriteData_D_OUT),
						   .FULL_N(pktBuff_0_fifoWriteData_FULL_N),
						   .EMPTY_N(pktBuff_0_fifoWriteData_EMPTY_N));

  // submodule pktBuff_0_incomingReqs
  FIFO2 #(.width(32'd186),
	  .guarded(32'd1)) pktBuff_0_incomingReqs(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_0_incomingReqs_D_IN),
						  .ENQ(pktBuff_0_incomingReqs_ENQ),
						  .DEQ(pktBuff_0_incomingReqs_DEQ),
						  .CLR(pktBuff_0_incomingReqs_CLR),
						  .D_OUT(pktBuff_0_incomingReqs_D_OUT),
						  .FULL_N(pktBuff_0_incomingReqs_FULL_N),
						  .EMPTY_N(pktBuff_0_incomingReqs_EMPTY_N));

  // submodule pktBuff_0_localReset
  SyncReset #(.RSTDELAY(32'd1)) pktBuff_0_localReset(.CLK(CLK),
						     .IN_RST(localReset_OUT_RST),
						     .OUT_RST());

  // submodule pktBuff_0_memBuffer_memory
  BRAM2 #(.PIPELINED(1'd1),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd178),
	  .MEMSIZE(9'd256)) pktBuff_0_memBuffer_memory(.CLKA(CLK),
						       .CLKB(CLK),
						       .ADDRA(pktBuff_0_memBuffer_memory_ADDRA),
						       .ADDRB(pktBuff_0_memBuffer_memory_ADDRB),
						       .DIA(pktBuff_0_memBuffer_memory_DIA),
						       .DIB(pktBuff_0_memBuffer_memory_DIB),
						       .WEA(pktBuff_0_memBuffer_memory_WEA),
						       .WEB(pktBuff_0_memBuffer_memory_WEB),
						       .ENA(pktBuff_0_memBuffer_memory_ENA),
						       .ENB(pktBuff_0_memBuffer_memory_ENB),
						       .DOA(pktBuff_0_memBuffer_memory_DOA),
						       .DOB(pktBuff_0_memBuffer_memory_DOB));

  // submodule pktBuff_0_memBuffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_0_memBuffer_serverAdapterA_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_0_memBuffer_serverAdapterA_outDataCore_D_IN),
									      .ENQ(pktBuff_0_memBuffer_serverAdapterA_outDataCore_ENQ),
									      .DEQ(pktBuff_0_memBuffer_serverAdapterA_outDataCore_DEQ),
									      .CLR(pktBuff_0_memBuffer_serverAdapterA_outDataCore_CLR),
									      .D_OUT(),
									      .FULL_N(pktBuff_0_memBuffer_serverAdapterA_outDataCore_FULL_N),
									      .EMPTY_N());

  // submodule pktBuff_0_memBuffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_0_memBuffer_serverAdapterB_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_IN),
									      .ENQ(pktBuff_0_memBuffer_serverAdapterB_outDataCore_ENQ),
									      .DEQ(pktBuff_0_memBuffer_serverAdapterB_outDataCore_DEQ),
									      .CLR(pktBuff_0_memBuffer_serverAdapterB_outDataCore_CLR),
									      .D_OUT(pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_OUT),
									      .FULL_N(pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N),
									      .EMPTY_N(pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N));

  // submodule pktBuff_0_meta_ff
  FIFO2 #(.width(32'd782),
	  .guarded(32'd1)) pktBuff_0_meta_ff(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_0_meta_ff_D_IN),
					     .ENQ(pktBuff_0_meta_ff_ENQ),
					     .DEQ(pktBuff_0_meta_ff_DEQ),
					     .CLR(pktBuff_0_meta_ff_CLR),
					     .D_OUT(),
					     .FULL_N(pktBuff_0_meta_ff_FULL_N),
					     .EMPTY_N(pktBuff_0_meta_ff_EMPTY_N));

  // submodule pktBuff_0_pktBuff
  mkPacketBuffer_16 #(.param1("store&fwd 0")) pktBuff_0_pktBuff(.CLK(CLK),
								.RST_N(localReset_OUT_RST),
								.readServer_readReq_put(pktBuff_0_pktBuff_readServer_readReq_put),
								.set_verbosity_verbosity(pktBuff_0_pktBuff_set_verbosity_verbosity),
								.writeServer_enq_v(pktBuff_0_pktBuff_writeServer_enq_v),
								.EN_writeServer_enq(pktBuff_0_pktBuff_EN_writeServer_enq),
								.EN_readServer_readData_get(pktBuff_0_pktBuff_EN_readServer_readData_get),
								.EN_readServer_readLen_get(pktBuff_0_pktBuff_EN_readServer_readLen_get),
								.EN_readServer_readReq_put(pktBuff_0_pktBuff_EN_readServer_readReq_put),
								.EN_set_verbosity(pktBuff_0_pktBuff_EN_set_verbosity),
								.RDY_writeServer_enq(pktBuff_0_pktBuff_RDY_writeServer_enq),
								.writeServer_notFull(),
								.RDY_writeServer_notFull(),
								.readServer_readData_get(pktBuff_0_pktBuff_readServer_readData_get),
								.RDY_readServer_readData_get(pktBuff_0_pktBuff_RDY_readServer_readData_get),
								.readServer_readLen_get(pktBuff_0_pktBuff_readServer_readLen_get),
								.RDY_readServer_readLen_get(pktBuff_0_pktBuff_RDY_readServer_readLen_get),
								.RDY_readServer_readReq_put(pktBuff_0_pktBuff_RDY_readServer_readReq_put),
								.dbg(),
								.RDY_dbg(),
								.RDY_set_verbosity());

  // submodule pktBuff_0_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_0_readDataFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_0_readDataFifo_D_IN),
						  .ENQ(pktBuff_0_readDataFifo_ENQ),
						  .DEQ(pktBuff_0_readDataFifo_DEQ),
						  .CLR(pktBuff_0_readDataFifo_CLR),
						  .D_OUT(pktBuff_0_readDataFifo_D_OUT),
						  .FULL_N(pktBuff_0_readDataFifo_FULL_N),
						  .EMPTY_N(pktBuff_0_readDataFifo_EMPTY_N));

  // submodule pktBuff_0_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_0_readLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_0_readLenFifo_D_IN),
						 .ENQ(pktBuff_0_readLenFifo_ENQ),
						 .DEQ(pktBuff_0_readLenFifo_DEQ),
						 .CLR(pktBuff_0_readLenFifo_CLR),
						 .D_OUT(pktBuff_0_readLenFifo_D_OUT),
						 .FULL_N(pktBuff_0_readLenFifo_FULL_N),
						 .EMPTY_N(pktBuff_0_readLenFifo_EMPTY_N));

  // submodule pktBuff_0_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_0_readReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_0_readReqFifo_D_IN),
						 .ENQ(pktBuff_0_readReqFifo_ENQ),
						 .DEQ(pktBuff_0_readReqFifo_DEQ),
						 .CLR(pktBuff_0_readReqFifo_CLR),
						 .D_OUT(pktBuff_0_readReqFifo_D_OUT),
						 .FULL_N(pktBuff_0_readReqFifo_FULL_N),
						 .EMPTY_N(pktBuff_0_readReqFifo_EMPTY_N));

  // submodule pktBuff_0_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_0_writeDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_0_writeDataFifo_D_IN),
						   .ENQ(pktBuff_0_writeDataFifo_ENQ),
						   .DEQ(pktBuff_0_writeDataFifo_DEQ),
						   .CLR(pktBuff_0_writeDataFifo_CLR),
						   .D_OUT(pktBuff_0_writeDataFifo_D_OUT),
						   .FULL_N(pktBuff_0_writeDataFifo_FULL_N),
						   .EMPTY_N(pktBuff_0_writeDataFifo_EMPTY_N));

  // submodule pktBuff_1_fifoEop
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_1_fifoEop(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_1_fifoEop_D_IN),
					     .ENQ(pktBuff_1_fifoEop_ENQ),
					     .DEQ(pktBuff_1_fifoEop_DEQ),
					     .CLR(pktBuff_1_fifoEop_CLR),
					     .D_OUT(pktBuff_1_fifoEop_D_OUT),
					     .FULL_N(pktBuff_1_fifoEop_FULL_N),
					     .EMPTY_N(pktBuff_1_fifoEop_EMPTY_N));

  // submodule pktBuff_1_fifoLen
  SizedFIFO #(.p1width(32'd16),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) pktBuff_1_fifoLen(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_1_fifoLen_D_IN),
						 .ENQ(pktBuff_1_fifoLen_ENQ),
						 .DEQ(pktBuff_1_fifoLen_DEQ),
						 .CLR(pktBuff_1_fifoLen_CLR),
						 .D_OUT(pktBuff_1_fifoLen_D_OUT),
						 .FULL_N(pktBuff_1_fifoLen_FULL_N),
						 .EMPTY_N(pktBuff_1_fifoLen_EMPTY_N));

  // submodule pktBuff_1_fifoReadData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_1_fifoReadData(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_1_fifoReadData_D_IN),
						  .ENQ(pktBuff_1_fifoReadData_ENQ),
						  .DEQ(pktBuff_1_fifoReadData_DEQ),
						  .CLR(pktBuff_1_fifoReadData_CLR),
						  .D_OUT(pktBuff_1_fifoReadData_D_OUT),
						  .FULL_N(pktBuff_1_fifoReadData_FULL_N),
						  .EMPTY_N(pktBuff_1_fifoReadData_EMPTY_N));

  // submodule pktBuff_1_fifoReadReq
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_1_fifoReadReq(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_1_fifoReadReq_D_IN),
						 .ENQ(pktBuff_1_fifoReadReq_ENQ),
						 .DEQ(pktBuff_1_fifoReadReq_DEQ),
						 .CLR(pktBuff_1_fifoReadReq_CLR),
						 .D_OUT(),
						 .FULL_N(pktBuff_1_fifoReadReq_FULL_N),
						 .EMPTY_N(pktBuff_1_fifoReadReq_EMPTY_N));

  // submodule pktBuff_1_fifoWriteData
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_1_fifoWriteData(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_1_fifoWriteData_D_IN),
						   .ENQ(pktBuff_1_fifoWriteData_ENQ),
						   .DEQ(pktBuff_1_fifoWriteData_DEQ),
						   .CLR(pktBuff_1_fifoWriteData_CLR),
						   .D_OUT(pktBuff_1_fifoWriteData_D_OUT),
						   .FULL_N(pktBuff_1_fifoWriteData_FULL_N),
						   .EMPTY_N(pktBuff_1_fifoWriteData_EMPTY_N));

  // submodule pktBuff_1_incomingReqs
  FIFO2 #(.width(32'd186),
	  .guarded(32'd1)) pktBuff_1_incomingReqs(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_1_incomingReqs_D_IN),
						  .ENQ(pktBuff_1_incomingReqs_ENQ),
						  .DEQ(pktBuff_1_incomingReqs_DEQ),
						  .CLR(pktBuff_1_incomingReqs_CLR),
						  .D_OUT(pktBuff_1_incomingReqs_D_OUT),
						  .FULL_N(pktBuff_1_incomingReqs_FULL_N),
						  .EMPTY_N(pktBuff_1_incomingReqs_EMPTY_N));

  // submodule pktBuff_1_localReset
  SyncReset #(.RSTDELAY(32'd1)) pktBuff_1_localReset(.CLK(CLK),
						     .IN_RST(localReset_OUT_RST),
						     .OUT_RST());

  // submodule pktBuff_1_memBuffer_memory
  BRAM2 #(.PIPELINED(1'd1),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd178),
	  .MEMSIZE(9'd256)) pktBuff_1_memBuffer_memory(.CLKA(CLK),
						       .CLKB(CLK),
						       .ADDRA(pktBuff_1_memBuffer_memory_ADDRA),
						       .ADDRB(pktBuff_1_memBuffer_memory_ADDRB),
						       .DIA(pktBuff_1_memBuffer_memory_DIA),
						       .DIB(pktBuff_1_memBuffer_memory_DIB),
						       .WEA(pktBuff_1_memBuffer_memory_WEA),
						       .WEB(pktBuff_1_memBuffer_memory_WEB),
						       .ENA(pktBuff_1_memBuffer_memory_ENA),
						       .ENB(pktBuff_1_memBuffer_memory_ENB),
						       .DOA(pktBuff_1_memBuffer_memory_DOA),
						       .DOB(pktBuff_1_memBuffer_memory_DOB));

  // submodule pktBuff_1_memBuffer_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_1_memBuffer_serverAdapterA_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_1_memBuffer_serverAdapterA_outDataCore_D_IN),
									      .ENQ(pktBuff_1_memBuffer_serverAdapterA_outDataCore_ENQ),
									      .DEQ(pktBuff_1_memBuffer_serverAdapterA_outDataCore_DEQ),
									      .CLR(pktBuff_1_memBuffer_serverAdapterA_outDataCore_CLR),
									      .D_OUT(),
									      .FULL_N(pktBuff_1_memBuffer_serverAdapterA_outDataCore_FULL_N),
									      .EMPTY_N());

  // submodule pktBuff_1_memBuffer_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd178),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) pktBuff_1_memBuffer_serverAdapterB_outDataCore(.RST(localReset_OUT_RST),
									      .CLK(CLK),
									      .D_IN(pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_IN),
									      .ENQ(pktBuff_1_memBuffer_serverAdapterB_outDataCore_ENQ),
									      .DEQ(pktBuff_1_memBuffer_serverAdapterB_outDataCore_DEQ),
									      .CLR(pktBuff_1_memBuffer_serverAdapterB_outDataCore_CLR),
									      .D_OUT(pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_OUT),
									      .FULL_N(pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N),
									      .EMPTY_N(pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N));

  // submodule pktBuff_1_meta_ff
  FIFO2 #(.width(32'd782),
	  .guarded(32'd1)) pktBuff_1_meta_ff(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_1_meta_ff_D_IN),
					     .ENQ(pktBuff_1_meta_ff_ENQ),
					     .DEQ(pktBuff_1_meta_ff_DEQ),
					     .CLR(pktBuff_1_meta_ff_CLR),
					     .D_OUT(),
					     .FULL_N(pktBuff_1_meta_ff_FULL_N),
					     .EMPTY_N(pktBuff_1_meta_ff_EMPTY_N));

  // submodule pktBuff_1_pktBuff
  mkPacketBuffer_16 #(.param1("store&fwd 1")) pktBuff_1_pktBuff(.CLK(CLK),
								.RST_N(localReset_OUT_RST),
								.readServer_readReq_put(pktBuff_1_pktBuff_readServer_readReq_put),
								.set_verbosity_verbosity(pktBuff_1_pktBuff_set_verbosity_verbosity),
								.writeServer_enq_v(pktBuff_1_pktBuff_writeServer_enq_v),
								.EN_writeServer_enq(pktBuff_1_pktBuff_EN_writeServer_enq),
								.EN_readServer_readData_get(pktBuff_1_pktBuff_EN_readServer_readData_get),
								.EN_readServer_readLen_get(pktBuff_1_pktBuff_EN_readServer_readLen_get),
								.EN_readServer_readReq_put(pktBuff_1_pktBuff_EN_readServer_readReq_put),
								.EN_set_verbosity(pktBuff_1_pktBuff_EN_set_verbosity),
								.RDY_writeServer_enq(pktBuff_1_pktBuff_RDY_writeServer_enq),
								.writeServer_notFull(),
								.RDY_writeServer_notFull(),
								.readServer_readData_get(pktBuff_1_pktBuff_readServer_readData_get),
								.RDY_readServer_readData_get(pktBuff_1_pktBuff_RDY_readServer_readData_get),
								.readServer_readLen_get(pktBuff_1_pktBuff_readServer_readLen_get),
								.RDY_readServer_readLen_get(pktBuff_1_pktBuff_RDY_readServer_readLen_get),
								.RDY_readServer_readReq_put(pktBuff_1_pktBuff_RDY_readServer_readReq_put),
								.dbg(),
								.RDY_dbg(),
								.RDY_set_verbosity());

  // submodule pktBuff_1_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_1_readDataFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_1_readDataFifo_D_IN),
						  .ENQ(pktBuff_1_readDataFifo_ENQ),
						  .DEQ(pktBuff_1_readDataFifo_DEQ),
						  .CLR(pktBuff_1_readDataFifo_CLR),
						  .D_OUT(pktBuff_1_readDataFifo_D_OUT),
						  .FULL_N(pktBuff_1_readDataFifo_FULL_N),
						  .EMPTY_N(pktBuff_1_readDataFifo_EMPTY_N));

  // submodule pktBuff_1_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_1_readLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_1_readLenFifo_D_IN),
						 .ENQ(pktBuff_1_readLenFifo_ENQ),
						 .DEQ(pktBuff_1_readLenFifo_DEQ),
						 .CLR(pktBuff_1_readLenFifo_CLR),
						 .D_OUT(pktBuff_1_readLenFifo_D_OUT),
						 .FULL_N(pktBuff_1_readLenFifo_FULL_N),
						 .EMPTY_N(pktBuff_1_readLenFifo_EMPTY_N));

  // submodule pktBuff_1_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_1_readReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_1_readReqFifo_D_IN),
						 .ENQ(pktBuff_1_readReqFifo_ENQ),
						 .DEQ(pktBuff_1_readReqFifo_DEQ),
						 .CLR(pktBuff_1_readReqFifo_CLR),
						 .D_OUT(pktBuff_1_readReqFifo_D_OUT),
						 .FULL_N(pktBuff_1_readReqFifo_FULL_N),
						 .EMPTY_N(pktBuff_1_readReqFifo_EMPTY_N));

  // submodule pktBuff_1_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_1_writeDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_1_writeDataFifo_D_IN),
						   .ENQ(pktBuff_1_writeDataFifo_ENQ),
						   .DEQ(pktBuff_1_writeDataFifo_DEQ),
						   .CLR(pktBuff_1_writeDataFifo_CLR),
						   .D_OUT(pktBuff_1_writeDataFifo_D_OUT),
						   .FULL_N(pktBuff_1_writeDataFifo_FULL_N),
						   .EMPTY_N(pktBuff_1_writeDataFifo_EMPTY_N));

  // submodule pktBuff_2_meta_ff
  FIFO2 #(.width(32'd782),
	  .guarded(32'd1)) pktBuff_2_meta_ff(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(pktBuff_2_meta_ff_D_IN),
					     .ENQ(pktBuff_2_meta_ff_ENQ),
					     .DEQ(pktBuff_2_meta_ff_DEQ),
					     .CLR(pktBuff_2_meta_ff_CLR),
					     .D_OUT(),
					     .FULL_N(pktBuff_2_meta_ff_FULL_N),
					     .EMPTY_N(pktBuff_2_meta_ff_EMPTY_N));

  // submodule pktBuff_2_pktBuff
  mkPacketBuffer_16 #(.param1("store&fwd 2")) pktBuff_2_pktBuff(.CLK(CLK),
								.RST_N(localReset_OUT_RST),
								.readServer_readReq_put(pktBuff_2_pktBuff_readServer_readReq_put),
								.set_verbosity_verbosity(pktBuff_2_pktBuff_set_verbosity_verbosity),
								.writeServer_enq_v(pktBuff_2_pktBuff_writeServer_enq_v),
								.EN_writeServer_enq(pktBuff_2_pktBuff_EN_writeServer_enq),
								.EN_readServer_readData_get(pktBuff_2_pktBuff_EN_readServer_readData_get),
								.EN_readServer_readLen_get(pktBuff_2_pktBuff_EN_readServer_readLen_get),
								.EN_readServer_readReq_put(pktBuff_2_pktBuff_EN_readServer_readReq_put),
								.EN_set_verbosity(pktBuff_2_pktBuff_EN_set_verbosity),
								.RDY_writeServer_enq(pktBuff_2_pktBuff_RDY_writeServer_enq),
								.writeServer_notFull(),
								.RDY_writeServer_notFull(),
								.readServer_readData_get(pktBuff_2_pktBuff_readServer_readData_get),
								.RDY_readServer_readData_get(pktBuff_2_pktBuff_RDY_readServer_readData_get),
								.readServer_readLen_get(pktBuff_2_pktBuff_readServer_readLen_get),
								.RDY_readServer_readLen_get(pktBuff_2_pktBuff_RDY_readServer_readLen_get),
								.RDY_readServer_readReq_put(pktBuff_2_pktBuff_RDY_readServer_readReq_put),
								.dbg(),
								.RDY_dbg(),
								.RDY_set_verbosity());

  // submodule pktBuff_2_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_2_readDataFifo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(pktBuff_2_readDataFifo_D_IN),
						  .ENQ(pktBuff_2_readDataFifo_ENQ),
						  .DEQ(pktBuff_2_readDataFifo_DEQ),
						  .CLR(pktBuff_2_readDataFifo_CLR),
						  .D_OUT(pktBuff_2_readDataFifo_D_OUT),
						  .FULL_N(pktBuff_2_readDataFifo_FULL_N),
						  .EMPTY_N(pktBuff_2_readDataFifo_EMPTY_N));

  // submodule pktBuff_2_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_2_readLenFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_2_readLenFifo_D_IN),
						 .ENQ(pktBuff_2_readLenFifo_ENQ),
						 .DEQ(pktBuff_2_readLenFifo_DEQ),
						 .CLR(pktBuff_2_readLenFifo_CLR),
						 .D_OUT(pktBuff_2_readLenFifo_D_OUT),
						 .FULL_N(pktBuff_2_readLenFifo_FULL_N),
						 .EMPTY_N(pktBuff_2_readLenFifo_EMPTY_N));

  // submodule pktBuff_2_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktBuff_2_readReqFifo(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(pktBuff_2_readReqFifo_D_IN),
						 .ENQ(pktBuff_2_readReqFifo_ENQ),
						 .DEQ(pktBuff_2_readReqFifo_DEQ),
						 .CLR(pktBuff_2_readReqFifo_CLR),
						 .D_OUT(pktBuff_2_readReqFifo_D_OUT),
						 .FULL_N(pktBuff_2_readReqFifo_FULL_N),
						 .EMPTY_N(pktBuff_2_readReqFifo_EMPTY_N));

  // submodule pktBuff_2_writeDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) pktBuff_2_writeDataFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(pktBuff_2_writeDataFifo_D_IN),
						   .ENQ(pktBuff_2_writeDataFifo_ENQ),
						   .DEQ(pktBuff_2_writeDataFifo_DEQ),
						   .CLR(pktBuff_2_writeDataFifo_CLR),
						   .D_OUT(pktBuff_2_writeDataFifo_D_OUT),
						   .FULL_N(pktBuff_2_writeDataFifo_FULL_N),
						   .EMPTY_N(pktBuff_2_writeDataFifo_EMPTY_N));

  // submodule pktLenFifo_0
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) pktLenFifo_0(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(pktLenFifo_0_D_IN),
					.ENQ(pktLenFifo_0_ENQ),
					.DEQ(pktLenFifo_0_DEQ),
					.CLR(pktLenFifo_0_CLR),
					.D_OUT(pktLenFifo_0_D_OUT),
					.FULL_N(pktLenFifo_0_FULL_N),
					.EMPTY_N(pktLenFifo_0_EMPTY_N));

  // submodule readDataFifo_0
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) readDataFifo_0(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(readDataFifo_0_D_IN),
					  .ENQ(readDataFifo_0_ENQ),
					  .DEQ(readDataFifo_0_DEQ),
					  .CLR(readDataFifo_0_CLR),
					  .D_OUT(readDataFifo_0_D_OUT),
					  .FULL_N(readDataFifo_0_FULL_N),
					  .EMPTY_N(readDataFifo_0_EMPTY_N));

  // submodule readLenFifo_0
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) readLenFifo_0(.RST(localReset_OUT_RST),
					 .CLK(CLK),
					 .D_IN(readLenFifo_0_D_IN),
					 .ENQ(readLenFifo_0_ENQ),
					 .DEQ(readLenFifo_0_DEQ),
					 .CLR(readLenFifo_0_CLR),
					 .D_OUT(readLenFifo_0_D_OUT),
					 .FULL_N(readLenFifo_0_FULL_N),
					 .EMPTY_N(readLenFifo_0_EMPTY_N));

  // submodule readReqFifo_0
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) readReqFifo_0(.RST(localReset_OUT_RST),
					 .CLK(CLK),
					 .D_IN(readReqFifo_0_D_IN),
					 .ENQ(readReqFifo_0_ENQ),
					 .DEQ(readReqFifo_0_DEQ),
					 .CLR(readReqFifo_0_CLR),
					 .D_OUT(readReqFifo_0_D_OUT),
					 .FULL_N(readReqFifo_0_FULL_N),
					 .EMPTY_N(readReqFifo_0_EMPTY_N));

  // submodule ringToMac_0_fifoTxData_dCombinedReset
  ResetEither ringToMac_0_fifoTxData_dCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_0_fifoTxData_dCrossedsReset_OUT_RST),
						    .RST_OUT(ringToMac_0_fifoTxData_dCombinedReset_RST_OUT));

  // submodule ringToMac_0_fifoTxData_dCrossedsReset
  SyncReset0 ringToMac_0_fifoTxData_dCrossedsReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_0_fifoTxData_dCrossedsReset_OUT_RST));

  // submodule ringToMac_0_fifoTxData_sCombinedReset
  ResetEither ringToMac_0_fifoTxData_sCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_0_fifoTxData_sCrosseddReset_OUT_RST),
						    .RST_OUT(ringToMac_0_fifoTxData_sCombinedReset_RST_OUT));

  // submodule ringToMac_0_fifoTxData_sCrosseddReset
  SyncReset0 ringToMac_0_fifoTxData_sCrosseddReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_0_fifoTxData_sCrosseddReset_OUT_RST));

  // submodule ringToMac_0_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) ringToMac_0_readDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(ringToMac_0_readDataFifo_D_IN),
						    .ENQ(ringToMac_0_readDataFifo_ENQ),
						    .DEQ(ringToMac_0_readDataFifo_DEQ),
						    .CLR(ringToMac_0_readDataFifo_CLR),
						    .D_OUT(ringToMac_0_readDataFifo_D_OUT),
						    .FULL_N(ringToMac_0_readDataFifo_FULL_N),
						    .EMPTY_N(ringToMac_0_readDataFifo_EMPTY_N));

  // submodule ringToMac_0_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_0_readLenFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_0_readLenFifo_D_IN),
						   .ENQ(ringToMac_0_readLenFifo_ENQ),
						   .DEQ(ringToMac_0_readLenFifo_DEQ),
						   .CLR(ringToMac_0_readLenFifo_CLR),
						   .D_OUT(ringToMac_0_readLenFifo_D_OUT),
						   .FULL_N(ringToMac_0_readLenFifo_FULL_N),
						   .EMPTY_N(ringToMac_0_readLenFifo_EMPTY_N));

  // submodule ringToMac_0_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_0_readReqFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_0_readReqFifo_D_IN),
						   .ENQ(ringToMac_0_readReqFifo_ENQ),
						   .DEQ(ringToMac_0_readReqFifo_DEQ),
						   .CLR(ringToMac_0_readReqFifo_CLR),
						   .D_OUT(ringToMac_0_readReqFifo_D_OUT),
						   .FULL_N(ringToMac_0_readReqFifo_FULL_N),
						   .EMPTY_N(ringToMac_0_readReqFifo_EMPTY_N));

  // submodule ringToMac_0_tx_fifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) ringToMac_0_tx_fifo(.sCLK(CLK),
						    .dCLK(CLK_p2),
						    .sRST(localReset_OUT_RST),
						    .sD_IN(ringToMac_0_tx_fifo_sD_IN),
						    .sENQ(ringToMac_0_tx_fifo_sENQ),
						    .dDEQ(ringToMac_0_tx_fifo_dDEQ),
						    .sFULL_N(ringToMac_0_tx_fifo_sFULL_N),
						    .dEMPTY_N(ringToMac_0_tx_fifo_dEMPTY_N),
						    .dD_OUT(ringToMac_0_tx_fifo_dD_OUT));

  // submodule ringToMac_0_writeMacFifo
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) ringToMac_0_writeMacFifo(.RST(RST_N_p3),
						    .CLK(CLK_p2),
						    .D_IN(ringToMac_0_writeMacFifo_D_IN),
						    .ENQ(ringToMac_0_writeMacFifo_ENQ),
						    .DEQ(ringToMac_0_writeMacFifo_DEQ),
						    .CLR(ringToMac_0_writeMacFifo_CLR),
						    .D_OUT(ringToMac_0_writeMacFifo_D_OUT),
						    .FULL_N(ringToMac_0_writeMacFifo_FULL_N),
						    .EMPTY_N(ringToMac_0_writeMacFifo_EMPTY_N));

  // submodule ringToMac_1_fifoTxData_dCombinedReset
  ResetEither ringToMac_1_fifoTxData_dCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_1_fifoTxData_dCrossedsReset_OUT_RST),
						    .RST_OUT(ringToMac_1_fifoTxData_dCombinedReset_RST_OUT));

  // submodule ringToMac_1_fifoTxData_dCrossedsReset
  SyncReset0 ringToMac_1_fifoTxData_dCrossedsReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_1_fifoTxData_dCrossedsReset_OUT_RST));

  // submodule ringToMac_1_fifoTxData_sCombinedReset
  ResetEither ringToMac_1_fifoTxData_sCombinedReset(.A_RST(RST_N_p3),
						    .B_RST(ringToMac_1_fifoTxData_sCrosseddReset_OUT_RST),
						    .RST_OUT(ringToMac_1_fifoTxData_sCombinedReset_RST_OUT));

  // submodule ringToMac_1_fifoTxData_sCrosseddReset
  SyncReset0 ringToMac_1_fifoTxData_sCrosseddReset(.IN_RST(RST_N_p3),
						   .OUT_RST(ringToMac_1_fifoTxData_sCrosseddReset_OUT_RST));

  // submodule ringToMac_1_readDataFifo
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) ringToMac_1_readDataFifo(.RST(localReset_OUT_RST),
						    .CLK(CLK),
						    .D_IN(ringToMac_1_readDataFifo_D_IN),
						    .ENQ(ringToMac_1_readDataFifo_ENQ),
						    .DEQ(ringToMac_1_readDataFifo_DEQ),
						    .CLR(ringToMac_1_readDataFifo_CLR),
						    .D_OUT(ringToMac_1_readDataFifo_D_OUT),
						    .FULL_N(ringToMac_1_readDataFifo_FULL_N),
						    .EMPTY_N(ringToMac_1_readDataFifo_EMPTY_N));

  // submodule ringToMac_1_readLenFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_1_readLenFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_1_readLenFifo_D_IN),
						   .ENQ(ringToMac_1_readLenFifo_ENQ),
						   .DEQ(ringToMac_1_readLenFifo_DEQ),
						   .CLR(ringToMac_1_readLenFifo_CLR),
						   .D_OUT(ringToMac_1_readLenFifo_D_OUT),
						   .FULL_N(ringToMac_1_readLenFifo_FULL_N),
						   .EMPTY_N(ringToMac_1_readLenFifo_EMPTY_N));

  // submodule ringToMac_1_readReqFifo
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) ringToMac_1_readReqFifo(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(ringToMac_1_readReqFifo_D_IN),
						   .ENQ(ringToMac_1_readReqFifo_ENQ),
						   .DEQ(ringToMac_1_readReqFifo_DEQ),
						   .CLR(ringToMac_1_readReqFifo_CLR),
						   .D_OUT(ringToMac_1_readReqFifo_D_OUT),
						   .FULL_N(ringToMac_1_readReqFifo_FULL_N),
						   .EMPTY_N(ringToMac_1_readReqFifo_EMPTY_N));

  // submodule ringToMac_1_tx_fifo
  SyncFIFO #(.dataWidth(32'd178),
	     .depth(32'd8),
	     .indxWidth(32'd3)) ringToMac_1_tx_fifo(.sCLK(CLK),
						    .dCLK(CLK_p2),
						    .sRST(localReset_OUT_RST),
						    .sD_IN(ringToMac_1_tx_fifo_sD_IN),
						    .sENQ(ringToMac_1_tx_fifo_sENQ),
						    .dDEQ(ringToMac_1_tx_fifo_dDEQ),
						    .sFULL_N(ringToMac_1_tx_fifo_sFULL_N),
						    .dEMPTY_N(ringToMac_1_tx_fifo_dEMPTY_N),
						    .dD_OUT(ringToMac_1_tx_fifo_dD_OUT));

  // submodule ringToMac_1_writeMacFifo
  FIFO2 #(.width(32'd106),
	  .guarded(32'd1)) ringToMac_1_writeMacFifo(.RST(RST_N_p3),
						    .CLK(CLK_p2),
						    .D_IN(ringToMac_1_writeMacFifo_D_IN),
						    .ENQ(ringToMac_1_writeMacFifo_ENQ),
						    .DEQ(ringToMac_1_writeMacFifo_DEQ),
						    .CLR(ringToMac_1_writeMacFifo_CLR),
						    .D_OUT(ringToMac_1_writeMacFifo_D_OUT),
						    .FULL_N(ringToMac_1_writeMacFifo_FULL_N),
						    .EMPTY_N(ringToMac_1_writeMacFifo_EMPTY_N));

  // submodule verbose_ff_0
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_0(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(verbose_ff_0_D_IN),
					.ENQ(verbose_ff_0_ENQ),
					.DEQ(verbose_ff_0_DEQ),
					.CLR(verbose_ff_0_CLR),
					.D_OUT(verbose_ff_0_D_OUT),
					.FULL_N(verbose_ff_0_FULL_N),
					.EMPTY_N(verbose_ff_0_EMPTY_N));

  // submodule verbose_ff_0_1
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_0_1(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_0_1_D_IN),
					  .ENQ(verbose_ff_0_1_ENQ),
					  .DEQ(verbose_ff_0_1_DEQ),
					  .CLR(verbose_ff_0_1_CLR),
					  .D_OUT(verbose_ff_0_1_D_OUT),
					  .FULL_N(verbose_ff_0_1_FULL_N),
					  .EMPTY_N(verbose_ff_0_1_EMPTY_N));

  // submodule verbose_ff_0_2
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_0_2(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_0_2_D_IN),
					  .ENQ(verbose_ff_0_2_ENQ),
					  .DEQ(verbose_ff_0_2_DEQ),
					  .CLR(verbose_ff_0_2_CLR),
					  .D_OUT(verbose_ff_0_2_D_OUT),
					  .FULL_N(verbose_ff_0_2_FULL_N),
					  .EMPTY_N(verbose_ff_0_2_EMPTY_N));

  // submodule verbose_ff_0_3
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_0_3(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_0_3_D_IN),
					  .ENQ(verbose_ff_0_3_ENQ),
					  .DEQ(verbose_ff_0_3_DEQ),
					  .CLR(verbose_ff_0_3_CLR),
					  .D_OUT(),
					  .FULL_N(verbose_ff_0_3_FULL_N),
					  .EMPTY_N());

  // submodule verbose_ff_1
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_1(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(verbose_ff_1_D_IN),
					.ENQ(verbose_ff_1_ENQ),
					.DEQ(verbose_ff_1_DEQ),
					.CLR(verbose_ff_1_CLR),
					.D_OUT(verbose_ff_1_D_OUT),
					.FULL_N(verbose_ff_1_FULL_N),
					.EMPTY_N(verbose_ff_1_EMPTY_N));

  // submodule verbose_ff_1_1
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_1_1(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_1_1_D_IN),
					  .ENQ(verbose_ff_1_1_ENQ),
					  .DEQ(verbose_ff_1_1_DEQ),
					  .CLR(verbose_ff_1_1_CLR),
					  .D_OUT(verbose_ff_1_1_D_OUT),
					  .FULL_N(verbose_ff_1_1_FULL_N),
					  .EMPTY_N(verbose_ff_1_1_EMPTY_N));

  // submodule verbose_ff_1_2
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_1_2(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(verbose_ff_1_2_D_IN),
					  .ENQ(verbose_ff_1_2_ENQ),
					  .DEQ(verbose_ff_1_2_DEQ),
					  .CLR(verbose_ff_1_2_CLR),
					  .D_OUT(),
					  .FULL_N(verbose_ff_1_2_FULL_N),
					  .EMPTY_N());

  // submodule verbose_ff_2
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) verbose_ff_2(.RST(localReset_OUT_RST),
					.CLK(CLK),
					.D_IN(verbose_ff_2_D_IN),
					.ENQ(verbose_ff_2_ENQ),
					.DEQ(verbose_ff_2_DEQ),
					.CLR(verbose_ff_2_CLR),
					.D_OUT(verbose_ff_2_D_OUT),
					.FULL_N(verbose_ff_2_FULL_N),
					.EMPTY_N(verbose_ff_2_EMPTY_N));

  // submodule writeDataFifo_0
  FIFO2 #(.width(32'd178),
	  .guarded(32'd1)) writeDataFifo_0(.RST(localReset_OUT_RST),
					   .CLK(CLK),
					   .D_IN(writeDataFifo_0_D_IN),
					   .ENQ(writeDataFifo_0_ENQ),
					   .DEQ(writeDataFifo_0_DEQ),
					   .CLR(writeDataFifo_0_CLR),
					   .D_OUT(writeDataFifo_0_D_OUT),
					   .FULL_N(writeDataFifo_0_FULL_N),
					   .EMPTY_N(writeDataFifo_0_EMPTY_N));

  // submodule xbar_lower_lower_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_lower_f(.RST(localReset_OUT_RST),
					      .CLK(CLK),
					      .D_IN(xbar_lower_lower_f_D_IN),
					      .ENQ(xbar_lower_lower_f_ENQ),
					      .DEQ(xbar_lower_lower_f_DEQ),
					      .CLR(xbar_lower_lower_f_CLR),
					      .D_OUT(xbar_lower_lower_f_D_OUT),
					      .FULL_N(),
					      .EMPTY_N(xbar_lower_lower_f_EMPTY_N));

  // submodule xbar_lower_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_1_fi0(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_lower_merges_1_fi0_D_IN),
						   .ENQ(xbar_lower_merges_1_fi0_ENQ),
						   .DEQ(xbar_lower_merges_1_fi0_DEQ),
						   .CLR(xbar_lower_merges_1_fi0_CLR),
						   .D_OUT(xbar_lower_merges_1_fi0_D_OUT),
						   .FULL_N(xbar_lower_merges_1_fi0_FULL_N),
						   .EMPTY_N(xbar_lower_merges_1_fi0_EMPTY_N));

  // submodule xbar_lower_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_1_fi1(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_lower_merges_1_fi1_D_IN),
						   .ENQ(xbar_lower_merges_1_fi1_ENQ),
						   .DEQ(xbar_lower_merges_1_fi1_DEQ),
						   .CLR(xbar_lower_merges_1_fi1_CLR),
						   .D_OUT(xbar_lower_merges_1_fi1_D_OUT),
						   .FULL_N(xbar_lower_merges_1_fi1_FULL_N),
						   .EMPTY_N(xbar_lower_merges_1_fi1_EMPTY_N));

  // submodule xbar_lower_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_1_fo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(xbar_lower_merges_1_fo_D_IN),
						  .ENQ(xbar_lower_merges_1_fo_ENQ),
						  .DEQ(xbar_lower_merges_1_fo_DEQ),
						  .CLR(xbar_lower_merges_1_fo_CLR),
						  .D_OUT(xbar_lower_merges_1_fo_D_OUT),
						  .FULL_N(xbar_lower_merges_1_fo_FULL_N),
						  .EMPTY_N(xbar_lower_merges_1_fo_EMPTY_N));

  // submodule xbar_lower_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_fi0(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(xbar_lower_merges_fi0_D_IN),
						 .ENQ(xbar_lower_merges_fi0_ENQ),
						 .DEQ(xbar_lower_merges_fi0_DEQ),
						 .CLR(xbar_lower_merges_fi0_CLR),
						 .D_OUT(xbar_lower_merges_fi0_D_OUT),
						 .FULL_N(xbar_lower_merges_fi0_FULL_N),
						 .EMPTY_N(xbar_lower_merges_fi0_EMPTY_N));

  // submodule xbar_lower_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_fi1(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(xbar_lower_merges_fi1_D_IN),
						 .ENQ(xbar_lower_merges_fi1_ENQ),
						 .DEQ(xbar_lower_merges_fi1_DEQ),
						 .CLR(xbar_lower_merges_fi1_CLR),
						 .D_OUT(xbar_lower_merges_fi1_D_OUT),
						 .FULL_N(xbar_lower_merges_fi1_FULL_N),
						 .EMPTY_N(xbar_lower_merges_fi1_EMPTY_N));

  // submodule xbar_lower_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_merges_fo(.RST(localReset_OUT_RST),
						.CLK(CLK),
						.D_IN(xbar_lower_merges_fo_D_IN),
						.ENQ(xbar_lower_merges_fo_ENQ),
						.DEQ(xbar_lower_merges_fo_DEQ),
						.CLR(xbar_lower_merges_fo_CLR),
						.D_OUT(xbar_lower_merges_fo_D_OUT),
						.FULL_N(xbar_lower_merges_fo_FULL_N),
						.EMPTY_N(xbar_lower_merges_fo_EMPTY_N));

  // submodule xbar_lower_upper_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_lower_upper_f(.RST(localReset_OUT_RST),
					      .CLK(CLK),
					      .D_IN(xbar_lower_upper_f_D_IN),
					      .ENQ(xbar_lower_upper_f_ENQ),
					      .DEQ(xbar_lower_upper_f_DEQ),
					      .CLR(xbar_lower_upper_f_CLR),
					      .D_OUT(xbar_lower_upper_f_D_OUT),
					      .FULL_N(xbar_lower_upper_f_FULL_N),
					      .EMPTY_N(xbar_lower_upper_f_EMPTY_N));

  // submodule xbar_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_1_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_1_fi0_D_IN),
					     .ENQ(xbar_merges_1_fi0_ENQ),
					     .DEQ(xbar_merges_1_fi0_DEQ),
					     .CLR(xbar_merges_1_fi0_CLR),
					     .D_OUT(xbar_merges_1_fi0_D_OUT),
					     .FULL_N(xbar_merges_1_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_1_fi0_EMPTY_N));

  // submodule xbar_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_1_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_1_fi1_D_IN),
					     .ENQ(xbar_merges_1_fi1_ENQ),
					     .DEQ(xbar_merges_1_fi1_DEQ),
					     .CLR(xbar_merges_1_fi1_CLR),
					     .D_OUT(xbar_merges_1_fi1_D_OUT),
					     .FULL_N(xbar_merges_1_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_1_fi1_EMPTY_N));

  // submodule xbar_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_1_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_1_fo_D_IN),
					    .ENQ(xbar_merges_1_fo_ENQ),
					    .DEQ(xbar_merges_1_fo_DEQ),
					    .CLR(xbar_merges_1_fo_CLR),
					    .D_OUT(xbar_merges_1_fo_D_OUT),
					    .FULL_N(xbar_merges_1_fo_FULL_N),
					    .EMPTY_N(xbar_merges_1_fo_EMPTY_N));

  // submodule xbar_merges_2_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_2_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_2_fi0_D_IN),
					     .ENQ(xbar_merges_2_fi0_ENQ),
					     .DEQ(xbar_merges_2_fi0_DEQ),
					     .CLR(xbar_merges_2_fi0_CLR),
					     .D_OUT(xbar_merges_2_fi0_D_OUT),
					     .FULL_N(xbar_merges_2_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_2_fi0_EMPTY_N));

  // submodule xbar_merges_2_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_2_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_2_fi1_D_IN),
					     .ENQ(xbar_merges_2_fi1_ENQ),
					     .DEQ(xbar_merges_2_fi1_DEQ),
					     .CLR(xbar_merges_2_fi1_CLR),
					     .D_OUT(xbar_merges_2_fi1_D_OUT),
					     .FULL_N(xbar_merges_2_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_2_fi1_EMPTY_N));

  // submodule xbar_merges_2_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_2_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_2_fo_D_IN),
					    .ENQ(xbar_merges_2_fo_ENQ),
					    .DEQ(xbar_merges_2_fo_DEQ),
					    .CLR(xbar_merges_2_fo_CLR),
					    .D_OUT(xbar_merges_2_fo_D_OUT),
					    .FULL_N(xbar_merges_2_fo_FULL_N),
					    .EMPTY_N(xbar_merges_2_fo_EMPTY_N));

  // submodule xbar_merges_3_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_3_fi0(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_3_fi0_D_IN),
					     .ENQ(xbar_merges_3_fi0_ENQ),
					     .DEQ(xbar_merges_3_fi0_DEQ),
					     .CLR(xbar_merges_3_fi0_CLR),
					     .D_OUT(xbar_merges_3_fi0_D_OUT),
					     .FULL_N(xbar_merges_3_fi0_FULL_N),
					     .EMPTY_N(xbar_merges_3_fi0_EMPTY_N));

  // submodule xbar_merges_3_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_3_fi1(.RST(localReset_OUT_RST),
					     .CLK(CLK),
					     .D_IN(xbar_merges_3_fi1_D_IN),
					     .ENQ(xbar_merges_3_fi1_ENQ),
					     .DEQ(xbar_merges_3_fi1_DEQ),
					     .CLR(xbar_merges_3_fi1_CLR),
					     .D_OUT(xbar_merges_3_fi1_D_OUT),
					     .FULL_N(xbar_merges_3_fi1_FULL_N),
					     .EMPTY_N(xbar_merges_3_fi1_EMPTY_N));

  // submodule xbar_merges_3_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_3_fo(.RST(localReset_OUT_RST),
					    .CLK(CLK),
					    .D_IN(xbar_merges_3_fo_D_IN),
					    .ENQ(xbar_merges_3_fo_ENQ),
					    .DEQ(xbar_merges_3_fo_DEQ),
					    .CLR(xbar_merges_3_fo_CLR),
					    .D_OUT(xbar_merges_3_fo_D_OUT),
					    .FULL_N(xbar_merges_3_fo_FULL_N),
					    .EMPTY_N(xbar_merges_3_fo_EMPTY_N));

  // submodule xbar_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_fi0(.RST(localReset_OUT_RST),
					   .CLK(CLK),
					   .D_IN(xbar_merges_fi0_D_IN),
					   .ENQ(xbar_merges_fi0_ENQ),
					   .DEQ(xbar_merges_fi0_DEQ),
					   .CLR(xbar_merges_fi0_CLR),
					   .D_OUT(xbar_merges_fi0_D_OUT),
					   .FULL_N(xbar_merges_fi0_FULL_N),
					   .EMPTY_N(xbar_merges_fi0_EMPTY_N));

  // submodule xbar_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_fi1(.RST(localReset_OUT_RST),
					   .CLK(CLK),
					   .D_IN(xbar_merges_fi1_D_IN),
					   .ENQ(xbar_merges_fi1_ENQ),
					   .DEQ(xbar_merges_fi1_DEQ),
					   .CLR(xbar_merges_fi1_CLR),
					   .D_OUT(xbar_merges_fi1_D_OUT),
					   .FULL_N(xbar_merges_fi1_FULL_N),
					   .EMPTY_N(xbar_merges_fi1_EMPTY_N));

  // submodule xbar_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_merges_fo(.RST(localReset_OUT_RST),
					  .CLK(CLK),
					  .D_IN(xbar_merges_fo_D_IN),
					  .ENQ(xbar_merges_fo_ENQ),
					  .DEQ(xbar_merges_fo_DEQ),
					  .CLR(xbar_merges_fo_CLR),
					  .D_OUT(xbar_merges_fo_D_OUT),
					  .FULL_N(xbar_merges_fo_FULL_N),
					  .EMPTY_N(xbar_merges_fo_EMPTY_N));

  // submodule xbar_upper_lower_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_lower_f(.RST(localReset_OUT_RST),
					      .CLK(CLK),
					      .D_IN(xbar_upper_lower_f_D_IN),
					      .ENQ(xbar_upper_lower_f_ENQ),
					      .DEQ(xbar_upper_lower_f_DEQ),
					      .CLR(xbar_upper_lower_f_CLR),
					      .D_OUT(xbar_upper_lower_f_D_OUT),
					      .FULL_N(xbar_upper_lower_f_FULL_N),
					      .EMPTY_N(xbar_upper_lower_f_EMPTY_N));

  // submodule xbar_upper_merges_1_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_1_fi0(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_upper_merges_1_fi0_D_IN),
						   .ENQ(xbar_upper_merges_1_fi0_ENQ),
						   .DEQ(xbar_upper_merges_1_fi0_DEQ),
						   .CLR(xbar_upper_merges_1_fi0_CLR),
						   .D_OUT(xbar_upper_merges_1_fi0_D_OUT),
						   .FULL_N(xbar_upper_merges_1_fi0_FULL_N),
						   .EMPTY_N(xbar_upper_merges_1_fi0_EMPTY_N));

  // submodule xbar_upper_merges_1_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_1_fi1(.RST(localReset_OUT_RST),
						   .CLK(CLK),
						   .D_IN(xbar_upper_merges_1_fi1_D_IN),
						   .ENQ(xbar_upper_merges_1_fi1_ENQ),
						   .DEQ(xbar_upper_merges_1_fi1_DEQ),
						   .CLR(xbar_upper_merges_1_fi1_CLR),
						   .D_OUT(xbar_upper_merges_1_fi1_D_OUT),
						   .FULL_N(xbar_upper_merges_1_fi1_FULL_N),
						   .EMPTY_N(xbar_upper_merges_1_fi1_EMPTY_N));

  // submodule xbar_upper_merges_1_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_1_fo(.RST(localReset_OUT_RST),
						  .CLK(CLK),
						  .D_IN(xbar_upper_merges_1_fo_D_IN),
						  .ENQ(xbar_upper_merges_1_fo_ENQ),
						  .DEQ(xbar_upper_merges_1_fo_DEQ),
						  .CLR(xbar_upper_merges_1_fo_CLR),
						  .D_OUT(xbar_upper_merges_1_fo_D_OUT),
						  .FULL_N(xbar_upper_merges_1_fo_FULL_N),
						  .EMPTY_N(xbar_upper_merges_1_fo_EMPTY_N));

  // submodule xbar_upper_merges_fi0
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_fi0(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(xbar_upper_merges_fi0_D_IN),
						 .ENQ(xbar_upper_merges_fi0_ENQ),
						 .DEQ(xbar_upper_merges_fi0_DEQ),
						 .CLR(xbar_upper_merges_fi0_CLR),
						 .D_OUT(xbar_upper_merges_fi0_D_OUT),
						 .FULL_N(xbar_upper_merges_fi0_FULL_N),
						 .EMPTY_N(xbar_upper_merges_fi0_EMPTY_N));

  // submodule xbar_upper_merges_fi1
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_fi1(.RST(localReset_OUT_RST),
						 .CLK(CLK),
						 .D_IN(xbar_upper_merges_fi1_D_IN),
						 .ENQ(xbar_upper_merges_fi1_ENQ),
						 .DEQ(xbar_upper_merges_fi1_DEQ),
						 .CLR(xbar_upper_merges_fi1_CLR),
						 .D_OUT(xbar_upper_merges_fi1_D_OUT),
						 .FULL_N(xbar_upper_merges_fi1_FULL_N),
						 .EMPTY_N(xbar_upper_merges_fi1_EMPTY_N));

  // submodule xbar_upper_merges_fo
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_merges_fo(.RST(localReset_OUT_RST),
						.CLK(CLK),
						.D_IN(xbar_upper_merges_fo_D_IN),
						.ENQ(xbar_upper_merges_fo_ENQ),
						.DEQ(xbar_upper_merges_fo_DEQ),
						.CLR(xbar_upper_merges_fo_CLR),
						.D_OUT(xbar_upper_merges_fo_D_OUT),
						.FULL_N(xbar_upper_merges_fo_FULL_N),
						.EMPTY_N(xbar_upper_merges_fo_EMPTY_N));

  // submodule xbar_upper_upper_f
  FIFO2 #(.width(32'd610),
	  .guarded(32'd1)) xbar_upper_upper_f(.RST(localReset_OUT_RST),
					      .CLK(CLK),
					      .D_IN(xbar_upper_upper_f_D_IN),
					      .ENQ(xbar_upper_upper_f_ENQ),
					      .DEQ(xbar_upper_upper_f_DEQ),
					      .CLR(xbar_upper_upper_f_CLR),
					      .D_OUT(xbar_upper_upper_f_D_OUT),
					      .FULL_N(xbar_upper_upper_f_FULL_N),
					      .EMPTY_N(xbar_upper_upper_f_EMPTY_N));

  // rule RL_packetReadInProgress
  assign WILL_FIRE_RL_packetReadInProgress =
	     parser_0_RDY_frameIn_put && readDataFifo_0_EMPTY_N &&
	     writeDataFifo_0_FULL_N &&
	     readStarted_0 ;

  // rule RL_mkConnectionGetPut_9
  assign CAN_FIRE_RL_mkConnectionGetPut_9 =
	     pktBuff_0_pktBuff_RDY_writeServer_enq &&
	     writeDataFifo_0_EMPTY_N ;

  // rule RL_mkConnectionGetPut_10
  assign CAN_FIRE_RL_mkConnectionGetPut_10 =
	     pktBuff_1_pktBuff_RDY_writeServer_enq &&
	     hostchan_0_writeDataFifo_EMPTY_N ;

  // rule RL_mkConnectionGetPut_11
  assign CAN_FIRE_RL_mkConnectionGetPut_11 =
	     pktBuff_2_pktBuff_RDY_writeServer_enq &&
	     hostchan_1_writeDataFifo_EMPTY_N ;

  // rule RL_mkConnectionGetPut_39
  assign CAN_FIRE_RL_mkConnectionGetPut_39 =
	     gearbox_dn_16_0_RDY_dataout_get &&
	     pktBuff_0_fifoWriteData_FULL_N ;

  // rule RL_mkConnectionGetPut_40
  assign CAN_FIRE_RL_mkConnectionGetPut_40 =
	     gearbox_dn_16_1_RDY_dataout_get &&
	     pktBuff_1_fifoWriteData_FULL_N ;

  // rule RL_hostchan_0_packetReadInProgress
  assign WILL_FIRE_RL_hostchan_0_packetReadInProgress =
	     hostchan_0_parser_RDY_frameIn_put &&
	     hostchan_0_readDataFifo_EMPTY_N &&
	     hostchan_0_writeDataFifo_FULL_N &&
	     hostchan_0_readStarted ;

  // rule RL_macToRing_0_writeData
  assign WILL_FIRE_RL_macToRing_0_writeData =
	     macToRing_0_writeDataFifo_sFULL_N &&
	     macToRing_0_gearbox_out_ff_EMPTY_N ;

  // rule RL_macToRing_0_gearbox_readPacketOdd
  assign WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd =
	     macToRing_0_gearbox_in_ff_EMPTY_N &&
	     (!macToRing_0_gearbox_in_ff_D_OUT[0] ||
	      macToRing_0_gearbox_out_ff_FULL_N) &&
	     macToRing_0_gearbox_inProgress &&
	     macToRing_0_gearbox_oddBeat ;

  // rule RL_macToRing_0_gearbox_readPacketEven
  assign WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven =
	     macToRing_0_gearbox_in_ff_EMPTY_N &&
	     macToRing_0_gearbox_out_ff_FULL_N &&
	     macToRing_0_gearbox_inProgress &&
	     !macToRing_0_gearbox_oddBeat ;

  // rule RL_macToRing_0_gearbox_startOfPacket
  assign WILL_FIRE_RL_macToRing_0_gearbox_startOfPacket =
	     macToRing_0_gearbox_in_ff_EMPTY_N &&
	     !macToRing_0_gearbox_inProgress ;

  // rule RL_hostchan_1_packetReadInProgress
  assign WILL_FIRE_RL_hostchan_1_packetReadInProgress =
	     hostchan_1_parser_RDY_frameIn_put &&
	     hostchan_1_readDataFifo_EMPTY_N &&
	     hostchan_1_writeDataFifo_FULL_N &&
	     hostchan_1_readStarted ;

  // rule RL_macToRing_1_writeData
  assign WILL_FIRE_RL_macToRing_1_writeData =
	     macToRing_1_writeDataFifo_sFULL_N &&
	     macToRing_1_gearbox_out_ff_EMPTY_N ;

  // rule RL_macToRing_1_gearbox_readPacketOdd
  assign WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd =
	     macToRing_1_gearbox_in_ff_EMPTY_N &&
	     (!macToRing_1_gearbox_in_ff_D_OUT[0] ||
	      macToRing_1_gearbox_out_ff_FULL_N) &&
	     macToRing_1_gearbox_inProgress &&
	     macToRing_1_gearbox_oddBeat ;

  // rule RL_macToRing_1_gearbox_readPacketEven
  assign WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven =
	     macToRing_1_gearbox_in_ff_EMPTY_N &&
	     macToRing_1_gearbox_out_ff_FULL_N &&
	     macToRing_1_gearbox_inProgress &&
	     !macToRing_1_gearbox_oddBeat ;

  // rule RL_macToRing_1_gearbox_startOfPacket
  assign WILL_FIRE_RL_macToRing_1_gearbox_startOfPacket =
	     macToRing_1_gearbox_in_ff_EMPTY_N &&
	     !macToRing_1_gearbox_inProgress ;

  // rule RL_pktBuff_0_packetReadInProgress
  assign WILL_FIRE_RL_pktBuff_0_packetReadInProgress =
	     pktBuff_0_readDataFifo_EMPTY_N &&
	     pktBuff_0_writeDataFifo_FULL_N &&
	     pktBuff_0_readStarted ;

  // rule RL_pktBuff_1_packetReadInProgress
  assign WILL_FIRE_RL_pktBuff_1_packetReadInProgress =
	     pktBuff_1_readDataFifo_EMPTY_N &&
	     pktBuff_1_writeDataFifo_FULL_N &&
	     pktBuff_1_readStarted ;

  // rule RL_pktBuff_2_packetReadInProgress
  assign WILL_FIRE_RL_pktBuff_2_packetReadInProgress =
	     pktBuff_2_readDataFifo_EMPTY_N &&
	     pktBuff_2_writeDataFifo_FULL_N &&
	     pktBuff_2_readStarted ;

  // rule RL_pktBuff_0_enqueue_first_beat
  assign WILL_FIRE_RL_pktBuff_0_enqueue_first_beat =
	     pktBuff_0_incomingReqs_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterA_cnt_86_SLT_3___d1155 &&
	     !pktBuff_0_fifoEop_EMPTY_N &&
	     !pktBuff_0_inPacket ;

  // rule RL_pktBuff_0_commit_packet
  assign WILL_FIRE_RL_pktBuff_0_commit_packet =
	     pktBuff_0_incomingReqs_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterA_cnt_86_SLT_3___d1155 &&
	     pktBuff_0_fifoEop_EMPTY_N &&
	     pktBuff_0_fifoLen_FULL_N &&
	     pktBuff_0_fifoEop_EMPTY_N &&
	     pktBuff_0_inPacket ;

  // rule RL_pktBuff_0_enq_stage1
  assign WILL_FIRE_RL_pktBuff_0_enq_stage1 =
	     pktBuff_0_fifoWriteData_EMPTY_N &&
	     pktBuff_0_incomingReqs_FULL_N &&
	     (!pktBuff_0_fifoWriteData_D_OUT[0] || pktBuff_0_fifoEop_FULL_N) ;

  // rule RL_pktBuff_0_dequeue_first_beat
  assign WILL_FIRE_RL_pktBuff_0_dequeue_first_beat =
	     pktBuff_0_fifoReadReq_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterB_cnt_051_SLT_3___d1181 &&
	     !pktBuff_0_outPacket ;

  // rule RL_pktBuff_0_memBuffer_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_setFirstEnq =
	     !pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_pktBuff_0_dequeue_next_beat
  assign WILL_FIRE_RL_pktBuff_0_dequeue_next_beat =
	     (pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N ||
	      pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas) &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_outData_whas &&
	     pktBuff_0_fifoReadData_FULL_N &&
	     (pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	      pktBuff_0_memBuffer_serverAdapterB_cnt_051_SLT_3___d1181) &&
	     pktBuff_0_outPacket ;

  // rule RL_pktBuff_0_memBuffer_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_enqAndDeq =
	     pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_ringToMac_0_cross_clocking
  assign WILL_FIRE_RL_ringToMac_0_cross_clocking =
	     ringToMac_0_tx_fifo_sFULL_N && ringToMac_0_readDataFifo_EMPTY_N ;

  // rule RL_ringToMac_0_process_incoming_packet
  assign WILL_FIRE_RL_ringToMac_0_process_incoming_packet =
	     NOT_ringToMac_0_fifoTxData_write_block_231_232_ETC___d1252 &&
	     ringToMac_0_tx_fifo_dEMPTY_N ;

  // rule RL_ringToMac_0_process_outgoing_packet
  assign WILL_FIRE_RL_ringToMac_0_process_outgoing_packet =
	     NOT_ringToMac_0_fifoTxData_read_block_271_272__ETC___d1294 &&
	     (IF_ringToMac_0_fifoTxData_read_block_271_THEN__ETC___d1309 ==
	      8'd0 ||
	      ringToMac_0_writeMacFifo_FULL_N) ;

  // rule RL_pktBuff_1_enqueue_first_beat
  assign WILL_FIRE_RL_pktBuff_1_enqueue_first_beat =
	     pktBuff_1_incomingReqs_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterA_cnt_430_SLT_3___d1599 &&
	     !pktBuff_1_fifoEop_EMPTY_N &&
	     !pktBuff_1_inPacket ;

  // rule RL_pktBuff_1_commit_packet
  assign WILL_FIRE_RL_pktBuff_1_commit_packet =
	     pktBuff_1_incomingReqs_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterA_cnt_430_SLT_3___d1599 &&
	     pktBuff_1_fifoEop_EMPTY_N &&
	     pktBuff_1_fifoLen_FULL_N &&
	     pktBuff_1_fifoEop_EMPTY_N &&
	     pktBuff_1_inPacket ;

  // rule RL_pktBuff_1_enq_stage1
  assign WILL_FIRE_RL_pktBuff_1_enq_stage1 =
	     pktBuff_1_fifoWriteData_EMPTY_N &&
	     pktBuff_1_incomingReqs_FULL_N &&
	     (!pktBuff_1_fifoWriteData_D_OUT[0] || pktBuff_1_fifoEop_FULL_N) ;

  // rule RL_pktBuff_1_dequeue_first_beat
  assign WILL_FIRE_RL_pktBuff_1_dequeue_first_beat =
	     pktBuff_1_fifoReadReq_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterB_cnt_495_SLT_3___d1625 &&
	     !pktBuff_1_outPacket ;

  // rule RL_pktBuff_1_memBuffer_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_setFirstEnq =
	     !pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_pktBuff_1_dequeue_next_beat
  assign WILL_FIRE_RL_pktBuff_1_dequeue_next_beat =
	     (pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N ||
	      pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas) &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_outData_whas &&
	     pktBuff_1_fifoReadData_FULL_N &&
	     (pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	      pktBuff_1_memBuffer_serverAdapterB_cnt_495_SLT_3___d1625) &&
	     pktBuff_1_outPacket ;

  // rule RL_pktBuff_1_memBuffer_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_enqAndDeq =
	     pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas ;

  // rule RL_ringToMac_1_cross_clocking
  assign WILL_FIRE_RL_ringToMac_1_cross_clocking =
	     ringToMac_1_tx_fifo_sFULL_N && ringToMac_1_readDataFifo_EMPTY_N ;

  // rule RL_ringToMac_1_process_incoming_packet
  assign WILL_FIRE_RL_ringToMac_1_process_incoming_packet =
	     NOT_ringToMac_1_fifoTxData_write_block_675_676_ETC___d1696 &&
	     ringToMac_1_tx_fifo_dEMPTY_N ;

  // rule RL_ringToMac_1_process_outgoing_packet
  assign WILL_FIRE_RL_ringToMac_1_process_outgoing_packet =
	     NOT_ringToMac_1_fifoTxData_read_block_715_716__ETC___d1738 &&
	     (IF_ringToMac_1_fifoTxData_read_block_715_THEN__ETC___d1753 ==
	      8'd0 ||
	      ringToMac_1_writeMacFifo_FULL_N) ;

  // rule RL_xbar_upper_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty =
	     xbar_upper_merges_fi1_EMPTY_N && xbar_upper_merges_fo_FULL_N &&
	     !xbar_upper_merges_fi0_EMPTY_N ;

  // rule RL_xbar_upper_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty =
	     xbar_upper_merges_fo_FULL_N && xbar_upper_merges_fi0_EMPTY_N &&
	     !xbar_upper_merges_fi1_EMPTY_N ;

  // rule RL_xbar_upper_merges_both_have_data
  assign WILL_FIRE_RL_xbar_upper_merges_both_have_data =
	     (xbar_upper_merges_routeFrom[1] ?
		xbar_upper_merges_fo_i_notFull__207_AND_IF_xba_ETC___d2223 :
		IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2232) &&
	     xbar_upper_merges_fi0_EMPTY_N &&
	     xbar_upper_merges_fi1_EMPTY_N ;

  // rule RL_xbar_upper_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty =
	     xbar_upper_merges_1_fi1_EMPTY_N &&
	     xbar_upper_merges_1_fo_FULL_N &&
	     !xbar_upper_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_upper_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty =
	     xbar_upper_merges_1_fo_FULL_N &&
	     xbar_upper_merges_1_fi0_EMPTY_N &&
	     !xbar_upper_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_upper_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_upper_merges_1_both_have_data =
	     (xbar_upper_merges_1_routeFrom[1] ?
		xbar_upper_merges_1_fo_i_notFull__282_AND_IF_x_ETC___d2298 :
		IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2307) &&
	     xbar_upper_merges_1_fi0_EMPTY_N &&
	     xbar_upper_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_upper_route
  assign WILL_FIRE_RL_xbar_upper_route =
	     xbar_upper_upper_f_EMPTY_N &&
	     (xbar_upper_upper_f_D_OUT[578] ?
		xbar_upper_merges_1_fi1_FULL_N :
		xbar_upper_merges_fi0_FULL_N) ;

  // rule RL_xbar_upper_route_1
  assign WILL_FIRE_RL_xbar_upper_route_1 =
	     xbar_upper_lower_f_EMPTY_N &&
	     (xbar_upper_lower_f_D_OUT[578] ?
		xbar_upper_merges_1_fi0_FULL_N :
		xbar_upper_merges_fi1_FULL_N) ;

  // rule RL_xbar_lower_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty =
	     xbar_lower_merges_fi1_EMPTY_N && xbar_lower_merges_fo_FULL_N &&
	     !xbar_lower_merges_fi0_EMPTY_N ;

  // rule RL_xbar_lower_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty =
	     xbar_lower_merges_fo_FULL_N && xbar_lower_merges_fi0_EMPTY_N &&
	     !xbar_lower_merges_fi1_EMPTY_N ;

  // rule RL_xbar_lower_merges_both_have_data
  assign WILL_FIRE_RL_xbar_lower_merges_both_have_data =
	     (xbar_lower_merges_routeFrom[1] ?
		xbar_lower_merges_fo_i_notFull__381_AND_IF_xba_ETC___d2397 :
		IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2406) &&
	     xbar_lower_merges_fi0_EMPTY_N &&
	     xbar_lower_merges_fi1_EMPTY_N ;

  // rule RL_xbar_lower_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty =
	     xbar_lower_merges_1_fi1_EMPTY_N &&
	     xbar_lower_merges_1_fo_FULL_N &&
	     !xbar_lower_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_lower_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty =
	     xbar_lower_merges_1_fo_FULL_N &&
	     xbar_lower_merges_1_fi0_EMPTY_N &&
	     !xbar_lower_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_lower_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_lower_merges_1_both_have_data =
	     (xbar_lower_merges_1_routeFrom[1] ?
		xbar_lower_merges_1_fo_i_notFull__456_AND_IF_x_ETC___d2472 :
		IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2481) &&
	     xbar_lower_merges_1_fi0_EMPTY_N &&
	     xbar_lower_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_lower_route
  assign WILL_FIRE_RL_xbar_lower_route =
	     xbar_lower_upper_f_EMPTY_N &&
	     (xbar_lower_upper_f_D_OUT[578] ?
		xbar_lower_merges_1_fi1_FULL_N :
		xbar_lower_merges_fi0_FULL_N) ;

  // rule RL_xbar_lower_route_1
  assign WILL_FIRE_RL_xbar_lower_route_1 =
	     xbar_lower_lower_f_EMPTY_N &&
	     (xbar_lower_lower_f_D_OUT[578] ?
		xbar_lower_merges_1_fi0_FULL_N :
		xbar_lower_merges_fi1_FULL_N) ;

  // rule RL_xbar_merges_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_fi0_is_empty =
	     xbar_merges_fi1_EMPTY_N && xbar_merges_fo_FULL_N &&
	     !xbar_merges_fi0_EMPTY_N ;

  // rule RL_xbar_merges_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_fi1_is_empty =
	     xbar_merges_fo_FULL_N && xbar_merges_fi0_EMPTY_N &&
	     !xbar_merges_fi1_EMPTY_N ;

  // rule RL_xbar_merges_both_have_data
  assign WILL_FIRE_RL_xbar_merges_both_have_data =
	     (xbar_merges_routeFrom[1] ?
		xbar_merges_fo_i_notFull__553_AND_IF_xbar_merg_ETC___d2569 :
		IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2578) &&
	     xbar_merges_fi0_EMPTY_N &&
	     xbar_merges_fi1_EMPTY_N ;

  // rule RL_xbar_merges_1_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_1_fi0_is_empty =
	     xbar_merges_1_fi1_EMPTY_N && xbar_merges_1_fo_FULL_N &&
	     !xbar_merges_1_fi0_EMPTY_N ;

  // rule RL_xbar_merges_1_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_1_fi1_is_empty =
	     xbar_merges_1_fo_FULL_N && xbar_merges_1_fi0_EMPTY_N &&
	     !xbar_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_merges_1_both_have_data
  assign WILL_FIRE_RL_xbar_merges_1_both_have_data =
	     (xbar_merges_1_routeFrom[1] ?
		xbar_merges_1_fo_i_notFull__628_AND_IF_xbar_me_ETC___d2644 :
		IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2653) &&
	     xbar_merges_1_fi0_EMPTY_N &&
	     xbar_merges_1_fi1_EMPTY_N ;

  // rule RL_xbar_merges_2_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_2_fi0_is_empty =
	     xbar_merges_2_fi1_EMPTY_N && xbar_merges_2_fo_FULL_N &&
	     !xbar_merges_2_fi0_EMPTY_N ;

  // rule RL_xbar_merges_2_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_2_fi1_is_empty =
	     xbar_merges_2_fo_FULL_N && xbar_merges_2_fi0_EMPTY_N &&
	     !xbar_merges_2_fi1_EMPTY_N ;

  // rule RL_xbar_merges_2_both_have_data
  assign WILL_FIRE_RL_xbar_merges_2_both_have_data =
	     (xbar_merges_2_routeFrom[1] ?
		xbar_merges_2_fo_i_notFull__703_AND_IF_xbar_me_ETC___d2719 :
		IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2728) &&
	     xbar_merges_2_fi0_EMPTY_N &&
	     xbar_merges_2_fi1_EMPTY_N ;

  // rule RL_xbar_route
  assign WILL_FIRE_RL_xbar_route =
	     xbar_upper_merges_fo_EMPTY_N &&
	     (xbar_upper_merges_fo_D_OUT[579] ?
		xbar_merges_2_fi1_FULL_N :
		xbar_merges_fi0_FULL_N) ;

  // rule RL_xbar_route_2
  assign WILL_FIRE_RL_xbar_route_2 =
	     xbar_lower_merges_fo_EMPTY_N &&
	     (xbar_lower_merges_fo_D_OUT[579] ?
		xbar_merges_2_fi0_FULL_N :
		xbar_merges_fi1_FULL_N) ;

  // rule RL_xbar_merges_3_fi0_is_empty
  assign WILL_FIRE_RL_xbar_merges_3_fi0_is_empty =
	     xbar_merges_3_fi1_EMPTY_N && xbar_merges_3_fo_FULL_N &&
	     !xbar_merges_3_fi0_EMPTY_N ;

  // rule RL_xbar_merges_3_fi1_is_empty
  assign WILL_FIRE_RL_xbar_merges_3_fi1_is_empty =
	     xbar_merges_3_fo_FULL_N && xbar_merges_3_fi0_EMPTY_N &&
	     !xbar_merges_3_fi1_EMPTY_N ;

  // rule RL_xbar_merges_3_both_have_data
  assign WILL_FIRE_RL_xbar_merges_3_both_have_data =
	     (xbar_merges_3_routeFrom[1] ?
		xbar_merges_3_fo_i_notFull__778_AND_IF_xbar_me_ETC___d2794 :
		IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2803) &&
	     xbar_merges_3_fi0_EMPTY_N &&
	     xbar_merges_3_fi1_EMPTY_N ;

  // rule RL_xbar_route_1
  assign WILL_FIRE_RL_xbar_route_1 =
	     xbar_upper_merges_1_fo_EMPTY_N &&
	     (xbar_upper_merges_1_fo_D_OUT[579] ?
		xbar_merges_3_fi1_FULL_N :
		xbar_merges_1_fi0_FULL_N) ;

  // rule RL_xbar_route_3
  assign WILL_FIRE_RL_xbar_route_3 =
	     xbar_lower_merges_1_fo_EMPTY_N &&
	     (xbar_lower_merges_1_fo_D_OUT[579] ?
		xbar_merges_3_fi0_FULL_N :
		xbar_merges_1_fi1_FULL_N) ;

  // inputs to muxes for submodule ports
  assign MUX_hostchan_0_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_hostchan_0_packetReadInProgress &&
	     hostchan_0_readDataFifo_D_OUT[0] ;
  assign MUX_hostchan_0_readStarted_write_1__SEL_2 =
	     hostchan_0_readLenFifo_EMPTY_N && hostchan_0_pktLenFifo_FULL_N &&
	     hostchan_0_readReqFifo_FULL_N &&
	     !hostchan_0_readStarted ;
  assign MUX_hostchan_1_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_hostchan_1_packetReadInProgress &&
	     hostchan_1_readDataFifo_D_OUT[0] ;
  assign MUX_hostchan_1_readStarted_write_1__SEL_2 =
	     hostchan_1_readLenFifo_EMPTY_N && hostchan_1_pktLenFifo_FULL_N &&
	     hostchan_1_readReqFifo_FULL_N &&
	     !hostchan_1_readStarted ;
  assign MUX_macToRing_0_gearbox_inProgress_write_1__PSEL_1 =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd ;
  assign MUX_macToRing_0_gearbox_inProgress_write_1__SEL_1 =
	     MUX_macToRing_0_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_0_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_0_gearbox_oddBeat_write_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd &&
	     !macToRing_0_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_0_gearbox_out_ff_enq_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd &&
	     macToRing_0_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_1_gearbox_inProgress_write_1__PSEL_1 =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd ;
  assign MUX_macToRing_1_gearbox_inProgress_write_1__SEL_1 =
	     MUX_macToRing_1_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_1_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_1_gearbox_oddBeat_write_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd &&
	     !macToRing_1_gearbox_in_ff_D_OUT[0] ;
  assign MUX_macToRing_1_gearbox_out_ff_enq_1__SEL_1 =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd &&
	     macToRing_1_gearbox_in_ff_D_OUT[0] ;
  assign MUX_pktBuff_0_fifoWriteData_enq_1__SEL_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_39 &&
	     !EN_txchan_0_writeServer_enq ;
  assign MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     !pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_0_outPacket_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_0_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_0_packetReadInProgress &&
	     pktBuff_0_readDataFifo_D_OUT[0] ;
  assign MUX_pktBuff_0_readStarted_write_1__SEL_2 =
	     pktBuff_0_meta_ff_EMPTY_N && pktBuff_0_readLenFifo_EMPTY_N &&
	     pktBuff_0_readReqFifo_FULL_N &&
	     !pktBuff_0_readStarted ;
  assign MUX_pktBuff_1_fifoWriteData_enq_1__SEL_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_40 &&
	     !EN_txchan_1_writeServer_enq ;
  assign MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     !pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_1_outPacket_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ;
  assign MUX_pktBuff_1_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_1_packetReadInProgress &&
	     pktBuff_1_readDataFifo_D_OUT[0] ;
  assign MUX_pktBuff_1_readStarted_write_1__SEL_2 =
	     pktBuff_1_meta_ff_EMPTY_N && pktBuff_1_readLenFifo_EMPTY_N &&
	     pktBuff_1_readReqFifo_FULL_N &&
	     !pktBuff_1_readStarted ;
  assign MUX_pktBuff_2_readStarted_write_1__SEL_1 =
	     WILL_FIRE_RL_pktBuff_2_packetReadInProgress &&
	     pktBuff_2_readDataFifo_D_OUT[0] ;
  assign MUX_pktBuff_2_readStarted_write_1__SEL_2 =
	     pktBuff_2_meta_ff_EMPTY_N && pktBuff_2_readLenFifo_EMPTY_N &&
	     pktBuff_2_readReqFifo_FULL_N &&
	     !pktBuff_2_readStarted ;
  assign MUX_readStarted_0_write_1__SEL_1 =
	     WILL_FIRE_RL_packetReadInProgress && readDataFifo_0_D_OUT[0] ;
  assign MUX_readStarted_0_write_1__SEL_2 =
	     readLenFifo_0_EMPTY_N && pktLenFifo_0_FULL_N &&
	     readReqFifo_0_FULL_N &&
	     !readStarted_0 ;
  assign MUX_ringToMac_0_idle_cycles_write_1__SEL_1 =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     IF_ringToMac_0_fifoTxData_read_block_271_THEN__ETC___d1309 ==
	     8'd0 ;
  assign MUX_ringToMac_1_idle_cycles_write_1__SEL_1 =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     IF_ringToMac_1_fifoTxData_read_block_715_THEN__ETC___d1753 ==
	     8'd0 ;
  assign MUX_xbar_lower_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     xbar_lower_merges_1_routeFrom_468_BIT_1_469_AN_ETC___d2514 ;
  assign MUX_xbar_lower_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     (xbar_lower_merges_1_routeFrom[1] ||
	      IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2494) ;
  assign MUX_xbar_lower_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     xbar_lower_merges_routeFrom_393_BIT_1_394_AND__ETC___d2439 ;
  assign MUX_xbar_lower_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     (xbar_lower_merges_routeFrom[1] ||
	      IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2419) ;
  assign MUX_xbar_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     xbar_merges_1_routeFrom_640_BIT_1_641_AND_IF_x_ETC___d2686 ;
  assign MUX_xbar_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     (xbar_merges_1_routeFrom[1] ||
	      IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2666) ;
  assign MUX_xbar_merges_2_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     xbar_merges_2_routeFrom_715_BIT_1_716_AND_IF_x_ETC___d2761 ;
  assign MUX_xbar_merges_2_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     (xbar_merges_2_routeFrom[1] ||
	      IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2741) ;
  assign MUX_xbar_merges_3_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     xbar_merges_3_routeFrom_790_BIT_1_791_AND_IF_x_ETC___d2836 ;
  assign MUX_xbar_merges_3_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     (xbar_merges_3_routeFrom[1] ||
	      IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2816) ;
  assign MUX_xbar_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     xbar_merges_routeFrom_565_BIT_1_566_AND_IF_xba_ETC___d2611 ;
  assign MUX_xbar_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     (xbar_merges_routeFrom[1] ||
	      IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2591) ;
  assign MUX_xbar_upper_merges_1_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     xbar_upper_merges_1_routeFrom_294_BIT_1_295_AN_ETC___d2340 ;
  assign MUX_xbar_upper_merges_1_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     (xbar_upper_merges_1_routeFrom[1] ||
	      IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2320) ;
  assign MUX_xbar_upper_merges_fi0HasPrio_write_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     xbar_upper_merges_routeFrom_219_BIT_1_220_AND__ETC___d2265 ;
  assign MUX_xbar_upper_merges_fo_enq_1__SEL_1 =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     (xbar_upper_merges_routeFrom[1] ||
	      IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2245) ;
  assign MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_1 =
	     { macToRing_0_gearbox_in_ff_D_OUT[105:74],
	       x_data__h9333,
	       8'd0,
	       macToRing_0_gearbox_in_ff_D_OUT[9:0] } ;
  assign MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_2 =
	     { macToRing_0_gearbox_v_prev[105:74],
	       x_data__h10291,
	       x_mask__h10292,
	       macToRing_0_gearbox_v_prev[1],
	       macToRing_0_gearbox_v_prev[0] ||
	       macToRing_0_gearbox_in_ff_D_OUT[0] } ;
  assign MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_1 =
	     { macToRing_1_gearbox_in_ff_D_OUT[105:74],
	       x_data__h16327,
	       8'd0,
	       macToRing_1_gearbox_in_ff_D_OUT[9:0] } ;
  assign MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_2 =
	     { macToRing_1_gearbox_v_prev[105:74],
	       x_data__h17285,
	       x_mask__h17286,
	       macToRing_1_gearbox_v_prev[1],
	       macToRing_1_gearbox_v_prev[0] ||
	       macToRing_1_gearbox_in_ff_D_OUT[0] } ;
  assign MUX_pktBuff_0_rdCurrPtr_write_1__VAL_1 = pktBuff_0_rdCurrPtr + 8'd1 ;
  assign MUX_pktBuff_1_rdCurrPtr_write_1__VAL_1 = pktBuff_1_rdCurrPtr + 8'd1 ;
  assign MUX_ringToMac_0_idle_cycles_write_1__VAL_1 =
	     ringToMac_0_idle_cycles + 64'd1 ;
  assign MUX_ringToMac_1_idle_cycles_write_1__VAL_1 =
	     ringToMac_1_idle_cycles + 64'd1 ;
  assign MUX_xbar_lower_merges_1_fo_enq_1__VAL_1 =
	     xbar_lower_merges_1_routeFrom[1] ?
	       (xbar_lower_merges_1_routeFrom[0] ?
		  xbar_lower_merges_1_fi1_D_OUT :
		  xbar_lower_merges_1_fi0_D_OUT) :
	       (xbar_lower_merges_1_fi0HasPrio ?
		  xbar_lower_merges_1_fi0_D_OUT :
		  xbar_lower_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_lower_merges_fo_enq_1__VAL_1 =
	     xbar_lower_merges_routeFrom[1] ?
	       (xbar_lower_merges_routeFrom[0] ?
		  xbar_lower_merges_fi1_D_OUT :
		  xbar_lower_merges_fi0_D_OUT) :
	       (xbar_lower_merges_fi0HasPrio ?
		  xbar_lower_merges_fi0_D_OUT :
		  xbar_lower_merges_fi1_D_OUT) ;
  assign MUX_xbar_merges_1_fo_enq_1__VAL_1 =
	     xbar_merges_1_routeFrom[1] ?
	       (xbar_merges_1_routeFrom[0] ?
		  xbar_merges_1_fi1_D_OUT :
		  xbar_merges_1_fi0_D_OUT) :
	       (xbar_merges_1_fi0HasPrio ?
		  xbar_merges_1_fi0_D_OUT :
		  xbar_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_merges_2_fo_enq_1__VAL_1 =
	     xbar_merges_2_routeFrom[1] ?
	       (xbar_merges_2_routeFrom[0] ?
		  xbar_merges_2_fi1_D_OUT :
		  xbar_merges_2_fi0_D_OUT) :
	       (xbar_merges_2_fi0HasPrio ?
		  xbar_merges_2_fi0_D_OUT :
		  xbar_merges_2_fi1_D_OUT) ;
  assign MUX_xbar_merges_3_fo_enq_1__VAL_1 =
	     xbar_merges_3_routeFrom[1] ?
	       (xbar_merges_3_routeFrom[0] ?
		  xbar_merges_3_fi1_D_OUT :
		  xbar_merges_3_fi0_D_OUT) :
	       (xbar_merges_3_fi0HasPrio ?
		  xbar_merges_3_fi0_D_OUT :
		  xbar_merges_3_fi1_D_OUT) ;
  assign MUX_xbar_merges_fo_enq_1__VAL_1 =
	     xbar_merges_routeFrom[1] ?
	       (xbar_merges_routeFrom[0] ?
		  xbar_merges_fi1_D_OUT :
		  xbar_merges_fi0_D_OUT) :
	       (xbar_merges_fi0HasPrio ?
		  xbar_merges_fi0_D_OUT :
		  xbar_merges_fi1_D_OUT) ;
  assign MUX_xbar_upper_merges_1_fo_enq_1__VAL_1 =
	     xbar_upper_merges_1_routeFrom[1] ?
	       (xbar_upper_merges_1_routeFrom[0] ?
		  xbar_upper_merges_1_fi1_D_OUT :
		  xbar_upper_merges_1_fi0_D_OUT) :
	       (xbar_upper_merges_1_fi0HasPrio ?
		  xbar_upper_merges_1_fi0_D_OUT :
		  xbar_upper_merges_1_fi1_D_OUT) ;
  assign MUX_xbar_upper_merges_fo_enq_1__VAL_1 =
	     xbar_upper_merges_routeFrom[1] ?
	       (xbar_upper_merges_routeFrom[0] ?
		  xbar_upper_merges_fi1_D_OUT :
		  xbar_upper_merges_fi0_D_OUT) :
	       (xbar_upper_merges_fi0HasPrio ?
		  xbar_upper_merges_fi0_D_OUT :
		  xbar_upper_merges_fi1_D_OUT) ;

  // inlined wires
  assign pktBuff_0_memBuffer_serverAdapterA_outData_enqData_whas =
	     (!pktBuff_0_memBuffer_serverAdapterA_s2[0] ||
	      pktBuff_0_memBuffer_serverAdapterA_outDataCore_FULL_N) &&
	     pktBuff_0_memBuffer_serverAdapterA_s2[1] &&
	     pktBuff_0_memBuffer_serverAdapterA_s2[0] ;
  assign pktBuff_0_memBuffer_serverAdapterA_writeWithResp_whas =
	     WILL_FIRE_RL_pktBuff_0_commit_packet ||
	     pktBuff_0_incomingReqs_EMPTY_N &&
	     pktBuff_0_memBuffer_serverAdapterA_cnt_86_SLT_3___d1155 &&
	     !pktBuff_0_fifoEop_EMPTY_N &&
	     pktBuff_0_inPacket ||
	     WILL_FIRE_RL_pktBuff_0_enqueue_first_beat ;
  assign pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas =
	     (!pktBuff_0_memBuffer_serverAdapterB_s2[0] ||
	      pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N) &&
	     pktBuff_0_memBuffer_serverAdapterB_s2[1] &&
	     pktBuff_0_memBuffer_serverAdapterB_s2[0] ;
  assign pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget =
	     WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_setFirstEnq ?
	       pktBuff_0_memBuffer_memory_DOB :
	       pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_OUT ;
  assign pktBuff_0_memBuffer_serverAdapterB_outData_outData_whas =
	     WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_setFirstEnq ||
	     pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N ;
  assign pktBuff_0_memBuffer_serverAdapterB_cnt_1_whas =
	     (MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1 ||
	      WILL_FIRE_RL_pktBuff_0_dequeue_first_beat) &&
	     (!ab__h36853[1] || ab__h36853[0]) ;
  assign pktBuff_0_memBuffer_serverAdapterB_writeWithResp_whas =
	     MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1 ||
	     WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;
  assign pktBuff_0_memBuffer_serverAdapterB_s1_1_wget =
	     { 1'd1, !ab__h36853[1] || ab__h36853[0] } ;
  assign pktBuff_1_memBuffer_serverAdapterA_outData_enqData_whas =
	     (!pktBuff_1_memBuffer_serverAdapterA_s2[0] ||
	      pktBuff_1_memBuffer_serverAdapterA_outDataCore_FULL_N) &&
	     pktBuff_1_memBuffer_serverAdapterA_s2[1] &&
	     pktBuff_1_memBuffer_serverAdapterA_s2[0] ;
  assign pktBuff_1_memBuffer_serverAdapterA_writeWithResp_whas =
	     WILL_FIRE_RL_pktBuff_1_commit_packet ||
	     pktBuff_1_incomingReqs_EMPTY_N &&
	     pktBuff_1_memBuffer_serverAdapterA_cnt_430_SLT_3___d1599 &&
	     !pktBuff_1_fifoEop_EMPTY_N &&
	     pktBuff_1_inPacket ||
	     WILL_FIRE_RL_pktBuff_1_enqueue_first_beat ;
  assign pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas =
	     (!pktBuff_1_memBuffer_serverAdapterB_s2[0] ||
	      pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N) &&
	     pktBuff_1_memBuffer_serverAdapterB_s2[1] &&
	     pktBuff_1_memBuffer_serverAdapterB_s2[0] ;
  assign pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget =
	     WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_setFirstEnq ?
	       pktBuff_1_memBuffer_memory_DOB :
	       pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_OUT ;
  assign pktBuff_1_memBuffer_serverAdapterB_outData_outData_whas =
	     WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_setFirstEnq ||
	     pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N ;
  assign pktBuff_1_memBuffer_serverAdapterB_cnt_1_whas =
	     (MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1 ||
	      WILL_FIRE_RL_pktBuff_1_dequeue_first_beat) &&
	     (!ab__h55490[1] || ab__h55490[0]) ;
  assign pktBuff_1_memBuffer_serverAdapterB_writeWithResp_whas =
	     MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1 ||
	     WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;
  assign pktBuff_1_memBuffer_serverAdapterB_s1_1_wget =
	     { 1'd1, !ab__h55490[1] || ab__h55490[0] } ;

  // register cf_verbosity
  assign cf_verbosity_D_IN = set_verbosity_verbosity ;
  assign cf_verbosity_EN = EN_set_verbosity ;

  // register cf_verbosity_0
  assign cf_verbosity_0_D_IN = 32'h0 ;
  assign cf_verbosity_0_EN = 1'b0 ;

  // register cf_verbosity_0_1
  assign cf_verbosity_0_1_D_IN = verbose_ff_0_1_D_OUT ;
  assign cf_verbosity_0_1_EN = verbose_ff_0_1_EMPTY_N ;

  // register cf_verbosity_0_2
  assign cf_verbosity_0_2_D_IN = 32'h0 ;
  assign cf_verbosity_0_2_EN = 1'b0 ;

  // register cf_verbosity_0_3
  assign cf_verbosity_0_3_D_IN = 32'h0 ;
  assign cf_verbosity_0_3_EN = 1'b0 ;

  // register cf_verbosity_1
  assign cf_verbosity_1_D_IN = verbose_ff_1_D_OUT ;
  assign cf_verbosity_1_EN = verbose_ff_1_EMPTY_N ;

  // register cf_verbosity_1_1
  assign cf_verbosity_1_1_D_IN = 32'h0 ;
  assign cf_verbosity_1_1_EN = 1'b0 ;

  // register cf_verbosity_1_2
  assign cf_verbosity_1_2_D_IN = 32'h0 ;
  assign cf_verbosity_1_2_EN = 1'b0 ;

  // register cf_verbosity_2
  assign cf_verbosity_2_D_IN = 32'h0 ;
  assign cf_verbosity_2_EN = 1'b0 ;

  // register hostchan_0_cf_verbosity
  assign hostchan_0_cf_verbosity_D_IN = 32'h0 ;
  assign hostchan_0_cf_verbosity_EN = 1'b0 ;

  // register hostchan_0_readStarted
  assign hostchan_0_readStarted_D_IN =
	     !MUX_hostchan_0_readStarted_write_1__SEL_1 ;
  assign hostchan_0_readStarted_EN =
	     WILL_FIRE_RL_hostchan_0_packetReadInProgress &&
	     hostchan_0_readDataFifo_D_OUT[0] ||
	     hostchan_0_readLenFifo_EMPTY_N && hostchan_0_pktLenFifo_FULL_N &&
	     hostchan_0_readReqFifo_FULL_N &&
	     !hostchan_0_readStarted ;

  // register hostchan_1_cf_verbosity
  assign hostchan_1_cf_verbosity_D_IN = 32'h0 ;
  assign hostchan_1_cf_verbosity_EN = 1'b0 ;

  // register hostchan_1_readStarted
  assign hostchan_1_readStarted_D_IN =
	     !MUX_hostchan_1_readStarted_write_1__SEL_1 ;
  assign hostchan_1_readStarted_EN =
	     WILL_FIRE_RL_hostchan_1_packetReadInProgress &&
	     hostchan_1_readDataFifo_D_OUT[0] ||
	     hostchan_1_readLenFifo_EMPTY_N && hostchan_1_pktLenFifo_FULL_N &&
	     hostchan_1_readReqFifo_FULL_N &&
	     !hostchan_1_readStarted ;

  // register macToRing_0_data_bytes
  assign macToRing_0_data_bytes_D_IN = 64'h0 ;
  assign macToRing_0_data_bytes_EN = 1'b0 ;

  // register macToRing_0_gearbox_data_bytes
  assign macToRing_0_gearbox_data_bytes_D_IN =
	     macToRing_0_gearbox_data_bytes + y__h8909 ;
  assign macToRing_0_gearbox_data_bytes_EN =
	     MUX_macToRing_0_gearbox_inProgress_write_1__PSEL_1 ;

  // register macToRing_0_gearbox_eopCount
  assign macToRing_0_gearbox_eopCount_D_IN =
	     macToRing_0_gearbox_eopCount + 64'd1 ;
  assign macToRing_0_gearbox_eopCount_EN =
	     MUX_macToRing_0_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_0_gearbox_in_ff_D_OUT[0] ;

  // register macToRing_0_gearbox_idle_cycles
  assign macToRing_0_gearbox_idle_cycles_D_IN =
	     macToRing_0_gearbox_idle_cycles + 64'd1 ;
  assign macToRing_0_gearbox_idle_cycles_EN =
	     !macToRing_0_gearbox_inProgress ;

  // register macToRing_0_gearbox_inProgress
  assign macToRing_0_gearbox_inProgress_D_IN =
	     !MUX_macToRing_0_gearbox_inProgress_write_1__SEL_1 &&
	     macToRing_0_gearbox_in_ff_D_OUT[1] ;
  assign macToRing_0_gearbox_inProgress_EN =
	     (WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven ||
	      WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd) &&
	     macToRing_0_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_0_gearbox_startOfPacket ;

  // register macToRing_0_gearbox_oddBeat
  assign macToRing_0_gearbox_oddBeat_D_IN =
	     MUX_macToRing_0_gearbox_oddBeat_write_1__SEL_1 ?
	       !macToRing_0_gearbox_oddBeat :
	       !macToRing_0_gearbox_oddBeat ;
  assign macToRing_0_gearbox_oddBeat_EN =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd &&
	     !macToRing_0_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven ;

  // register macToRing_0_gearbox_sopCount
  assign macToRing_0_gearbox_sopCount_D_IN =
	     macToRing_0_gearbox_sopCount + 64'd1 ;
  assign macToRing_0_gearbox_sopCount_EN =
	     WILL_FIRE_RL_macToRing_0_gearbox_startOfPacket &&
	     macToRing_0_gearbox_in_ff_D_OUT[1] ;

  // register macToRing_0_gearbox_v_prev
  assign macToRing_0_gearbox_v_prev_D_IN = macToRing_0_gearbox_in_ff_D_OUT ;
  assign macToRing_0_gearbox_v_prev_EN =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd ;

  // register macToRing_0_total_cycles
  assign macToRing_0_total_cycles_D_IN = macToRing_0_total_cycles + 64'd1 ;
  assign macToRing_0_total_cycles_EN = 1'd1 ;

  // register macToRing_1_data_bytes
  assign macToRing_1_data_bytes_D_IN = 64'h0 ;
  assign macToRing_1_data_bytes_EN = 1'b0 ;

  // register macToRing_1_gearbox_data_bytes
  assign macToRing_1_gearbox_data_bytes_D_IN =
	     macToRing_1_gearbox_data_bytes + y__h15903 ;
  assign macToRing_1_gearbox_data_bytes_EN =
	     MUX_macToRing_1_gearbox_inProgress_write_1__PSEL_1 ;

  // register macToRing_1_gearbox_eopCount
  assign macToRing_1_gearbox_eopCount_D_IN =
	     macToRing_1_gearbox_eopCount + 64'd1 ;
  assign macToRing_1_gearbox_eopCount_EN =
	     MUX_macToRing_1_gearbox_inProgress_write_1__PSEL_1 &&
	     macToRing_1_gearbox_in_ff_D_OUT[0] ;

  // register macToRing_1_gearbox_idle_cycles
  assign macToRing_1_gearbox_idle_cycles_D_IN =
	     macToRing_1_gearbox_idle_cycles + 64'd1 ;
  assign macToRing_1_gearbox_idle_cycles_EN =
	     !macToRing_1_gearbox_inProgress ;

  // register macToRing_1_gearbox_inProgress
  assign macToRing_1_gearbox_inProgress_D_IN =
	     !MUX_macToRing_1_gearbox_inProgress_write_1__SEL_1 &&
	     macToRing_1_gearbox_in_ff_D_OUT[1] ;
  assign macToRing_1_gearbox_inProgress_EN =
	     (WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven ||
	      WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd) &&
	     macToRing_1_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_1_gearbox_startOfPacket ;

  // register macToRing_1_gearbox_oddBeat
  assign macToRing_1_gearbox_oddBeat_D_IN =
	     MUX_macToRing_1_gearbox_oddBeat_write_1__SEL_1 ?
	       !macToRing_1_gearbox_oddBeat :
	       !macToRing_1_gearbox_oddBeat ;
  assign macToRing_1_gearbox_oddBeat_EN =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd &&
	     !macToRing_1_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven ;

  // register macToRing_1_gearbox_sopCount
  assign macToRing_1_gearbox_sopCount_D_IN =
	     macToRing_1_gearbox_sopCount + 64'd1 ;
  assign macToRing_1_gearbox_sopCount_EN =
	     WILL_FIRE_RL_macToRing_1_gearbox_startOfPacket &&
	     macToRing_1_gearbox_in_ff_D_OUT[1] ;

  // register macToRing_1_gearbox_v_prev
  assign macToRing_1_gearbox_v_prev_D_IN = macToRing_1_gearbox_in_ff_D_OUT ;
  assign macToRing_1_gearbox_v_prev_EN =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd ;

  // register macToRing_1_total_cycles
  assign macToRing_1_total_cycles_D_IN = macToRing_1_total_cycles + 64'd1 ;
  assign macToRing_1_total_cycles_EN = 1'd1 ;

  // register pktBuff_0_cf_verbosity
  assign pktBuff_0_cf_verbosity_D_IN = verbose_ff_0_2_D_OUT ;
  assign pktBuff_0_cf_verbosity_EN = verbose_ff_0_2_EMPTY_N ;

  // register pktBuff_0_cf_verbosity_1
  assign pktBuff_0_cf_verbosity_1_D_IN = 32'h0 ;
  assign pktBuff_0_cf_verbosity_1_EN = 1'b0 ;

  // register pktBuff_0_eopDeq
  assign pktBuff_0_eopDeq_D_IN = pktBuff_0_eopDeq + 64'd1 ;
  assign pktBuff_0_eopDeq_EN = MUX_pktBuff_0_outPacket_write_1__SEL_1 ;

  // register pktBuff_0_eopEnq
  assign pktBuff_0_eopEnq_D_IN = pktBuff_0_eopEnq + 64'd1 ;
  assign pktBuff_0_eopEnq_EN = WILL_FIRE_RL_pktBuff_0_commit_packet ;

  // register pktBuff_0_inPacket
  assign pktBuff_0_inPacket_D_IN = WILL_FIRE_RL_pktBuff_0_enq_stage1 ;
  assign pktBuff_0_inPacket_EN =
	     WILL_FIRE_RL_pktBuff_0_commit_packet ||
	     WILL_FIRE_RL_pktBuff_0_enq_stage1 ;

  // register pktBuff_0_memBuffer_serverAdapterA_cnt
  assign pktBuff_0_memBuffer_serverAdapterA_cnt_D_IN =
	     pktBuff_0_memBuffer_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign pktBuff_0_memBuffer_serverAdapterA_cnt_EN = 1'b0 ;

  // register pktBuff_0_memBuffer_serverAdapterA_s1
  assign pktBuff_0_memBuffer_serverAdapterA_s1_D_IN =
	     { pktBuff_0_memBuffer_serverAdapterA_writeWithResp_whas, 1'b0 } ;
  assign pktBuff_0_memBuffer_serverAdapterA_s1_EN = 1'd1 ;

  // register pktBuff_0_memBuffer_serverAdapterA_s2
  assign pktBuff_0_memBuffer_serverAdapterA_s2_D_IN =
	     pktBuff_0_memBuffer_serverAdapterA_s1 ;
  assign pktBuff_0_memBuffer_serverAdapterA_s2_EN =
	     pktBuff_0_memBuffer_serverAdapterA_s1[1] ||
	     pktBuff_0_memBuffer_serverAdapterA_s2[1] ;

  // register pktBuff_0_memBuffer_serverAdapterB_cnt
  assign pktBuff_0_memBuffer_serverAdapterB_cnt_D_IN =
	     pktBuff_0_memBuffer_serverAdapterB_cnt_051_PLU_ETC___d1057 ;
  assign pktBuff_0_memBuffer_serverAdapterB_cnt_EN =
	     pktBuff_0_memBuffer_serverAdapterB_cnt_1_whas ||
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat ;

  // register pktBuff_0_memBuffer_serverAdapterB_s1
  assign pktBuff_0_memBuffer_serverAdapterB_s1_D_IN =
	     { pktBuff_0_memBuffer_serverAdapterB_writeWithResp_whas &&
	       pktBuff_0_memBuffer_serverAdapterB_s1_1_wget[1],
	       pktBuff_0_memBuffer_serverAdapterB_s1_1_wget[0] } ;
  assign pktBuff_0_memBuffer_serverAdapterB_s1_EN = 1'd1 ;

  // register pktBuff_0_memBuffer_serverAdapterB_s2
  assign pktBuff_0_memBuffer_serverAdapterB_s2_D_IN =
	     pktBuff_0_memBuffer_serverAdapterB_s1 ;
  assign pktBuff_0_memBuffer_serverAdapterB_s2_EN =
	     pktBuff_0_memBuffer_serverAdapterB_s1[1] ||
	     pktBuff_0_memBuffer_serverAdapterB_s2[1] ;

  // register pktBuff_0_outPacket
  assign pktBuff_0_outPacket_D_IN = !MUX_pktBuff_0_outPacket_write_1__SEL_1 ;
  assign pktBuff_0_outPacket_EN =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;

  // register pktBuff_0_packetLen
  assign pktBuff_0_packetLen_D_IN =
	     pktBuff_0_fifoWriteData_D_OUT[0] ? 16'd0 : newPacketLen__h37823 ;
  assign pktBuff_0_packetLen_EN = WILL_FIRE_RL_pktBuff_0_enq_stage1 ;

  // register pktBuff_0_rdCurrPtr
  assign pktBuff_0_rdCurrPtr_D_IN =
	     MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1 ?
	       MUX_pktBuff_0_rdCurrPtr_write_1__VAL_1 :
	       MUX_pktBuff_0_rdCurrPtr_write_1__VAL_1 ;
  assign pktBuff_0_rdCurrPtr_EN =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     !pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;

  // register pktBuff_0_readStarted
  assign pktBuff_0_readStarted_D_IN =
	     !MUX_pktBuff_0_readStarted_write_1__SEL_1 ;
  assign pktBuff_0_readStarted_EN =
	     WILL_FIRE_RL_pktBuff_0_packetReadInProgress &&
	     pktBuff_0_readDataFifo_D_OUT[0] ||
	     pktBuff_0_meta_ff_EMPTY_N && pktBuff_0_readLenFifo_EMPTY_N &&
	     pktBuff_0_readReqFifo_FULL_N &&
	     !pktBuff_0_readStarted ;

  // register pktBuff_0_sopDeq
  assign pktBuff_0_sopDeq_D_IN = pktBuff_0_sopDeq + 64'd1 ;
  assign pktBuff_0_sopDeq_EN = WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;

  // register pktBuff_0_sopEnq
  assign pktBuff_0_sopEnq_D_IN = pktBuff_0_sopEnq + 64'd1 ;
  assign pktBuff_0_sopEnq_EN = WILL_FIRE_RL_pktBuff_0_enqueue_first_beat ;

  // register pktBuff_0_wrCurrPtr
  assign pktBuff_0_wrCurrPtr_D_IN = pktBuff_0_wrCurrPtr + 8'd1 ;
  assign pktBuff_0_wrCurrPtr_EN = WILL_FIRE_RL_pktBuff_0_enq_stage1 ;

  // register pktBuff_1_cf_verbosity
  assign pktBuff_1_cf_verbosity_D_IN = verbose_ff_1_1_D_OUT ;
  assign pktBuff_1_cf_verbosity_EN = verbose_ff_1_1_EMPTY_N ;

  // register pktBuff_1_cf_verbosity_1
  assign pktBuff_1_cf_verbosity_1_D_IN = 32'h0 ;
  assign pktBuff_1_cf_verbosity_1_EN = 1'b0 ;

  // register pktBuff_1_eopDeq
  assign pktBuff_1_eopDeq_D_IN = pktBuff_1_eopDeq + 64'd1 ;
  assign pktBuff_1_eopDeq_EN = MUX_pktBuff_1_outPacket_write_1__SEL_1 ;

  // register pktBuff_1_eopEnq
  assign pktBuff_1_eopEnq_D_IN = pktBuff_1_eopEnq + 64'd1 ;
  assign pktBuff_1_eopEnq_EN = WILL_FIRE_RL_pktBuff_1_commit_packet ;

  // register pktBuff_1_inPacket
  assign pktBuff_1_inPacket_D_IN = WILL_FIRE_RL_pktBuff_1_enq_stage1 ;
  assign pktBuff_1_inPacket_EN =
	     WILL_FIRE_RL_pktBuff_1_commit_packet ||
	     WILL_FIRE_RL_pktBuff_1_enq_stage1 ;

  // register pktBuff_1_memBuffer_serverAdapterA_cnt
  assign pktBuff_1_memBuffer_serverAdapterA_cnt_D_IN =
	     pktBuff_1_memBuffer_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign pktBuff_1_memBuffer_serverAdapterA_cnt_EN = 1'b0 ;

  // register pktBuff_1_memBuffer_serverAdapterA_s1
  assign pktBuff_1_memBuffer_serverAdapterA_s1_D_IN =
	     { pktBuff_1_memBuffer_serverAdapterA_writeWithResp_whas, 1'b0 } ;
  assign pktBuff_1_memBuffer_serverAdapterA_s1_EN = 1'd1 ;

  // register pktBuff_1_memBuffer_serverAdapterA_s2
  assign pktBuff_1_memBuffer_serverAdapterA_s2_D_IN =
	     pktBuff_1_memBuffer_serverAdapterA_s1 ;
  assign pktBuff_1_memBuffer_serverAdapterA_s2_EN =
	     pktBuff_1_memBuffer_serverAdapterA_s1[1] ||
	     pktBuff_1_memBuffer_serverAdapterA_s2[1] ;

  // register pktBuff_1_memBuffer_serverAdapterB_cnt
  assign pktBuff_1_memBuffer_serverAdapterB_cnt_D_IN =
	     pktBuff_1_memBuffer_serverAdapterB_cnt_495_PLU_ETC___d1501 ;
  assign pktBuff_1_memBuffer_serverAdapterB_cnt_EN =
	     pktBuff_1_memBuffer_serverAdapterB_cnt_1_whas ||
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat ;

  // register pktBuff_1_memBuffer_serverAdapterB_s1
  assign pktBuff_1_memBuffer_serverAdapterB_s1_D_IN =
	     { pktBuff_1_memBuffer_serverAdapterB_writeWithResp_whas &&
	       pktBuff_1_memBuffer_serverAdapterB_s1_1_wget[1],
	       pktBuff_1_memBuffer_serverAdapterB_s1_1_wget[0] } ;
  assign pktBuff_1_memBuffer_serverAdapterB_s1_EN = 1'd1 ;

  // register pktBuff_1_memBuffer_serverAdapterB_s2
  assign pktBuff_1_memBuffer_serverAdapterB_s2_D_IN =
	     pktBuff_1_memBuffer_serverAdapterB_s1 ;
  assign pktBuff_1_memBuffer_serverAdapterB_s2_EN =
	     pktBuff_1_memBuffer_serverAdapterB_s1[1] ||
	     pktBuff_1_memBuffer_serverAdapterB_s2[1] ;

  // register pktBuff_1_outPacket
  assign pktBuff_1_outPacket_D_IN = !MUX_pktBuff_1_outPacket_write_1__SEL_1 ;
  assign pktBuff_1_outPacket_EN =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;

  // register pktBuff_1_packetLen
  assign pktBuff_1_packetLen_D_IN =
	     pktBuff_1_fifoWriteData_D_OUT[0] ? 16'd0 : newPacketLen__h56460 ;
  assign pktBuff_1_packetLen_EN = WILL_FIRE_RL_pktBuff_1_enq_stage1 ;

  // register pktBuff_1_rdCurrPtr
  assign pktBuff_1_rdCurrPtr_D_IN =
	     MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1 ?
	       MUX_pktBuff_1_rdCurrPtr_write_1__VAL_1 :
	       MUX_pktBuff_1_rdCurrPtr_write_1__VAL_1 ;
  assign pktBuff_1_rdCurrPtr_EN =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     !pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;

  // register pktBuff_1_readStarted
  assign pktBuff_1_readStarted_D_IN =
	     !MUX_pktBuff_1_readStarted_write_1__SEL_1 ;
  assign pktBuff_1_readStarted_EN =
	     WILL_FIRE_RL_pktBuff_1_packetReadInProgress &&
	     pktBuff_1_readDataFifo_D_OUT[0] ||
	     pktBuff_1_meta_ff_EMPTY_N && pktBuff_1_readLenFifo_EMPTY_N &&
	     pktBuff_1_readReqFifo_FULL_N &&
	     !pktBuff_1_readStarted ;

  // register pktBuff_1_sopDeq
  assign pktBuff_1_sopDeq_D_IN = pktBuff_1_sopDeq + 64'd1 ;
  assign pktBuff_1_sopDeq_EN = WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;

  // register pktBuff_1_sopEnq
  assign pktBuff_1_sopEnq_D_IN = pktBuff_1_sopEnq + 64'd1 ;
  assign pktBuff_1_sopEnq_EN = WILL_FIRE_RL_pktBuff_1_enqueue_first_beat ;

  // register pktBuff_1_wrCurrPtr
  assign pktBuff_1_wrCurrPtr_D_IN = pktBuff_1_wrCurrPtr + 8'd1 ;
  assign pktBuff_1_wrCurrPtr_EN = WILL_FIRE_RL_pktBuff_1_enq_stage1 ;

  // register pktBuff_2_cf_verbosity
  assign pktBuff_2_cf_verbosity_D_IN = verbose_ff_2_D_OUT ;
  assign pktBuff_2_cf_verbosity_EN = verbose_ff_2_EMPTY_N ;

  // register pktBuff_2_readStarted
  assign pktBuff_2_readStarted_D_IN =
	     !MUX_pktBuff_2_readStarted_write_1__SEL_1 ;
  assign pktBuff_2_readStarted_EN =
	     WILL_FIRE_RL_pktBuff_2_packetReadInProgress &&
	     pktBuff_2_readDataFifo_D_OUT[0] ||
	     pktBuff_2_meta_ff_EMPTY_N && pktBuff_2_readLenFifo_EMPTY_N &&
	     pktBuff_2_readReqFifo_FULL_N &&
	     !pktBuff_2_readStarted ;

  // register readStarted_0
  assign readStarted_0_D_IN = !MUX_readStarted_0_write_1__SEL_1 ;
  assign readStarted_0_EN =
	     WILL_FIRE_RL_packetReadInProgress && readDataFifo_0_D_OUT[0] ||
	     readLenFifo_0_EMPTY_N && pktLenFifo_0_FULL_N &&
	     readReqFifo_0_FULL_N &&
	     !readStarted_0 ;

  // register ringToMac_0_cycle_cnt
  assign ringToMac_0_cycle_cnt_D_IN = ringToMac_0_cycle_cnt + 64'd1 ;
  assign ringToMac_0_cycle_cnt_EN = 1'd1 ;

  // register ringToMac_0_data_bytes
  assign ringToMac_0_data_bytes_D_IN = ringToMac_0_data_bytes + y__h50313 ;
  assign ringToMac_0_data_bytes_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet ;

  // register ringToMac_0_eopCount
  assign ringToMac_0_eopCount_D_IN = ringToMac_0_eopCount + 64'd1 ;
  assign ringToMac_0_eopCount_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     NOT_IF_ringToMac_0_fifoTxData_read_block_271_T_ETC___d1366 ;

  // register ringToMac_0_fifoTxData_block0
  assign ringToMac_0_fifoTxData_block0_D_IN =
	     { 32'd0,
	       ringToMac_0_tx_fifo_dD_OUT[145:82],
	       ringToMac_0_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_0_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_0_tx_fifo_dD_OUT[81:18],
	       ringToMac_0_tx_fifo_dD_OUT[9:1],
	       ringToMac_0_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_0_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_0_fifoTxData_block0_EN =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet &&
	     !ringToMac_0_fifoTxData_write_block ;

  // register ringToMac_0_fifoTxData_block0_status
  assign ringToMac_0_fifoTxData_block0_status_D_IN =
	     !ringToMac_0_fifoTxData_block0_status ;
  assign ringToMac_0_fifoTxData_block0_status_EN =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet &&
	     !ringToMac_0_fifoTxData_write_block ;

  // register ringToMac_0_fifoTxData_block1
  assign ringToMac_0_fifoTxData_block1_D_IN =
	     { 32'd0,
	       ringToMac_0_tx_fifo_dD_OUT[145:82],
	       ringToMac_0_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_0_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_0_tx_fifo_dD_OUT[81:18],
	       ringToMac_0_tx_fifo_dD_OUT[9:1],
	       ringToMac_0_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_0_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_0_fifoTxData_block1_EN =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet &&
	     ringToMac_0_fifoTxData_write_block ;

  // register ringToMac_0_fifoTxData_block1_status
  assign ringToMac_0_fifoTxData_block1_status_D_IN =
	     !ringToMac_0_fifoTxData_block1_status ;
  assign ringToMac_0_fifoTxData_block1_status_EN =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet &&
	     ringToMac_0_fifoTxData_write_block ;

  // register ringToMac_0_fifoTxData_dInReset_pre_isInReset
  assign ringToMac_0_fifoTxData_dInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_0_fifoTxData_dInReset_pre_isInReset_EN =
	     ringToMac_0_fifoTxData_dInReset_pre_isInReset ;

  // register ringToMac_0_fifoTxData_elem0_status_0
  assign ringToMac_0_fifoTxData_elem0_status_0_D_IN =
	     ringToMac_0_fifoTxData_block0_status ;
  assign ringToMac_0_fifoTxData_elem0_status_0_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     !ringToMac_0_fifoTxData_read_block ;

  // register ringToMac_0_fifoTxData_elem0_status_1
  assign ringToMac_0_fifoTxData_elem0_status_1_D_IN =
	     ringToMac_0_fifoTxData_elem0_status_0 ;
  assign ringToMac_0_fifoTxData_elem0_status_1_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     !ringToMac_0_fifoTxData_read_block ;

  // register ringToMac_0_fifoTxData_elem1_status_0
  assign ringToMac_0_fifoTxData_elem1_status_0_D_IN =
	     ringToMac_0_fifoTxData_block1_status ;
  assign ringToMac_0_fifoTxData_elem1_status_0_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     ringToMac_0_fifoTxData_read_block ;

  // register ringToMac_0_fifoTxData_elem1_status_1
  assign ringToMac_0_fifoTxData_elem1_status_1_D_IN =
	     ringToMac_0_fifoTxData_elem1_status_0 ;
  assign ringToMac_0_fifoTxData_elem1_status_1_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     ringToMac_0_fifoTxData_read_block ;

  // register ringToMac_0_fifoTxData_read_block
  assign ringToMac_0_fifoTxData_read_block_D_IN =
	     !ringToMac_0_fifoTxData_read_block ;
  assign ringToMac_0_fifoTxData_read_block_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     (ringToMac_0_fifoTxData_read_block &&
	      ringToMac_0_fifoTxData_elem1_status_0__read__2_ETC___d1286 ||
	      !ringToMac_0_fifoTxData_read_block &&
	      ringToMac_0_fifoTxData_elem0_status_0__read__2_ETC___d1277) ;

  // register ringToMac_0_fifoTxData_sInReset_pre_isInReset
  assign ringToMac_0_fifoTxData_sInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_0_fifoTxData_sInReset_pre_isInReset_EN =
	     ringToMac_0_fifoTxData_sInReset_pre_isInReset ;

  // register ringToMac_0_fifoTxData_write_block
  assign ringToMac_0_fifoTxData_write_block_D_IN =
	     ~ringToMac_0_fifoTxData_write_block ;
  assign ringToMac_0_fifoTxData_write_block_EN =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet ;

  // register ringToMac_0_goodputCount
  assign ringToMac_0_goodputCount_D_IN =
	     (ringToMac_0_last_startofpacket == 64'd0) ?
	       ringToMac_0_last_startofpacket :
	       ringToMac_0_goodputCount + y__h43365 ;
  assign ringToMac_0_goodputCount_EN =
	     WILL_FIRE_RL_ringToMac_0_cross_clocking &&
	     ringToMac_0_readDataFifo_D_OUT[0] ;

  // register ringToMac_0_idleCount
  assign ringToMac_0_idleCount_D_IN =
	     (ringToMac_0_last_endofpacket == 64'd0) ?
	       ringToMac_0_last_endofpacket :
	       ringToMac_0_idleCount + y__h43278 ;
  assign ringToMac_0_idleCount_EN =
	     WILL_FIRE_RL_ringToMac_0_cross_clocking &&
	     ringToMac_0_readDataFifo_D_OUT[1] ;

  // register ringToMac_0_idle_cycles
  assign ringToMac_0_idle_cycles_D_IN =
	     MUX_ringToMac_0_idle_cycles_write_1__SEL_1 ?
	       MUX_ringToMac_0_idle_cycles_write_1__VAL_1 :
	       MUX_ringToMac_0_idle_cycles_write_1__VAL_1 ;
  assign ringToMac_0_idle_cycles_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     IF_ringToMac_0_fifoTxData_read_block_271_THEN__ETC___d1309 ==
	     8'd0 ||
	     (ringToMac_0_fifoTxData_read_block || x__h47698 == 2'd3) &&
	     (!ringToMac_0_fifoTxData_read_block || x__h48077 == 2'd3) ;

  // register ringToMac_0_last_endofpacket
  assign ringToMac_0_last_endofpacket_D_IN = ringToMac_0_cycle_cnt ;
  assign ringToMac_0_last_endofpacket_EN =
	     WILL_FIRE_RL_ringToMac_0_cross_clocking &&
	     ringToMac_0_readDataFifo_D_OUT[0] ;

  // register ringToMac_0_last_startofpacket
  assign ringToMac_0_last_startofpacket_D_IN = ringToMac_0_cycle_cnt ;
  assign ringToMac_0_last_startofpacket_EN =
	     WILL_FIRE_RL_ringToMac_0_cross_clocking &&
	     ringToMac_0_readDataFifo_D_OUT[1] ;

  // register ringToMac_0_sopCount
  assign ringToMac_0_sopCount_D_IN = ringToMac_0_sopCount + 64'd1 ;
  assign ringToMac_0_sopCount_EN =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     (ringToMac_0_fifoTxData_read_block ?
		((!ringToMac_0_fifoTxData_elem1_status_1__read__2_ETC___d1284 &&
		  ringToMac_0_fifoTxData_elem1_status_0__read__2_ETC___d1286) ?
		   ringToMac_0_fifoTxData_block1[107] :
		   ringToMac_0_fifoTxData_block1[1]) :
		((!ringToMac_0_fifoTxData_elem0_status_1__read__2_ETC___d1275 &&
		  ringToMac_0_fifoTxData_elem0_status_0__read__2_ETC___d1277) ?
		   ringToMac_0_fifoTxData_block0[107] :
		   ringToMac_0_fifoTxData_block0[1])) ;

  // register ringToMac_0_total_cycles
  assign ringToMac_0_total_cycles_D_IN = ringToMac_0_total_cycles + 64'd1 ;
  assign ringToMac_0_total_cycles_EN = 1'd1 ;

  // register ringToMac_1_cycle_cnt
  assign ringToMac_1_cycle_cnt_D_IN = ringToMac_1_cycle_cnt + 64'd1 ;
  assign ringToMac_1_cycle_cnt_EN = 1'd1 ;

  // register ringToMac_1_data_bytes
  assign ringToMac_1_data_bytes_D_IN = ringToMac_1_data_bytes + y__h68947 ;
  assign ringToMac_1_data_bytes_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet ;

  // register ringToMac_1_eopCount
  assign ringToMac_1_eopCount_D_IN = ringToMac_1_eopCount + 64'd1 ;
  assign ringToMac_1_eopCount_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     NOT_IF_ringToMac_1_fifoTxData_read_block_715_T_ETC___d1810 ;

  // register ringToMac_1_fifoTxData_block0
  assign ringToMac_1_fifoTxData_block0_D_IN =
	     { 32'd0,
	       ringToMac_1_tx_fifo_dD_OUT[145:82],
	       ringToMac_1_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_1_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_1_tx_fifo_dD_OUT[81:18],
	       ringToMac_1_tx_fifo_dD_OUT[9:1],
	       ringToMac_1_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_1_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_1_fifoTxData_block0_EN =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet &&
	     !ringToMac_1_fifoTxData_write_block ;

  // register ringToMac_1_fifoTxData_block0_status
  assign ringToMac_1_fifoTxData_block0_status_D_IN =
	     !ringToMac_1_fifoTxData_block0_status ;
  assign ringToMac_1_fifoTxData_block0_status_EN =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet &&
	     !ringToMac_1_fifoTxData_write_block ;

  // register ringToMac_1_fifoTxData_block1
  assign ringToMac_1_fifoTxData_block1_D_IN =
	     { 32'd0,
	       ringToMac_1_tx_fifo_dD_OUT[145:82],
	       ringToMac_1_tx_fifo_dD_OUT[17:10],
	       1'd0,
	       ringToMac_1_tx_fifo_dD_OUT[0],
	       32'd0,
	       ringToMac_1_tx_fifo_dD_OUT[81:18],
	       ringToMac_1_tx_fifo_dD_OUT[9:1],
	       ringToMac_1_tx_fifo_dD_OUT[17:10] == 8'd0 &&
	       ringToMac_1_tx_fifo_dD_OUT[0] } ;
  assign ringToMac_1_fifoTxData_block1_EN =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet &&
	     ringToMac_1_fifoTxData_write_block ;

  // register ringToMac_1_fifoTxData_block1_status
  assign ringToMac_1_fifoTxData_block1_status_D_IN =
	     !ringToMac_1_fifoTxData_block1_status ;
  assign ringToMac_1_fifoTxData_block1_status_EN =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet &&
	     ringToMac_1_fifoTxData_write_block ;

  // register ringToMac_1_fifoTxData_dInReset_pre_isInReset
  assign ringToMac_1_fifoTxData_dInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_1_fifoTxData_dInReset_pre_isInReset_EN =
	     ringToMac_1_fifoTxData_dInReset_pre_isInReset ;

  // register ringToMac_1_fifoTxData_elem0_status_0
  assign ringToMac_1_fifoTxData_elem0_status_0_D_IN =
	     ringToMac_1_fifoTxData_block0_status ;
  assign ringToMac_1_fifoTxData_elem0_status_0_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     !ringToMac_1_fifoTxData_read_block ;

  // register ringToMac_1_fifoTxData_elem0_status_1
  assign ringToMac_1_fifoTxData_elem0_status_1_D_IN =
	     ringToMac_1_fifoTxData_elem0_status_0 ;
  assign ringToMac_1_fifoTxData_elem0_status_1_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     !ringToMac_1_fifoTxData_read_block ;

  // register ringToMac_1_fifoTxData_elem1_status_0
  assign ringToMac_1_fifoTxData_elem1_status_0_D_IN =
	     ringToMac_1_fifoTxData_block1_status ;
  assign ringToMac_1_fifoTxData_elem1_status_0_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     ringToMac_1_fifoTxData_read_block ;

  // register ringToMac_1_fifoTxData_elem1_status_1
  assign ringToMac_1_fifoTxData_elem1_status_1_D_IN =
	     ringToMac_1_fifoTxData_elem1_status_0 ;
  assign ringToMac_1_fifoTxData_elem1_status_1_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     ringToMac_1_fifoTxData_read_block ;

  // register ringToMac_1_fifoTxData_read_block
  assign ringToMac_1_fifoTxData_read_block_D_IN =
	     !ringToMac_1_fifoTxData_read_block ;
  assign ringToMac_1_fifoTxData_read_block_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     (ringToMac_1_fifoTxData_read_block &&
	      ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d1730 ||
	      !ringToMac_1_fifoTxData_read_block &&
	      ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d1721) ;

  // register ringToMac_1_fifoTxData_sInReset_pre_isInReset
  assign ringToMac_1_fifoTxData_sInReset_pre_isInReset_D_IN = 1'd0 ;
  assign ringToMac_1_fifoTxData_sInReset_pre_isInReset_EN =
	     ringToMac_1_fifoTxData_sInReset_pre_isInReset ;

  // register ringToMac_1_fifoTxData_write_block
  assign ringToMac_1_fifoTxData_write_block_D_IN =
	     ~ringToMac_1_fifoTxData_write_block ;
  assign ringToMac_1_fifoTxData_write_block_EN =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet ;

  // register ringToMac_1_goodputCount
  assign ringToMac_1_goodputCount_D_IN =
	     (ringToMac_1_last_startofpacket == 64'd0) ?
	       ringToMac_1_last_startofpacket :
	       ringToMac_1_goodputCount + y__h62002 ;
  assign ringToMac_1_goodputCount_EN =
	     WILL_FIRE_RL_ringToMac_1_cross_clocking &&
	     ringToMac_1_readDataFifo_D_OUT[0] ;

  // register ringToMac_1_idleCount
  assign ringToMac_1_idleCount_D_IN =
	     (ringToMac_1_last_endofpacket == 64'd0) ?
	       ringToMac_1_last_endofpacket :
	       ringToMac_1_idleCount + y__h61915 ;
  assign ringToMac_1_idleCount_EN =
	     WILL_FIRE_RL_ringToMac_1_cross_clocking &&
	     ringToMac_1_readDataFifo_D_OUT[1] ;

  // register ringToMac_1_idle_cycles
  assign ringToMac_1_idle_cycles_D_IN =
	     MUX_ringToMac_1_idle_cycles_write_1__SEL_1 ?
	       MUX_ringToMac_1_idle_cycles_write_1__VAL_1 :
	       MUX_ringToMac_1_idle_cycles_write_1__VAL_1 ;
  assign ringToMac_1_idle_cycles_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     IF_ringToMac_1_fifoTxData_read_block_715_THEN__ETC___d1753 ==
	     8'd0 ||
	     (ringToMac_1_fifoTxData_read_block || x__h66332 == 2'd3) &&
	     (!ringToMac_1_fifoTxData_read_block || x__h66711 == 2'd3) ;

  // register ringToMac_1_last_endofpacket
  assign ringToMac_1_last_endofpacket_D_IN = ringToMac_1_cycle_cnt ;
  assign ringToMac_1_last_endofpacket_EN =
	     WILL_FIRE_RL_ringToMac_1_cross_clocking &&
	     ringToMac_1_readDataFifo_D_OUT[0] ;

  // register ringToMac_1_last_startofpacket
  assign ringToMac_1_last_startofpacket_D_IN = ringToMac_1_cycle_cnt ;
  assign ringToMac_1_last_startofpacket_EN =
	     WILL_FIRE_RL_ringToMac_1_cross_clocking &&
	     ringToMac_1_readDataFifo_D_OUT[1] ;

  // register ringToMac_1_sopCount
  assign ringToMac_1_sopCount_D_IN = ringToMac_1_sopCount + 64'd1 ;
  assign ringToMac_1_sopCount_EN =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     (ringToMac_1_fifoTxData_read_block ?
		((!ringToMac_1_fifoTxData_elem1_status_1__read__7_ETC___d1728 &&
		  ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d1730) ?
		   ringToMac_1_fifoTxData_block1[107] :
		   ringToMac_1_fifoTxData_block1[1]) :
		((!ringToMac_1_fifoTxData_elem0_status_1__read__7_ETC___d1719 &&
		  ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d1721) ?
		   ringToMac_1_fifoTxData_block0[107] :
		   ringToMac_1_fifoTxData_block0[1])) ;

  // register ringToMac_1_total_cycles
  assign ringToMac_1_total_cycles_D_IN = ringToMac_1_total_cycles + 64'd1 ;
  assign ringToMac_1_total_cycles_EN = 1'd1 ;

  // register xbar_lower_merges_1_fi0HasPrio
  always@(MUX_xbar_lower_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_merges_1_fi0HasPrio_D_IN =
	      !xbar_lower_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty:
	  xbar_lower_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty:
	  xbar_lower_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_merges_1_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     xbar_lower_merges_1_routeFrom_468_BIT_1_469_AN_ETC___d2514 ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty ;

  // register xbar_lower_merges_1_routeFrom
  assign xbar_lower_merges_1_routeFrom_D_IN =
	     { !xbar_lower_merges_1_routeFrom[1],
	       !xbar_lower_merges_1_fi0HasPrio } ;
  assign xbar_lower_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     (xbar_lower_merges_1_routeFrom[1] &&
	      IF_xbar_lower_merges_1_routeFrom_468_BIT_0_470_ETC___d2501 ||
	      !xbar_lower_merges_1_routeFrom[1] &&
	      IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2506) ;

  // register xbar_lower_merges_fi0HasPrio
  always@(MUX_xbar_lower_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_lower_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_lower_merges_fi0HasPrio_D_IN = !xbar_lower_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty:
	  xbar_lower_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty:
	  xbar_lower_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_lower_merges_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     xbar_lower_merges_routeFrom_393_BIT_1_394_AND__ETC___d2439 ||
	     WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty ;

  // register xbar_lower_merges_routeFrom
  assign xbar_lower_merges_routeFrom_D_IN =
	     { !xbar_lower_merges_routeFrom[1],
	       !xbar_lower_merges_fi0HasPrio } ;
  assign xbar_lower_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     (xbar_lower_merges_routeFrom[1] &&
	      IF_xbar_lower_merges_routeFrom_393_BIT_0_395_T_ETC___d2426 ||
	      !xbar_lower_merges_routeFrom[1] &&
	      IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2431) ;

  // register xbar_merges_1_fi0HasPrio
  always@(MUX_xbar_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_1_fi0HasPrio_D_IN = !xbar_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_1_fi1_is_empty:
	  xbar_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_1_fi0_is_empty:
	  xbar_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_1_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     xbar_merges_1_routeFrom_640_BIT_1_641_AND_IF_x_ETC___d2686 ||
	     WILL_FIRE_RL_xbar_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_1_fi0_is_empty ;

  // register xbar_merges_1_routeFrom
  assign xbar_merges_1_routeFrom_D_IN =
	     { !xbar_merges_1_routeFrom[1], !xbar_merges_1_fi0HasPrio } ;
  assign xbar_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     (xbar_merges_1_routeFrom[1] &&
	      IF_xbar_merges_1_routeFrom_640_BIT_0_642_THEN__ETC___d2673 ||
	      !xbar_merges_1_routeFrom[1] &&
	      IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2678) ;

  // register xbar_merges_2_fi0HasPrio
  always@(MUX_xbar_merges_2_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_2_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_2_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_2_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_2_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_2_fi0HasPrio_D_IN = !xbar_merges_2_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_2_fi1_is_empty:
	  xbar_merges_2_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_2_fi0_is_empty:
	  xbar_merges_2_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_2_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_2_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     xbar_merges_2_routeFrom_715_BIT_1_716_AND_IF_x_ETC___d2761 ||
	     WILL_FIRE_RL_xbar_merges_2_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_2_fi0_is_empty ;

  // register xbar_merges_2_routeFrom
  assign xbar_merges_2_routeFrom_D_IN =
	     { !xbar_merges_2_routeFrom[1], !xbar_merges_2_fi0HasPrio } ;
  assign xbar_merges_2_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     (xbar_merges_2_routeFrom[1] &&
	      IF_xbar_merges_2_routeFrom_715_BIT_0_717_THEN__ETC___d2748 ||
	      !xbar_merges_2_routeFrom[1] &&
	      IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2753) ;

  // register xbar_merges_3_fi0HasPrio
  always@(MUX_xbar_merges_3_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_3_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_3_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_3_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_3_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_3_fi0HasPrio_D_IN = !xbar_merges_3_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_3_fi1_is_empty:
	  xbar_merges_3_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_3_fi0_is_empty:
	  xbar_merges_3_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_3_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_3_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     xbar_merges_3_routeFrom_790_BIT_1_791_AND_IF_x_ETC___d2836 ||
	     WILL_FIRE_RL_xbar_merges_3_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_3_fi0_is_empty ;

  // register xbar_merges_3_routeFrom
  assign xbar_merges_3_routeFrom_D_IN =
	     { !xbar_merges_3_routeFrom[1], !xbar_merges_3_fi0HasPrio } ;
  assign xbar_merges_3_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     (xbar_merges_3_routeFrom[1] &&
	      IF_xbar_merges_3_routeFrom_790_BIT_0_792_THEN__ETC___d2823 ||
	      !xbar_merges_3_routeFrom[1] &&
	      IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2828) ;

  // register xbar_merges_fi0HasPrio
  always@(MUX_xbar_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_merges_fi0HasPrio_D_IN = !xbar_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_merges_fi1_is_empty:
	  xbar_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_merges_fi0_is_empty:
	  xbar_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_merges_fi0HasPrio_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     xbar_merges_routeFrom_565_BIT_1_566_AND_IF_xba_ETC___d2611 ||
	     WILL_FIRE_RL_xbar_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_fi0_is_empty ;

  // register xbar_merges_routeFrom
  assign xbar_merges_routeFrom_D_IN =
	     { !xbar_merges_routeFrom[1], !xbar_merges_fi0HasPrio } ;
  assign xbar_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     (xbar_merges_routeFrom[1] &&
	      IF_xbar_merges_routeFrom_565_BIT_0_567_THEN_xb_ETC___d2598 ||
	      !xbar_merges_routeFrom[1] &&
	      IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2603) ;

  // register xbar_upper_merges_1_fi0HasPrio
  always@(MUX_xbar_upper_merges_1_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_merges_1_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_1_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_merges_1_fi0HasPrio_D_IN =
	      !xbar_upper_merges_1_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty:
	  xbar_upper_merges_1_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty:
	  xbar_upper_merges_1_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_merges_1_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_1_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     xbar_upper_merges_1_routeFrom_294_BIT_1_295_AN_ETC___d2340 ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty ;

  // register xbar_upper_merges_1_routeFrom
  assign xbar_upper_merges_1_routeFrom_D_IN =
	     { !xbar_upper_merges_1_routeFrom[1],
	       !xbar_upper_merges_1_fi0HasPrio } ;
  assign xbar_upper_merges_1_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     (xbar_upper_merges_1_routeFrom[1] &&
	      IF_xbar_upper_merges_1_routeFrom_294_BIT_0_296_ETC___d2327 ||
	      !xbar_upper_merges_1_routeFrom[1] &&
	      IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2332) ;

  // register xbar_upper_merges_fi0HasPrio
  always@(MUX_xbar_upper_merges_fi0HasPrio_write_1__SEL_1 or
	  xbar_upper_merges_fi0HasPrio or
	  WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty or
	  WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_fi0HasPrio_write_1__SEL_1:
	  xbar_upper_merges_fi0HasPrio_D_IN = !xbar_upper_merges_fi0HasPrio;
      WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty:
	  xbar_upper_merges_fi0HasPrio_D_IN = 1'd0;
      WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty:
	  xbar_upper_merges_fi0HasPrio_D_IN = 1'd1;
      default: xbar_upper_merges_fi0HasPrio_D_IN =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_fi0HasPrio_EN =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     xbar_upper_merges_routeFrom_219_BIT_1_220_AND__ETC___d2265 ||
	     WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty ;

  // register xbar_upper_merges_routeFrom
  assign xbar_upper_merges_routeFrom_D_IN =
	     { !xbar_upper_merges_routeFrom[1],
	       !xbar_upper_merges_fi0HasPrio } ;
  assign xbar_upper_merges_routeFrom_EN =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     (xbar_upper_merges_routeFrom[1] &&
	      IF_xbar_upper_merges_routeFrom_219_BIT_0_221_T_ETC___d2252 ||
	      !xbar_upper_merges_routeFrom[1] &&
	      IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2257) ;

  // submodule gearbox_dn_16_0
  assign gearbox_dn_16_0_datain_put = gearbox_dn_32_0_dataout_get ;
  assign gearbox_dn_16_0_EN_datain_put =
	     gearbox_dn_16_0_RDY_datain_put &&
	     gearbox_dn_32_0_RDY_dataout_get ;
  assign gearbox_dn_16_0_EN_dataout_get =
	     MUX_pktBuff_0_fifoWriteData_enq_1__SEL_2 ;

  // submodule gearbox_dn_16_1
  assign gearbox_dn_16_1_datain_put = gearbox_dn_32_1_dataout_get ;
  assign gearbox_dn_16_1_EN_datain_put =
	     gearbox_dn_16_1_RDY_datain_put &&
	     gearbox_dn_32_1_RDY_dataout_get ;
  assign gearbox_dn_16_1_EN_dataout_get =
	     MUX_pktBuff_1_fifoWriteData_enq_1__SEL_2 ;

  // submodule gearbox_dn_32_0
  assign gearbox_dn_32_0_datain_put =
	     output_queues_1_readServer_readData_get ;
  assign gearbox_dn_32_0_EN_datain_put =
	     output_queues_1_RDY_readServer_readData_get &&
	     gearbox_dn_32_0_RDY_datain_put ;
  assign gearbox_dn_32_0_EN_dataout_get =
	     gearbox_dn_16_0_RDY_datain_put &&
	     gearbox_dn_32_0_RDY_dataout_get ;

  // submodule gearbox_dn_32_1
  assign gearbox_dn_32_1_datain_put =
	     output_queues_2_readServer_readData_get ;
  assign gearbox_dn_32_1_EN_datain_put =
	     output_queues_2_RDY_readServer_readData_get &&
	     gearbox_dn_32_1_RDY_datain_put ;
  assign gearbox_dn_32_1_EN_dataout_get =
	     gearbox_dn_16_1_RDY_datain_put &&
	     gearbox_dn_32_1_RDY_dataout_get ;

  // submodule gearbox_up_16_0
  assign gearbox_up_16_0_datain_put = modifier_0_writeClient_first ;
  assign gearbox_up_16_0_EN_datain_put =
	     gearbox_up_16_0_RDY_datain_put &&
	     modifier_0_RDY_writeClient_first &&
	     modifier_0_RDY_writeClient_deq ;
  assign gearbox_up_16_0_EN_dataout_get =
	     gearbox_up_32_0_RDY_datain_put &&
	     gearbox_up_16_0_RDY_dataout_get ;

  // submodule gearbox_up_16_1
  assign gearbox_up_16_1_datain_put = modifier_1_writeClient_first ;
  assign gearbox_up_16_1_EN_datain_put =
	     gearbox_up_16_1_RDY_datain_put &&
	     modifier_1_RDY_writeClient_first &&
	     modifier_1_RDY_writeClient_deq ;
  assign gearbox_up_16_1_EN_dataout_get =
	     gearbox_up_32_1_RDY_datain_put &&
	     gearbox_up_16_1_RDY_dataout_get ;

  // submodule gearbox_up_16_2
  assign gearbox_up_16_2_datain_put = modifier_2_writeClient_first ;
  assign gearbox_up_16_2_EN_datain_put =
	     gearbox_up_16_2_RDY_datain_put &&
	     modifier_2_RDY_writeClient_first &&
	     modifier_2_RDY_writeClient_deq ;
  assign gearbox_up_16_2_EN_dataout_get =
	     gearbox_up_32_2_RDY_datain_put &&
	     gearbox_up_16_2_RDY_dataout_get ;

  // submodule gearbox_up_32_0
  assign gearbox_up_32_0_datain_put = gearbox_up_16_0_dataout_get ;
  assign gearbox_up_32_0_EN_datain_put =
	     gearbox_up_32_0_RDY_datain_put &&
	     gearbox_up_16_0_RDY_dataout_get ;
  assign gearbox_up_32_0_EN_dataout_get =
	     input_queues_0_RDY_writeServer_enq &&
	     gearbox_up_32_0_RDY_dataout_get ;

  // submodule gearbox_up_32_1
  assign gearbox_up_32_1_datain_put = gearbox_up_16_1_dataout_get ;
  assign gearbox_up_32_1_EN_datain_put =
	     gearbox_up_32_1_RDY_datain_put &&
	     gearbox_up_16_1_RDY_dataout_get ;
  assign gearbox_up_32_1_EN_dataout_get =
	     input_queues_1_RDY_writeServer_enq &&
	     gearbox_up_32_1_RDY_dataout_get ;

  // submodule gearbox_up_32_2
  assign gearbox_up_32_2_datain_put = gearbox_up_16_2_dataout_get ;
  assign gearbox_up_32_2_EN_datain_put =
	     gearbox_up_32_2_RDY_datain_put &&
	     gearbox_up_16_2_RDY_dataout_get ;
  assign gearbox_up_32_2_EN_dataout_get =
	     input_queues_2_RDY_writeServer_enq &&
	     gearbox_up_32_2_RDY_dataout_get ;

  // submodule hostchan_0_outReqFifo
  assign hostchan_0_outReqFifo_D_IN =
	     { 5'd0,
	       hostchan_0_pktLenFifo_D_OUT,
	       hostchan_0_parser_meta_get[760:372],
	       10'd513,
	       hostchan_0_parser_meta_get[361:0] } ;
  assign hostchan_0_outReqFifo_ENQ =
	     hostchan_0_parser_RDY_meta_get &&
	     hostchan_0_pktLenFifo_EMPTY_N &&
	     hostchan_0_outReqFifo_FULL_N ;
  assign hostchan_0_outReqFifo_DEQ = EN_rxchan_0_next_deq ;
  assign hostchan_0_outReqFifo_CLR = 1'b0 ;

  // submodule hostchan_0_parser
  assign hostchan_0_parser_frameIn_put = hostchan_0_readDataFifo_D_OUT ;
  assign hostchan_0_parser_set_verbosity_verbosity =
	     hostchan_0_verbose_ff_D_OUT ;
  assign hostchan_0_parser_EN_frameIn_put =
	     WILL_FIRE_RL_hostchan_0_packetReadInProgress ;
  assign hostchan_0_parser_EN_meta_get =
	     hostchan_0_parser_RDY_meta_get &&
	     hostchan_0_pktLenFifo_EMPTY_N &&
	     hostchan_0_outReqFifo_FULL_N ;
  assign hostchan_0_parser_EN_set_verbosity = hostchan_0_verbose_ff_EMPTY_N ;

  // submodule hostchan_0_pktBuff
  assign hostchan_0_pktBuff_readServer_readReq_put =
	     hostchan_0_readReqFifo_D_OUT ;
  assign hostchan_0_pktBuff_set_verbosity_verbosity =
	     hostchan_0_verbose_ff_D_OUT ;
  assign hostchan_0_pktBuff_writeServer_enq_v =
	     macToRing_0_writeDataFifo_dD_OUT ;
  assign hostchan_0_pktBuff_EN_writeServer_enq =
	     macToRing_0_writeDataFifo_dEMPTY_N &&
	     hostchan_0_pktBuff_RDY_writeServer_enq ;
  assign hostchan_0_pktBuff_EN_readServer_readData_get =
	     hostchan_0_pktBuff_RDY_readServer_readData_get &&
	     hostchan_0_readDataFifo_FULL_N ;
  assign hostchan_0_pktBuff_EN_readServer_readLen_get =
	     hostchan_0_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_0_readLenFifo_FULL_N ;
  assign hostchan_0_pktBuff_EN_readServer_readReq_put =
	     hostchan_0_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_0_readReqFifo_EMPTY_N ;
  assign hostchan_0_pktBuff_EN_set_verbosity = hostchan_0_verbose_ff_EMPTY_N ;

  // submodule hostchan_0_pktLenFifo
  assign hostchan_0_pktLenFifo_D_IN = hostchan_0_readLenFifo_D_OUT ;
  assign hostchan_0_pktLenFifo_ENQ =
	     MUX_hostchan_0_readStarted_write_1__SEL_2 ;
  assign hostchan_0_pktLenFifo_DEQ =
	     hostchan_0_parser_RDY_meta_get &&
	     hostchan_0_pktLenFifo_EMPTY_N &&
	     hostchan_0_outReqFifo_FULL_N ;
  assign hostchan_0_pktLenFifo_CLR = 1'b0 ;

  // submodule hostchan_0_readDataFifo
  assign hostchan_0_readDataFifo_D_IN =
	     hostchan_0_pktBuff_readServer_readData_get ;
  assign hostchan_0_readDataFifo_ENQ =
	     hostchan_0_pktBuff_RDY_readServer_readData_get &&
	     hostchan_0_readDataFifo_FULL_N ;
  assign hostchan_0_readDataFifo_DEQ =
	     WILL_FIRE_RL_hostchan_0_packetReadInProgress ;
  assign hostchan_0_readDataFifo_CLR = 1'b0 ;

  // submodule hostchan_0_readLenFifo
  assign hostchan_0_readLenFifo_D_IN =
	     hostchan_0_pktBuff_readServer_readLen_get ;
  assign hostchan_0_readLenFifo_ENQ =
	     hostchan_0_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_0_readLenFifo_FULL_N ;
  assign hostchan_0_readLenFifo_DEQ =
	     MUX_hostchan_0_readStarted_write_1__SEL_2 ;
  assign hostchan_0_readLenFifo_CLR = 1'b0 ;

  // submodule hostchan_0_readReqFifo
  assign hostchan_0_readReqFifo_D_IN = hostchan_0_readLenFifo_D_OUT ;
  assign hostchan_0_readReqFifo_ENQ =
	     MUX_hostchan_0_readStarted_write_1__SEL_2 ;
  assign hostchan_0_readReqFifo_DEQ =
	     hostchan_0_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_0_readReqFifo_EMPTY_N ;
  assign hostchan_0_readReqFifo_CLR = 1'b0 ;

  // submodule hostchan_0_verbose_ff
  assign hostchan_0_verbose_ff_D_IN = 32'h0 ;
  assign hostchan_0_verbose_ff_ENQ = 1'b0 ;
  assign hostchan_0_verbose_ff_DEQ = hostchan_0_verbose_ff_EMPTY_N ;
  assign hostchan_0_verbose_ff_CLR = 1'b0 ;

  // submodule hostchan_0_writeDataFifo
  assign hostchan_0_writeDataFifo_D_IN = hostchan_0_readDataFifo_D_OUT ;
  assign hostchan_0_writeDataFifo_ENQ =
	     WILL_FIRE_RL_hostchan_0_packetReadInProgress ;
  assign hostchan_0_writeDataFifo_DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_10 &&
	     !EN_rxchan_0_writeClient_deq ||
	     EN_rxchan_0_writeClient_deq ;
  assign hostchan_0_writeDataFifo_CLR = 1'b0 ;

  // submodule hostchan_1_outReqFifo
  assign hostchan_1_outReqFifo_D_IN =
	     { 5'd0,
	       hostchan_1_pktLenFifo_D_OUT,
	       hostchan_1_parser_meta_get[760:372],
	       10'd514,
	       hostchan_1_parser_meta_get[361:0] } ;
  assign hostchan_1_outReqFifo_ENQ =
	     hostchan_1_parser_RDY_meta_get &&
	     hostchan_1_pktLenFifo_EMPTY_N &&
	     hostchan_1_outReqFifo_FULL_N ;
  assign hostchan_1_outReqFifo_DEQ = EN_rxchan_1_next_deq ;
  assign hostchan_1_outReqFifo_CLR = 1'b0 ;

  // submodule hostchan_1_parser
  assign hostchan_1_parser_frameIn_put = hostchan_1_readDataFifo_D_OUT ;
  assign hostchan_1_parser_set_verbosity_verbosity =
	     hostchan_1_verbose_ff_D_OUT ;
  assign hostchan_1_parser_EN_frameIn_put =
	     WILL_FIRE_RL_hostchan_1_packetReadInProgress ;
  assign hostchan_1_parser_EN_meta_get =
	     hostchan_1_parser_RDY_meta_get &&
	     hostchan_1_pktLenFifo_EMPTY_N &&
	     hostchan_1_outReqFifo_FULL_N ;
  assign hostchan_1_parser_EN_set_verbosity = hostchan_1_verbose_ff_EMPTY_N ;

  // submodule hostchan_1_pktBuff
  assign hostchan_1_pktBuff_readServer_readReq_put =
	     hostchan_1_readReqFifo_D_OUT ;
  assign hostchan_1_pktBuff_set_verbosity_verbosity =
	     hostchan_1_verbose_ff_D_OUT ;
  assign hostchan_1_pktBuff_writeServer_enq_v =
	     macToRing_1_writeDataFifo_dD_OUT ;
  assign hostchan_1_pktBuff_EN_writeServer_enq =
	     macToRing_1_writeDataFifo_dEMPTY_N &&
	     hostchan_1_pktBuff_RDY_writeServer_enq ;
  assign hostchan_1_pktBuff_EN_readServer_readData_get =
	     hostchan_1_pktBuff_RDY_readServer_readData_get &&
	     hostchan_1_readDataFifo_FULL_N ;
  assign hostchan_1_pktBuff_EN_readServer_readLen_get =
	     hostchan_1_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_1_readLenFifo_FULL_N ;
  assign hostchan_1_pktBuff_EN_readServer_readReq_put =
	     hostchan_1_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_1_readReqFifo_EMPTY_N ;
  assign hostchan_1_pktBuff_EN_set_verbosity = hostchan_1_verbose_ff_EMPTY_N ;

  // submodule hostchan_1_pktLenFifo
  assign hostchan_1_pktLenFifo_D_IN = hostchan_1_readLenFifo_D_OUT ;
  assign hostchan_1_pktLenFifo_ENQ =
	     MUX_hostchan_1_readStarted_write_1__SEL_2 ;
  assign hostchan_1_pktLenFifo_DEQ =
	     hostchan_1_parser_RDY_meta_get &&
	     hostchan_1_pktLenFifo_EMPTY_N &&
	     hostchan_1_outReqFifo_FULL_N ;
  assign hostchan_1_pktLenFifo_CLR = 1'b0 ;

  // submodule hostchan_1_readDataFifo
  assign hostchan_1_readDataFifo_D_IN =
	     hostchan_1_pktBuff_readServer_readData_get ;
  assign hostchan_1_readDataFifo_ENQ =
	     hostchan_1_pktBuff_RDY_readServer_readData_get &&
	     hostchan_1_readDataFifo_FULL_N ;
  assign hostchan_1_readDataFifo_DEQ =
	     WILL_FIRE_RL_hostchan_1_packetReadInProgress ;
  assign hostchan_1_readDataFifo_CLR = 1'b0 ;

  // submodule hostchan_1_readLenFifo
  assign hostchan_1_readLenFifo_D_IN =
	     hostchan_1_pktBuff_readServer_readLen_get ;
  assign hostchan_1_readLenFifo_ENQ =
	     hostchan_1_pktBuff_RDY_readServer_readLen_get &&
	     hostchan_1_readLenFifo_FULL_N ;
  assign hostchan_1_readLenFifo_DEQ =
	     MUX_hostchan_1_readStarted_write_1__SEL_2 ;
  assign hostchan_1_readLenFifo_CLR = 1'b0 ;

  // submodule hostchan_1_readReqFifo
  assign hostchan_1_readReqFifo_D_IN = hostchan_1_readLenFifo_D_OUT ;
  assign hostchan_1_readReqFifo_ENQ =
	     MUX_hostchan_1_readStarted_write_1__SEL_2 ;
  assign hostchan_1_readReqFifo_DEQ =
	     hostchan_1_pktBuff_RDY_readServer_readReq_put &&
	     hostchan_1_readReqFifo_EMPTY_N ;
  assign hostchan_1_readReqFifo_CLR = 1'b0 ;

  // submodule hostchan_1_verbose_ff
  assign hostchan_1_verbose_ff_D_IN = 32'h0 ;
  assign hostchan_1_verbose_ff_ENQ = 1'b0 ;
  assign hostchan_1_verbose_ff_DEQ = hostchan_1_verbose_ff_EMPTY_N ;
  assign hostchan_1_verbose_ff_CLR = 1'b0 ;

  // submodule hostchan_1_writeDataFifo
  assign hostchan_1_writeDataFifo_D_IN = hostchan_1_readDataFifo_D_OUT ;
  assign hostchan_1_writeDataFifo_ENQ =
	     WILL_FIRE_RL_hostchan_1_packetReadInProgress ;
  assign hostchan_1_writeDataFifo_DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_11 &&
	     !EN_rxchan_1_writeClient_deq ||
	     EN_rxchan_1_writeClient_deq ;
  assign hostchan_1_writeDataFifo_CLR = 1'b0 ;

  // submodule input_queues_0
  assign input_queues_0_readServer_readReq_put =
	     input_queues_0_readServer_readLen_get ;
  assign input_queues_0_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign input_queues_0_writeServer_enq_v = gearbox_up_32_0_dataout_get ;
  assign input_queues_0_EN_writeServer_enq =
	     input_queues_0_RDY_writeServer_enq &&
	     gearbox_up_32_0_RDY_dataout_get ;
  assign input_queues_0_EN_readServer_readData_get =
	     input_queues_0_RDY_readServer_readData_get &&
	     xbar_upper_upper_f_FULL_N ;
  assign input_queues_0_EN_readServer_readLen_get =
	     input_queues_0_RDY_readServer_readLen_get &&
	     input_queues_0_RDY_readServer_readReq_put ;
  assign input_queues_0_EN_readServer_readReq_put =
	     input_queues_0_RDY_readServer_readLen_get &&
	     input_queues_0_RDY_readServer_readReq_put ;
  assign input_queues_0_EN_set_verbosity = EN_set_verbosity ;

  // submodule input_queues_1
  assign input_queues_1_readServer_readReq_put =
	     input_queues_1_readServer_readLen_get ;
  assign input_queues_1_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign input_queues_1_writeServer_enq_v = gearbox_up_32_1_dataout_get ;
  assign input_queues_1_EN_writeServer_enq =
	     input_queues_1_RDY_writeServer_enq &&
	     gearbox_up_32_1_RDY_dataout_get ;
  assign input_queues_1_EN_readServer_readData_get =
	     input_queues_1_RDY_readServer_readData_get &&
	     xbar_upper_lower_f_FULL_N ;
  assign input_queues_1_EN_readServer_readLen_get =
	     input_queues_1_RDY_readServer_readLen_get &&
	     input_queues_1_RDY_readServer_readReq_put ;
  assign input_queues_1_EN_readServer_readReq_put =
	     input_queues_1_RDY_readServer_readLen_get &&
	     input_queues_1_RDY_readServer_readReq_put ;
  assign input_queues_1_EN_set_verbosity = EN_set_verbosity ;

  // submodule input_queues_2
  assign input_queues_2_readServer_readReq_put =
	     input_queues_2_readServer_readLen_get ;
  assign input_queues_2_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign input_queues_2_writeServer_enq_v = gearbox_up_32_2_dataout_get ;
  assign input_queues_2_EN_writeServer_enq =
	     input_queues_2_RDY_writeServer_enq &&
	     gearbox_up_32_2_RDY_dataout_get ;
  assign input_queues_2_EN_readServer_readData_get =
	     input_queues_2_RDY_readServer_readData_get &&
	     xbar_lower_upper_f_FULL_N ;
  assign input_queues_2_EN_readServer_readLen_get =
	     input_queues_2_RDY_readServer_readLen_get &&
	     input_queues_2_RDY_readServer_readReq_put ;
  assign input_queues_2_EN_readServer_readReq_put =
	     input_queues_2_RDY_readServer_readLen_get &&
	     input_queues_2_RDY_readServer_readReq_put ;
  assign input_queues_2_EN_set_verbosity = EN_set_verbosity ;

  // submodule macToRing_0_gearbox_in_ff
  assign macToRing_0_gearbox_in_ff_D_IN = rxchan_0_macRx_put ;
  assign macToRing_0_gearbox_in_ff_ENQ = EN_rxchan_0_macRx_put ;
  assign macToRing_0_gearbox_in_ff_DEQ =
	     WILL_FIRE_RL_macToRing_0_gearbox_startOfPacket &&
	     !macToRing_0_gearbox_in_ff_D_OUT[1] ||
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd ;
  assign macToRing_0_gearbox_in_ff_CLR = 1'b0 ;

  // submodule macToRing_0_gearbox_out_ff
  assign macToRing_0_gearbox_out_ff_D_IN =
	     MUX_macToRing_0_gearbox_out_ff_enq_1__SEL_1 ?
	       MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_1 :
	       MUX_macToRing_0_gearbox_out_ff_enq_1__VAL_2 ;
  assign macToRing_0_gearbox_out_ff_ENQ =
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketOdd &&
	     macToRing_0_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_0_gearbox_readPacketEven ;
  assign macToRing_0_gearbox_out_ff_DEQ = WILL_FIRE_RL_macToRing_0_writeData ;
  assign macToRing_0_gearbox_out_ff_CLR = 1'b0 ;

  // submodule macToRing_0_writeDataFifo
  assign macToRing_0_writeDataFifo_sD_IN = macToRing_0_gearbox_out_ff_D_OUT ;
  assign macToRing_0_writeDataFifo_sENQ = WILL_FIRE_RL_macToRing_0_writeData ;
  assign macToRing_0_writeDataFifo_dDEQ =
	     macToRing_0_writeDataFifo_dEMPTY_N &&
	     hostchan_0_pktBuff_RDY_writeServer_enq ;

  // submodule macToRing_1_gearbox_in_ff
  assign macToRing_1_gearbox_in_ff_D_IN = rxchan_1_macRx_put ;
  assign macToRing_1_gearbox_in_ff_ENQ = EN_rxchan_1_macRx_put ;
  assign macToRing_1_gearbox_in_ff_DEQ =
	     WILL_FIRE_RL_macToRing_1_gearbox_startOfPacket &&
	     !macToRing_1_gearbox_in_ff_D_OUT[1] ||
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven ||
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd ;
  assign macToRing_1_gearbox_in_ff_CLR = 1'b0 ;

  // submodule macToRing_1_gearbox_out_ff
  assign macToRing_1_gearbox_out_ff_D_IN =
	     MUX_macToRing_1_gearbox_out_ff_enq_1__SEL_1 ?
	       MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_1 :
	       MUX_macToRing_1_gearbox_out_ff_enq_1__VAL_2 ;
  assign macToRing_1_gearbox_out_ff_ENQ =
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketOdd &&
	     macToRing_1_gearbox_in_ff_D_OUT[0] ||
	     WILL_FIRE_RL_macToRing_1_gearbox_readPacketEven ;
  assign macToRing_1_gearbox_out_ff_DEQ = WILL_FIRE_RL_macToRing_1_writeData ;
  assign macToRing_1_gearbox_out_ff_CLR = 1'b0 ;

  // submodule macToRing_1_writeDataFifo
  assign macToRing_1_writeDataFifo_sD_IN = macToRing_1_gearbox_out_ff_D_OUT ;
  assign macToRing_1_writeDataFifo_sENQ = WILL_FIRE_RL_macToRing_1_writeData ;
  assign macToRing_1_writeDataFifo_dDEQ =
	     macToRing_1_writeDataFifo_dEMPTY_N &&
	     hostchan_1_pktBuff_RDY_writeServer_enq ;

  // submodule meta_ff_0
  assign meta_ff_0_D_IN = prev_0_enq_v ;
  assign meta_ff_0_ENQ = EN_prev_0_enq ;
  assign meta_ff_0_DEQ = meta_ff_0_EMPTY_N && meta_ff_0_1_FULL_N ;
  assign meta_ff_0_CLR = 1'b0 ;

  // submodule meta_ff_0_1
  assign meta_ff_0_1_D_IN = meta_ff_0_D_OUT ;
  assign meta_ff_0_1_ENQ = meta_ff_0_EMPTY_N && meta_ff_0_1_FULL_N ;
  assign meta_ff_0_1_DEQ =
	     modifier_0_RDY_prev_enq && meta_ff_0_1_EMPTY_N &&
	     pktBuff_0_meta_ff_FULL_N ;
  assign meta_ff_0_1_CLR = 1'b0 ;

  // submodule meta_ff_1
  assign meta_ff_1_D_IN = prev_1_enq_v ;
  assign meta_ff_1_ENQ = EN_prev_1_enq ;
  assign meta_ff_1_DEQ = meta_ff_1_EMPTY_N && meta_ff_1_1_FULL_N ;
  assign meta_ff_1_CLR = 1'b0 ;

  // submodule meta_ff_1_1
  assign meta_ff_1_1_D_IN = meta_ff_1_D_OUT ;
  assign meta_ff_1_1_ENQ = meta_ff_1_EMPTY_N && meta_ff_1_1_FULL_N ;
  assign meta_ff_1_1_DEQ =
	     modifier_1_RDY_prev_enq && meta_ff_1_1_EMPTY_N &&
	     pktBuff_1_meta_ff_FULL_N ;
  assign meta_ff_1_1_CLR = 1'b0 ;

  // submodule meta_ff_2
  assign meta_ff_2_D_IN = prev_2_enq_v ;
  assign meta_ff_2_ENQ = EN_prev_2_enq ;
  assign meta_ff_2_DEQ = meta_ff_2_EMPTY_N && meta_ff_2_1_FULL_N ;
  assign meta_ff_2_CLR = 1'b0 ;

  // submodule meta_ff_2_1
  assign meta_ff_2_1_D_IN = meta_ff_2_D_OUT ;
  assign meta_ff_2_1_ENQ = meta_ff_2_EMPTY_N && meta_ff_2_1_FULL_N ;
  assign meta_ff_2_1_DEQ =
	     modifier_2_RDY_prev_enq && meta_ff_2_1_EMPTY_N &&
	     pktBuff_2_meta_ff_FULL_N ;
  assign meta_ff_2_1_CLR = 1'b0 ;

  // submodule modifier_0
  assign modifier_0_prev_enq_v = meta_ff_0_1_D_OUT ;
  assign modifier_0_set_verbosity_verbosity = verbose_ff_0_2_D_OUT ;
  assign modifier_0_writeServer_enq_v = pktBuff_0_writeDataFifo_D_OUT ;
  assign modifier_0_EN_prev_enq =
	     modifier_0_RDY_prev_enq && meta_ff_0_1_EMPTY_N &&
	     pktBuff_0_meta_ff_FULL_N ;
  assign modifier_0_EN_writeServer_enq =
	     modifier_0_RDY_writeServer_enq &&
	     pktBuff_0_writeDataFifo_EMPTY_N ;
  assign modifier_0_EN_writeClient_deq =
	     gearbox_up_16_0_RDY_datain_put &&
	     modifier_0_RDY_writeClient_first &&
	     modifier_0_RDY_writeClient_deq ;
  assign modifier_0_EN_set_verbosity = verbose_ff_0_2_EMPTY_N ;

  // submodule modifier_1
  assign modifier_1_prev_enq_v = meta_ff_1_1_D_OUT ;
  assign modifier_1_set_verbosity_verbosity = verbose_ff_1_1_D_OUT ;
  assign modifier_1_writeServer_enq_v = pktBuff_1_writeDataFifo_D_OUT ;
  assign modifier_1_EN_prev_enq =
	     modifier_1_RDY_prev_enq && meta_ff_1_1_EMPTY_N &&
	     pktBuff_1_meta_ff_FULL_N ;
  assign modifier_1_EN_writeServer_enq =
	     modifier_1_RDY_writeServer_enq &&
	     pktBuff_1_writeDataFifo_EMPTY_N ;
  assign modifier_1_EN_writeClient_deq =
	     gearbox_up_16_1_RDY_datain_put &&
	     modifier_1_RDY_writeClient_first &&
	     modifier_1_RDY_writeClient_deq ;
  assign modifier_1_EN_set_verbosity = verbose_ff_1_1_EMPTY_N ;

  // submodule modifier_2
  assign modifier_2_prev_enq_v = meta_ff_2_1_D_OUT ;
  assign modifier_2_set_verbosity_verbosity = verbose_ff_2_D_OUT ;
  assign modifier_2_writeServer_enq_v = pktBuff_2_writeDataFifo_D_OUT ;
  assign modifier_2_EN_prev_enq =
	     modifier_2_RDY_prev_enq && meta_ff_2_1_EMPTY_N &&
	     pktBuff_2_meta_ff_FULL_N ;
  assign modifier_2_EN_writeServer_enq =
	     modifier_2_RDY_writeServer_enq &&
	     pktBuff_2_writeDataFifo_EMPTY_N ;
  assign modifier_2_EN_writeClient_deq =
	     gearbox_up_16_2_RDY_datain_put &&
	     modifier_2_RDY_writeClient_first &&
	     modifier_2_RDY_writeClient_deq ;
  assign modifier_2_EN_set_verbosity = verbose_ff_2_EMPTY_N ;

  // submodule outReqFifo_0
  assign outReqFifo_0_D_IN =
	     { 5'd0,
	       pktLenFifo_0_D_OUT,
	       parser_0_meta_get[760:372],
	       10'd512,
	       parser_0_meta_get[361:0] } ;
  assign outReqFifo_0_ENQ =
	     parser_0_RDY_meta_get && pktLenFifo_0_EMPTY_N &&
	     outReqFifo_0_FULL_N ;
  assign outReqFifo_0_DEQ = EN_hostchan_0_next_deq ;
  assign outReqFifo_0_CLR = 1'b0 ;

  // submodule output_queues_0
  assign output_queues_0_readServer_readReq_put =
	     output_queues_0_readServer_readLen_get ;
  assign output_queues_0_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_0_writeServer_enq_v = xbar_merges_fo_D_OUT ;
  assign output_queues_0_EN_writeServer_enq =
	     output_queues_0_RDY_writeServer_enq && xbar_merges_fo_EMPTY_N ;
  assign output_queues_0_EN_readServer_readData_get =
	     output_queues_0_RDY_readServer_readData_get ;
  assign output_queues_0_EN_readServer_readLen_get =
	     output_queues_0_RDY_readServer_readLen_get &&
	     output_queues_0_RDY_readServer_readReq_put ;
  assign output_queues_0_EN_readServer_readReq_put =
	     output_queues_0_RDY_readServer_readLen_get &&
	     output_queues_0_RDY_readServer_readReq_put ;
  assign output_queues_0_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_1
  assign output_queues_1_readServer_readReq_put =
	     output_queues_1_readServer_readLen_get ;
  assign output_queues_1_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_1_writeServer_enq_v = xbar_merges_1_fo_D_OUT ;
  assign output_queues_1_EN_writeServer_enq =
	     output_queues_1_RDY_writeServer_enq && xbar_merges_1_fo_EMPTY_N ;
  assign output_queues_1_EN_readServer_readData_get =
	     output_queues_1_RDY_readServer_readData_get &&
	     gearbox_dn_32_0_RDY_datain_put ;
  assign output_queues_1_EN_readServer_readLen_get =
	     output_queues_1_RDY_readServer_readLen_get &&
	     output_queues_1_RDY_readServer_readReq_put ;
  assign output_queues_1_EN_readServer_readReq_put =
	     output_queues_1_RDY_readServer_readLen_get &&
	     output_queues_1_RDY_readServer_readReq_put ;
  assign output_queues_1_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_2
  assign output_queues_2_readServer_readReq_put =
	     output_queues_2_readServer_readLen_get ;
  assign output_queues_2_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_2_writeServer_enq_v = xbar_merges_2_fo_D_OUT ;
  assign output_queues_2_EN_writeServer_enq =
	     output_queues_2_RDY_writeServer_enq && xbar_merges_2_fo_EMPTY_N ;
  assign output_queues_2_EN_readServer_readData_get =
	     output_queues_2_RDY_readServer_readData_get &&
	     gearbox_dn_32_1_RDY_datain_put ;
  assign output_queues_2_EN_readServer_readLen_get =
	     output_queues_2_RDY_readServer_readLen_get &&
	     output_queues_2_RDY_readServer_readReq_put ;
  assign output_queues_2_EN_readServer_readReq_put =
	     output_queues_2_RDY_readServer_readLen_get &&
	     output_queues_2_RDY_readServer_readReq_put ;
  assign output_queues_2_EN_set_verbosity = EN_set_verbosity ;

  // submodule output_queues_3
  assign output_queues_3_readServer_readReq_put =
	     output_queues_3_readServer_readLen_get ;
  assign output_queues_3_set_verbosity_verbosity = set_verbosity_verbosity ;
  assign output_queues_3_writeServer_enq_v = xbar_merges_3_fo_D_OUT ;
  assign output_queues_3_EN_writeServer_enq =
	     output_queues_3_RDY_writeServer_enq && xbar_merges_3_fo_EMPTY_N ;
  assign output_queues_3_EN_readServer_readData_get =
	     output_queues_3_RDY_readServer_readData_get ;
  assign output_queues_3_EN_readServer_readLen_get =
	     output_queues_3_RDY_readServer_readLen_get &&
	     output_queues_3_RDY_readServer_readReq_put ;
  assign output_queues_3_EN_readServer_readReq_put =
	     output_queues_3_RDY_readServer_readLen_get &&
	     output_queues_3_RDY_readServer_readReq_put ;
  assign output_queues_3_EN_set_verbosity = EN_set_verbosity ;

  // submodule parser_0
  assign parser_0_frameIn_put = readDataFifo_0_D_OUT ;
  assign parser_0_set_verbosity_verbosity = verbose_ff_0_D_OUT ;
  assign parser_0_EN_frameIn_put = WILL_FIRE_RL_packetReadInProgress ;
  assign parser_0_EN_meta_get =
	     parser_0_RDY_meta_get && pktLenFifo_0_EMPTY_N &&
	     outReqFifo_0_FULL_N ;
  assign parser_0_EN_set_verbosity = verbose_ff_0_EMPTY_N ;

  // submodule pktBuff_0
  assign pktBuff_0_readServer_readReq_put = readReqFifo_0_D_OUT ;
  assign pktBuff_0_set_verbosity_verbosity = verbose_ff_0_D_OUT ;
  assign pktBuff_0_writeServer_enq_v = hostchan_0_writeServer_enq_v ;
  assign pktBuff_0_EN_writeServer_enq = EN_hostchan_0_writeServer_enq ;
  assign pktBuff_0_EN_readServer_readData_get =
	     pktBuff_0_RDY_readServer_readData_get && readDataFifo_0_FULL_N ;
  assign pktBuff_0_EN_readServer_readLen_get =
	     pktBuff_0_RDY_readServer_readLen_get && readLenFifo_0_FULL_N ;
  assign pktBuff_0_EN_readServer_readReq_put =
	     pktBuff_0_RDY_readServer_readReq_put && readReqFifo_0_EMPTY_N ;
  assign pktBuff_0_EN_set_verbosity = verbose_ff_0_EMPTY_N ;

  // submodule pktBuff_0_fifoEop
  assign pktBuff_0_fifoEop_D_IN = pktBuff_0_packetLen + { 11'd0, x__h37912 } ;
  assign pktBuff_0_fifoEop_ENQ =
	     WILL_FIRE_RL_pktBuff_0_enq_stage1 &&
	     pktBuff_0_fifoWriteData_D_OUT[0] ;
  assign pktBuff_0_fifoEop_DEQ = WILL_FIRE_RL_pktBuff_0_commit_packet ;
  assign pktBuff_0_fifoEop_CLR = 1'b0 ;

  // submodule pktBuff_0_fifoLen
  assign pktBuff_0_fifoLen_D_IN = pktBuff_0_fifoEop_D_OUT ;
  assign pktBuff_0_fifoLen_ENQ = WILL_FIRE_RL_pktBuff_0_commit_packet ;
  assign pktBuff_0_fifoLen_DEQ =
	     pktBuff_0_fifoLen_EMPTY_N && ringToMac_0_readLenFifo_FULL_N ;
  assign pktBuff_0_fifoLen_CLR = 1'b0 ;

  // submodule pktBuff_0_fifoReadData
  assign pktBuff_0_fifoReadData_D_IN =
	     pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget ;
  assign pktBuff_0_fifoReadData_ENQ =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat ;
  assign pktBuff_0_fifoReadData_DEQ =
	     pktBuff_0_fifoReadData_EMPTY_N &&
	     ringToMac_0_readDataFifo_FULL_N ;
  assign pktBuff_0_fifoReadData_CLR = 1'b0 ;

  // submodule pktBuff_0_fifoReadReq
  assign pktBuff_0_fifoReadReq_D_IN = ringToMac_0_readReqFifo_D_OUT ;
  assign pktBuff_0_fifoReadReq_ENQ =
	     ringToMac_0_readReqFifo_EMPTY_N && pktBuff_0_fifoReadReq_FULL_N ;
  assign pktBuff_0_fifoReadReq_DEQ =
	     WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;
  assign pktBuff_0_fifoReadReq_CLR = 1'b0 ;

  // submodule pktBuff_0_fifoWriteData
  assign pktBuff_0_fifoWriteData_D_IN =
	     EN_txchan_0_writeServer_enq ?
	       txchan_0_writeServer_enq_v :
	       gearbox_dn_16_0_dataout_get ;
  assign pktBuff_0_fifoWriteData_ENQ =
	     EN_txchan_0_writeServer_enq ||
	     CAN_FIRE_RL_mkConnectionGetPut_39 &&
	     !EN_txchan_0_writeServer_enq ;
  assign pktBuff_0_fifoWriteData_DEQ = WILL_FIRE_RL_pktBuff_0_enq_stage1 ;
  assign pktBuff_0_fifoWriteData_CLR = 1'b0 ;

  // submodule pktBuff_0_incomingReqs
  assign pktBuff_0_incomingReqs_D_IN =
	     { pktBuff_0_wrCurrPtr, pktBuff_0_fifoWriteData_D_OUT } ;
  assign pktBuff_0_incomingReqs_ENQ = WILL_FIRE_RL_pktBuff_0_enq_stage1 ;
  assign pktBuff_0_incomingReqs_DEQ =
	     pktBuff_0_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_0_incomingReqs_CLR = 1'b0 ;

  // submodule pktBuff_0_memBuffer_memory
  assign pktBuff_0_memBuffer_memory_ADDRA =
	     pktBuff_0_incomingReqs_D_OUT[185:178] ;
  assign pktBuff_0_memBuffer_memory_ADDRB = pktBuff_0_rdCurrPtr ;
  assign pktBuff_0_memBuffer_memory_DIA =
	     pktBuff_0_incomingReqs_D_OUT[177:0] ;
  assign pktBuff_0_memBuffer_memory_DIB =
	     MUX_pktBuff_0_memBuffer_memory_b_put_1__SEL_1 ?
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign pktBuff_0_memBuffer_memory_WEA = 1'd1 ;
  assign pktBuff_0_memBuffer_memory_WEB = 1'd0 ;
  assign pktBuff_0_memBuffer_memory_ENA =
	     pktBuff_0_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_0_memBuffer_memory_ENB =
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     !pktBuff_0_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_0_dequeue_first_beat ;

  // submodule pktBuff_0_memBuffer_serverAdapterA_outDataCore
  assign pktBuff_0_memBuffer_serverAdapterA_outDataCore_D_IN =
	     pktBuff_0_memBuffer_memory_DOA ;
  assign pktBuff_0_memBuffer_serverAdapterA_outDataCore_ENQ =
	     pktBuff_0_memBuffer_serverAdapterA_outDataCore_FULL_N &&
	     pktBuff_0_memBuffer_serverAdapterA_outData_enqData_whas ;
  assign pktBuff_0_memBuffer_serverAdapterA_outDataCore_DEQ = 1'b0 ;
  assign pktBuff_0_memBuffer_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_0_memBuffer_serverAdapterB_outDataCore
  assign pktBuff_0_memBuffer_serverAdapterB_outDataCore_D_IN =
	     pktBuff_0_memBuffer_memory_DOB ;
  assign pktBuff_0_memBuffer_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     !WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_0_memBuffer_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_pktBuff_0_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_0_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     WILL_FIRE_RL_pktBuff_0_dequeue_next_beat &&
	     !pktBuff_0_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_0_memBuffer_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_0_meta_ff
  assign pktBuff_0_meta_ff_D_IN = meta_ff_0_1_D_OUT ;
  assign pktBuff_0_meta_ff_ENQ =
	     modifier_0_RDY_prev_enq && meta_ff_0_1_EMPTY_N &&
	     pktBuff_0_meta_ff_FULL_N ;
  assign pktBuff_0_meta_ff_DEQ = MUX_pktBuff_0_readStarted_write_1__SEL_2 ;
  assign pktBuff_0_meta_ff_CLR = 1'b0 ;

  // submodule pktBuff_0_pktBuff
  assign pktBuff_0_pktBuff_readServer_readReq_put =
	     pktBuff_0_readReqFifo_D_OUT ;
  assign pktBuff_0_pktBuff_set_verbosity_verbosity = 32'h0 ;
  assign pktBuff_0_pktBuff_writeServer_enq_v = writeDataFifo_0_D_OUT ;
  assign pktBuff_0_pktBuff_EN_writeServer_enq =
	     CAN_FIRE_RL_mkConnectionGetPut_9 &&
	     !EN_hostchan_0_writeClient_deq ;
  assign pktBuff_0_pktBuff_EN_readServer_readData_get =
	     pktBuff_0_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_0_readDataFifo_FULL_N ;
  assign pktBuff_0_pktBuff_EN_readServer_readLen_get =
	     pktBuff_0_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_0_readLenFifo_FULL_N ;
  assign pktBuff_0_pktBuff_EN_readServer_readReq_put =
	     pktBuff_0_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_0_readReqFifo_EMPTY_N ;
  assign pktBuff_0_pktBuff_EN_set_verbosity = 1'b0 ;

  // submodule pktBuff_0_readDataFifo
  assign pktBuff_0_readDataFifo_D_IN =
	     pktBuff_0_pktBuff_readServer_readData_get ;
  assign pktBuff_0_readDataFifo_ENQ =
	     pktBuff_0_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_0_readDataFifo_FULL_N ;
  assign pktBuff_0_readDataFifo_DEQ =
	     WILL_FIRE_RL_pktBuff_0_packetReadInProgress ;
  assign pktBuff_0_readDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_0_readLenFifo
  assign pktBuff_0_readLenFifo_D_IN =
	     pktBuff_0_pktBuff_readServer_readLen_get ;
  assign pktBuff_0_readLenFifo_ENQ =
	     pktBuff_0_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_0_readLenFifo_FULL_N ;
  assign pktBuff_0_readLenFifo_DEQ =
	     MUX_pktBuff_0_readStarted_write_1__SEL_2 ;
  assign pktBuff_0_readLenFifo_CLR = 1'b0 ;

  // submodule pktBuff_0_readReqFifo
  assign pktBuff_0_readReqFifo_D_IN = pktBuff_0_readLenFifo_D_OUT ;
  assign pktBuff_0_readReqFifo_ENQ =
	     MUX_pktBuff_0_readStarted_write_1__SEL_2 ;
  assign pktBuff_0_readReqFifo_DEQ =
	     pktBuff_0_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_0_readReqFifo_EMPTY_N ;
  assign pktBuff_0_readReqFifo_CLR = 1'b0 ;

  // submodule pktBuff_0_writeDataFifo
  assign pktBuff_0_writeDataFifo_D_IN = pktBuff_0_readDataFifo_D_OUT ;
  assign pktBuff_0_writeDataFifo_ENQ =
	     WILL_FIRE_RL_pktBuff_0_packetReadInProgress ;
  assign pktBuff_0_writeDataFifo_DEQ =
	     modifier_0_RDY_writeServer_enq &&
	     pktBuff_0_writeDataFifo_EMPTY_N ;
  assign pktBuff_0_writeDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_1_fifoEop
  assign pktBuff_1_fifoEop_D_IN = newPacketLen__h56460 ;
  assign pktBuff_1_fifoEop_ENQ =
	     WILL_FIRE_RL_pktBuff_1_enq_stage1 &&
	     pktBuff_1_fifoWriteData_D_OUT[0] ;
  assign pktBuff_1_fifoEop_DEQ = WILL_FIRE_RL_pktBuff_1_commit_packet ;
  assign pktBuff_1_fifoEop_CLR = 1'b0 ;

  // submodule pktBuff_1_fifoLen
  assign pktBuff_1_fifoLen_D_IN = pktBuff_1_fifoEop_D_OUT ;
  assign pktBuff_1_fifoLen_ENQ = WILL_FIRE_RL_pktBuff_1_commit_packet ;
  assign pktBuff_1_fifoLen_DEQ =
	     pktBuff_1_fifoLen_EMPTY_N && ringToMac_1_readLenFifo_FULL_N ;
  assign pktBuff_1_fifoLen_CLR = 1'b0 ;

  // submodule pktBuff_1_fifoReadData
  assign pktBuff_1_fifoReadData_D_IN =
	     pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget ;
  assign pktBuff_1_fifoReadData_ENQ =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat ;
  assign pktBuff_1_fifoReadData_DEQ =
	     pktBuff_1_fifoReadData_EMPTY_N &&
	     ringToMac_1_readDataFifo_FULL_N ;
  assign pktBuff_1_fifoReadData_CLR = 1'b0 ;

  // submodule pktBuff_1_fifoReadReq
  assign pktBuff_1_fifoReadReq_D_IN = ringToMac_1_readReqFifo_D_OUT ;
  assign pktBuff_1_fifoReadReq_ENQ =
	     ringToMac_1_readReqFifo_EMPTY_N && pktBuff_1_fifoReadReq_FULL_N ;
  assign pktBuff_1_fifoReadReq_DEQ =
	     WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;
  assign pktBuff_1_fifoReadReq_CLR = 1'b0 ;

  // submodule pktBuff_1_fifoWriteData
  assign pktBuff_1_fifoWriteData_D_IN =
	     EN_txchan_1_writeServer_enq ?
	       txchan_1_writeServer_enq_v :
	       gearbox_dn_16_1_dataout_get ;
  assign pktBuff_1_fifoWriteData_ENQ =
	     EN_txchan_1_writeServer_enq ||
	     CAN_FIRE_RL_mkConnectionGetPut_40 &&
	     !EN_txchan_1_writeServer_enq ;
  assign pktBuff_1_fifoWriteData_DEQ = WILL_FIRE_RL_pktBuff_1_enq_stage1 ;
  assign pktBuff_1_fifoWriteData_CLR = 1'b0 ;

  // submodule pktBuff_1_incomingReqs
  assign pktBuff_1_incomingReqs_D_IN =
	     { pktBuff_1_wrCurrPtr, pktBuff_1_fifoWriteData_D_OUT } ;
  assign pktBuff_1_incomingReqs_ENQ = WILL_FIRE_RL_pktBuff_1_enq_stage1 ;
  assign pktBuff_1_incomingReqs_DEQ =
	     pktBuff_1_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_1_incomingReqs_CLR = 1'b0 ;

  // submodule pktBuff_1_memBuffer_memory
  assign pktBuff_1_memBuffer_memory_ADDRA =
	     pktBuff_1_incomingReqs_D_OUT[185:178] ;
  assign pktBuff_1_memBuffer_memory_ADDRB = pktBuff_1_rdCurrPtr ;
  assign pktBuff_1_memBuffer_memory_DIA =
	     pktBuff_1_incomingReqs_D_OUT[177:0] ;
  assign pktBuff_1_memBuffer_memory_DIB =
	     MUX_pktBuff_1_memBuffer_memory_b_put_1__SEL_1 ?
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign pktBuff_1_memBuffer_memory_WEA = 1'd1 ;
  assign pktBuff_1_memBuffer_memory_WEB = 1'd0 ;
  assign pktBuff_1_memBuffer_memory_ENA =
	     pktBuff_1_memBuffer_serverAdapterA_writeWithResp_whas ;
  assign pktBuff_1_memBuffer_memory_ENB =
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     !pktBuff_1_memBuffer_serverAdapterB_outData_outData_wget[0] ||
	     WILL_FIRE_RL_pktBuff_1_dequeue_first_beat ;

  // submodule pktBuff_1_memBuffer_serverAdapterA_outDataCore
  assign pktBuff_1_memBuffer_serverAdapterA_outDataCore_D_IN =
	     pktBuff_1_memBuffer_memory_DOA ;
  assign pktBuff_1_memBuffer_serverAdapterA_outDataCore_ENQ =
	     pktBuff_1_memBuffer_serverAdapterA_outDataCore_FULL_N &&
	     pktBuff_1_memBuffer_serverAdapterA_outData_enqData_whas ;
  assign pktBuff_1_memBuffer_serverAdapterA_outDataCore_DEQ = 1'b0 ;
  assign pktBuff_1_memBuffer_serverAdapterA_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_1_memBuffer_serverAdapterB_outDataCore
  assign pktBuff_1_memBuffer_serverAdapterB_outDataCore_D_IN =
	     pktBuff_1_memBuffer_memory_DOB ;
  assign pktBuff_1_memBuffer_serverAdapterB_outDataCore_ENQ =
	     WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N &&
	     !WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_1_memBuffer_serverAdapterB_outDataCore_DEQ =
	     WILL_FIRE_RL_pktBuff_1_memBuffer_serverAdapterB_outData_enqAndDeq ||
	     pktBuff_1_memBuffer_serverAdapterB_outDataCore_EMPTY_N &&
	     WILL_FIRE_RL_pktBuff_1_dequeue_next_beat &&
	     !pktBuff_1_memBuffer_serverAdapterB_outData_enqData_whas ;
  assign pktBuff_1_memBuffer_serverAdapterB_outDataCore_CLR = 1'b0 ;

  // submodule pktBuff_1_meta_ff
  assign pktBuff_1_meta_ff_D_IN = meta_ff_1_1_D_OUT ;
  assign pktBuff_1_meta_ff_ENQ =
	     modifier_1_RDY_prev_enq && meta_ff_1_1_EMPTY_N &&
	     pktBuff_1_meta_ff_FULL_N ;
  assign pktBuff_1_meta_ff_DEQ = MUX_pktBuff_1_readStarted_write_1__SEL_2 ;
  assign pktBuff_1_meta_ff_CLR = 1'b0 ;

  // submodule pktBuff_1_pktBuff
  assign pktBuff_1_pktBuff_readServer_readReq_put =
	     pktBuff_1_readReqFifo_D_OUT ;
  assign pktBuff_1_pktBuff_set_verbosity_verbosity = 32'h0 ;
  assign pktBuff_1_pktBuff_writeServer_enq_v =
	     hostchan_0_writeDataFifo_D_OUT ;
  assign pktBuff_1_pktBuff_EN_writeServer_enq =
	     CAN_FIRE_RL_mkConnectionGetPut_10 &&
	     !EN_rxchan_0_writeClient_deq ;
  assign pktBuff_1_pktBuff_EN_readServer_readData_get =
	     pktBuff_1_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_1_readDataFifo_FULL_N ;
  assign pktBuff_1_pktBuff_EN_readServer_readLen_get =
	     pktBuff_1_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_1_readLenFifo_FULL_N ;
  assign pktBuff_1_pktBuff_EN_readServer_readReq_put =
	     pktBuff_1_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_1_readReqFifo_EMPTY_N ;
  assign pktBuff_1_pktBuff_EN_set_verbosity = 1'b0 ;

  // submodule pktBuff_1_readDataFifo
  assign pktBuff_1_readDataFifo_D_IN =
	     pktBuff_1_pktBuff_readServer_readData_get ;
  assign pktBuff_1_readDataFifo_ENQ =
	     pktBuff_1_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_1_readDataFifo_FULL_N ;
  assign pktBuff_1_readDataFifo_DEQ =
	     WILL_FIRE_RL_pktBuff_1_packetReadInProgress ;
  assign pktBuff_1_readDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_1_readLenFifo
  assign pktBuff_1_readLenFifo_D_IN =
	     pktBuff_1_pktBuff_readServer_readLen_get ;
  assign pktBuff_1_readLenFifo_ENQ =
	     pktBuff_1_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_1_readLenFifo_FULL_N ;
  assign pktBuff_1_readLenFifo_DEQ =
	     MUX_pktBuff_1_readStarted_write_1__SEL_2 ;
  assign pktBuff_1_readLenFifo_CLR = 1'b0 ;

  // submodule pktBuff_1_readReqFifo
  assign pktBuff_1_readReqFifo_D_IN = pktBuff_1_readLenFifo_D_OUT ;
  assign pktBuff_1_readReqFifo_ENQ =
	     MUX_pktBuff_1_readStarted_write_1__SEL_2 ;
  assign pktBuff_1_readReqFifo_DEQ =
	     pktBuff_1_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_1_readReqFifo_EMPTY_N ;
  assign pktBuff_1_readReqFifo_CLR = 1'b0 ;

  // submodule pktBuff_1_writeDataFifo
  assign pktBuff_1_writeDataFifo_D_IN = pktBuff_1_readDataFifo_D_OUT ;
  assign pktBuff_1_writeDataFifo_ENQ =
	     WILL_FIRE_RL_pktBuff_1_packetReadInProgress ;
  assign pktBuff_1_writeDataFifo_DEQ =
	     modifier_1_RDY_writeServer_enq &&
	     pktBuff_1_writeDataFifo_EMPTY_N ;
  assign pktBuff_1_writeDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_2_meta_ff
  assign pktBuff_2_meta_ff_D_IN = meta_ff_2_1_D_OUT ;
  assign pktBuff_2_meta_ff_ENQ =
	     modifier_2_RDY_prev_enq && meta_ff_2_1_EMPTY_N &&
	     pktBuff_2_meta_ff_FULL_N ;
  assign pktBuff_2_meta_ff_DEQ = MUX_pktBuff_2_readStarted_write_1__SEL_2 ;
  assign pktBuff_2_meta_ff_CLR = 1'b0 ;

  // submodule pktBuff_2_pktBuff
  assign pktBuff_2_pktBuff_readServer_readReq_put =
	     pktBuff_2_readReqFifo_D_OUT ;
  assign pktBuff_2_pktBuff_set_verbosity_verbosity = 32'h0 ;
  assign pktBuff_2_pktBuff_writeServer_enq_v =
	     hostchan_1_writeDataFifo_D_OUT ;
  assign pktBuff_2_pktBuff_EN_writeServer_enq =
	     CAN_FIRE_RL_mkConnectionGetPut_11 &&
	     !EN_rxchan_1_writeClient_deq ;
  assign pktBuff_2_pktBuff_EN_readServer_readData_get =
	     pktBuff_2_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_2_readDataFifo_FULL_N ;
  assign pktBuff_2_pktBuff_EN_readServer_readLen_get =
	     pktBuff_2_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_2_readLenFifo_FULL_N ;
  assign pktBuff_2_pktBuff_EN_readServer_readReq_put =
	     pktBuff_2_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_2_readReqFifo_EMPTY_N ;
  assign pktBuff_2_pktBuff_EN_set_verbosity = 1'b0 ;

  // submodule pktBuff_2_readDataFifo
  assign pktBuff_2_readDataFifo_D_IN =
	     pktBuff_2_pktBuff_readServer_readData_get ;
  assign pktBuff_2_readDataFifo_ENQ =
	     pktBuff_2_pktBuff_RDY_readServer_readData_get &&
	     pktBuff_2_readDataFifo_FULL_N ;
  assign pktBuff_2_readDataFifo_DEQ =
	     WILL_FIRE_RL_pktBuff_2_packetReadInProgress ;
  assign pktBuff_2_readDataFifo_CLR = 1'b0 ;

  // submodule pktBuff_2_readLenFifo
  assign pktBuff_2_readLenFifo_D_IN =
	     pktBuff_2_pktBuff_readServer_readLen_get ;
  assign pktBuff_2_readLenFifo_ENQ =
	     pktBuff_2_pktBuff_RDY_readServer_readLen_get &&
	     pktBuff_2_readLenFifo_FULL_N ;
  assign pktBuff_2_readLenFifo_DEQ =
	     MUX_pktBuff_2_readStarted_write_1__SEL_2 ;
  assign pktBuff_2_readLenFifo_CLR = 1'b0 ;

  // submodule pktBuff_2_readReqFifo
  assign pktBuff_2_readReqFifo_D_IN = pktBuff_2_readLenFifo_D_OUT ;
  assign pktBuff_2_readReqFifo_ENQ =
	     MUX_pktBuff_2_readStarted_write_1__SEL_2 ;
  assign pktBuff_2_readReqFifo_DEQ =
	     pktBuff_2_pktBuff_RDY_readServer_readReq_put &&
	     pktBuff_2_readReqFifo_EMPTY_N ;
  assign pktBuff_2_readReqFifo_CLR = 1'b0 ;

  // submodule pktBuff_2_writeDataFifo
  assign pktBuff_2_writeDataFifo_D_IN = pktBuff_2_readDataFifo_D_OUT ;
  assign pktBuff_2_writeDataFifo_ENQ =
	     WILL_FIRE_RL_pktBuff_2_packetReadInProgress ;
  assign pktBuff_2_writeDataFifo_DEQ =
	     modifier_2_RDY_writeServer_enq &&
	     pktBuff_2_writeDataFifo_EMPTY_N ;
  assign pktBuff_2_writeDataFifo_CLR = 1'b0 ;

  // submodule pktLenFifo_0
  assign pktLenFifo_0_D_IN = readLenFifo_0_D_OUT ;
  assign pktLenFifo_0_ENQ = MUX_readStarted_0_write_1__SEL_2 ;
  assign pktLenFifo_0_DEQ =
	     parser_0_RDY_meta_get && pktLenFifo_0_EMPTY_N &&
	     outReqFifo_0_FULL_N ;
  assign pktLenFifo_0_CLR = 1'b0 ;

  // submodule readDataFifo_0
  assign readDataFifo_0_D_IN = pktBuff_0_readServer_readData_get ;
  assign readDataFifo_0_ENQ =
	     pktBuff_0_RDY_readServer_readData_get && readDataFifo_0_FULL_N ;
  assign readDataFifo_0_DEQ = WILL_FIRE_RL_packetReadInProgress ;
  assign readDataFifo_0_CLR = 1'b0 ;

  // submodule readLenFifo_0
  assign readLenFifo_0_D_IN = pktBuff_0_readServer_readLen_get ;
  assign readLenFifo_0_ENQ =
	     pktBuff_0_RDY_readServer_readLen_get && readLenFifo_0_FULL_N ;
  assign readLenFifo_0_DEQ = MUX_readStarted_0_write_1__SEL_2 ;
  assign readLenFifo_0_CLR = 1'b0 ;

  // submodule readReqFifo_0
  assign readReqFifo_0_D_IN = readLenFifo_0_D_OUT ;
  assign readReqFifo_0_ENQ = MUX_readStarted_0_write_1__SEL_2 ;
  assign readReqFifo_0_DEQ =
	     pktBuff_0_RDY_readServer_readReq_put && readReqFifo_0_EMPTY_N ;
  assign readReqFifo_0_CLR = 1'b0 ;

  // submodule ringToMac_0_readDataFifo
  assign ringToMac_0_readDataFifo_D_IN = pktBuff_0_fifoReadData_D_OUT ;
  assign ringToMac_0_readDataFifo_ENQ =
	     pktBuff_0_fifoReadData_EMPTY_N &&
	     ringToMac_0_readDataFifo_FULL_N ;
  assign ringToMac_0_readDataFifo_DEQ =
	     WILL_FIRE_RL_ringToMac_0_cross_clocking ;
  assign ringToMac_0_readDataFifo_CLR = 1'b0 ;

  // submodule ringToMac_0_readLenFifo
  assign ringToMac_0_readLenFifo_D_IN = pktBuff_0_fifoLen_D_OUT ;
  assign ringToMac_0_readLenFifo_ENQ =
	     pktBuff_0_fifoLen_EMPTY_N && ringToMac_0_readLenFifo_FULL_N ;
  assign ringToMac_0_readLenFifo_DEQ =
	     ringToMac_0_readLenFifo_EMPTY_N &&
	     ringToMac_0_readReqFifo_FULL_N ;
  assign ringToMac_0_readLenFifo_CLR = 1'b0 ;

  // submodule ringToMac_0_readReqFifo
  assign ringToMac_0_readReqFifo_D_IN = ringToMac_0_readLenFifo_D_OUT ;
  assign ringToMac_0_readReqFifo_ENQ =
	     ringToMac_0_readLenFifo_EMPTY_N &&
	     ringToMac_0_readReqFifo_FULL_N ;
  assign ringToMac_0_readReqFifo_DEQ =
	     ringToMac_0_readReqFifo_EMPTY_N && pktBuff_0_fifoReadReq_FULL_N ;
  assign ringToMac_0_readReqFifo_CLR = 1'b0 ;

  // submodule ringToMac_0_tx_fifo
  assign ringToMac_0_tx_fifo_sD_IN = ringToMac_0_readDataFifo_D_OUT ;
  assign ringToMac_0_tx_fifo_sENQ = WILL_FIRE_RL_ringToMac_0_cross_clocking ;
  assign ringToMac_0_tx_fifo_dDEQ =
	     WILL_FIRE_RL_ringToMac_0_process_incoming_packet ;

  // submodule ringToMac_0_writeMacFifo
  assign ringToMac_0_writeMacFifo_D_IN =
	     ringToMac_0_fifoTxData_read_block ?
	       ((!ringToMac_0_fifoTxData_elem1_status_1__read__2_ETC___d1284 &&
		 ringToMac_0_fifoTxData_elem1_status_0__read__2_ETC___d1286) ?
		  ringToMac_0_fifoTxData_block1[211:106] :
		  ringToMac_0_fifoTxData_block1[105:0]) :
	       ((!ringToMac_0_fifoTxData_elem0_status_1__read__2_ETC___d1275 &&
		 ringToMac_0_fifoTxData_elem0_status_0__read__2_ETC___d1277) ?
		  ringToMac_0_fifoTxData_block0[211:106] :
		  ringToMac_0_fifoTxData_block0[105:0]) ;
  assign ringToMac_0_writeMacFifo_ENQ =
	     WILL_FIRE_RL_ringToMac_0_process_outgoing_packet &&
	     IF_ringToMac_0_fifoTxData_read_block_271_THEN__ETC___d1309 !=
	     8'd0 ;
  assign ringToMac_0_writeMacFifo_DEQ = EN_txchan_0_macTx_get ;
  assign ringToMac_0_writeMacFifo_CLR = 1'b0 ;

  // submodule ringToMac_1_readDataFifo
  assign ringToMac_1_readDataFifo_D_IN = pktBuff_1_fifoReadData_D_OUT ;
  assign ringToMac_1_readDataFifo_ENQ =
	     pktBuff_1_fifoReadData_EMPTY_N &&
	     ringToMac_1_readDataFifo_FULL_N ;
  assign ringToMac_1_readDataFifo_DEQ =
	     WILL_FIRE_RL_ringToMac_1_cross_clocking ;
  assign ringToMac_1_readDataFifo_CLR = 1'b0 ;

  // submodule ringToMac_1_readLenFifo
  assign ringToMac_1_readLenFifo_D_IN = pktBuff_1_fifoLen_D_OUT ;
  assign ringToMac_1_readLenFifo_ENQ =
	     pktBuff_1_fifoLen_EMPTY_N && ringToMac_1_readLenFifo_FULL_N ;
  assign ringToMac_1_readLenFifo_DEQ =
	     ringToMac_1_readLenFifo_EMPTY_N &&
	     ringToMac_1_readReqFifo_FULL_N ;
  assign ringToMac_1_readLenFifo_CLR = 1'b0 ;

  // submodule ringToMac_1_readReqFifo
  assign ringToMac_1_readReqFifo_D_IN = ringToMac_1_readLenFifo_D_OUT ;
  assign ringToMac_1_readReqFifo_ENQ =
	     ringToMac_1_readLenFifo_EMPTY_N &&
	     ringToMac_1_readReqFifo_FULL_N ;
  assign ringToMac_1_readReqFifo_DEQ =
	     ringToMac_1_readReqFifo_EMPTY_N && pktBuff_1_fifoReadReq_FULL_N ;
  assign ringToMac_1_readReqFifo_CLR = 1'b0 ;

  // submodule ringToMac_1_tx_fifo
  assign ringToMac_1_tx_fifo_sD_IN = ringToMac_1_readDataFifo_D_OUT ;
  assign ringToMac_1_tx_fifo_sENQ = WILL_FIRE_RL_ringToMac_1_cross_clocking ;
  assign ringToMac_1_tx_fifo_dDEQ =
	     WILL_FIRE_RL_ringToMac_1_process_incoming_packet ;

  // submodule ringToMac_1_writeMacFifo
  assign ringToMac_1_writeMacFifo_D_IN =
	     ringToMac_1_fifoTxData_read_block ?
	       ((!ringToMac_1_fifoTxData_elem1_status_1__read__7_ETC___d1728 &&
		 ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d1730) ?
		  ringToMac_1_fifoTxData_block1[211:106] :
		  ringToMac_1_fifoTxData_block1[105:0]) :
	       ((!ringToMac_1_fifoTxData_elem0_status_1__read__7_ETC___d1719 &&
		 ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d1721) ?
		  ringToMac_1_fifoTxData_block0[211:106] :
		  ringToMac_1_fifoTxData_block0[105:0]) ;
  assign ringToMac_1_writeMacFifo_ENQ =
	     WILL_FIRE_RL_ringToMac_1_process_outgoing_packet &&
	     IF_ringToMac_1_fifoTxData_read_block_715_THEN__ETC___d1753 !=
	     8'd0 ;
  assign ringToMac_1_writeMacFifo_DEQ = EN_txchan_1_macTx_get ;
  assign ringToMac_1_writeMacFifo_CLR = 1'b0 ;

  // submodule verbose_ff_0
  assign verbose_ff_0_D_IN =
	     EN_hostchan_0_verbose_enq ?
	       hostchan_0_verbose_enq_v :
	       set_verbosity_verbosity ;
  assign verbose_ff_0_ENQ = EN_hostchan_0_verbose_enq || EN_set_verbosity ;
  assign verbose_ff_0_DEQ = verbose_ff_0_EMPTY_N ;
  assign verbose_ff_0_CLR = 1'b0 ;

  // submodule verbose_ff_0_1
  assign verbose_ff_0_1_D_IN =
	     EN_rxchan_0_verbose_enq ?
	       rxchan_0_verbose_enq_v :
	       set_verbosity_verbosity ;
  assign verbose_ff_0_1_ENQ = EN_rxchan_0_verbose_enq || EN_set_verbosity ;
  assign verbose_ff_0_1_DEQ = verbose_ff_0_1_EMPTY_N ;
  assign verbose_ff_0_1_CLR = 1'b0 ;

  // submodule verbose_ff_0_2
  assign verbose_ff_0_2_D_IN = set_verbosity_verbosity ;
  assign verbose_ff_0_2_ENQ = EN_set_verbosity ;
  assign verbose_ff_0_2_DEQ = verbose_ff_0_2_EMPTY_N ;
  assign verbose_ff_0_2_CLR = 1'b0 ;

  // submodule verbose_ff_0_3
  assign verbose_ff_0_3_D_IN =
	     EN_txchan_0_verbose_enq ?
	       txchan_0_verbose_enq_v :
	       set_verbosity_verbosity ;
  assign verbose_ff_0_3_ENQ = EN_txchan_0_verbose_enq || EN_set_verbosity ;
  assign verbose_ff_0_3_DEQ = 1'b0 ;
  assign verbose_ff_0_3_CLR = 1'b0 ;

  // submodule verbose_ff_1
  assign verbose_ff_1_D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       rxchan_1_verbose_enq_v ;
  assign verbose_ff_1_ENQ = EN_set_verbosity || EN_rxchan_1_verbose_enq ;
  assign verbose_ff_1_DEQ = verbose_ff_1_EMPTY_N ;
  assign verbose_ff_1_CLR = 1'b0 ;

  // submodule verbose_ff_1_1
  assign verbose_ff_1_1_D_IN = set_verbosity_verbosity ;
  assign verbose_ff_1_1_ENQ = EN_set_verbosity ;
  assign verbose_ff_1_1_DEQ = verbose_ff_1_1_EMPTY_N ;
  assign verbose_ff_1_1_CLR = 1'b0 ;

  // submodule verbose_ff_1_2
  assign verbose_ff_1_2_D_IN =
	     EN_set_verbosity ?
	       set_verbosity_verbosity :
	       txchan_1_verbose_enq_v ;
  assign verbose_ff_1_2_ENQ = EN_set_verbosity || EN_txchan_1_verbose_enq ;
  assign verbose_ff_1_2_DEQ = 1'b0 ;
  assign verbose_ff_1_2_CLR = 1'b0 ;

  // submodule verbose_ff_2
  assign verbose_ff_2_D_IN = set_verbosity_verbosity ;
  assign verbose_ff_2_ENQ = EN_set_verbosity ;
  assign verbose_ff_2_DEQ = verbose_ff_2_EMPTY_N ;
  assign verbose_ff_2_CLR = 1'b0 ;

  // submodule writeDataFifo_0
  assign writeDataFifo_0_D_IN = readDataFifo_0_D_OUT ;
  assign writeDataFifo_0_ENQ = WILL_FIRE_RL_packetReadInProgress ;
  assign writeDataFifo_0_DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_9 &&
	     !EN_hostchan_0_writeClient_deq ||
	     EN_hostchan_0_writeClient_deq ;
  assign writeDataFifo_0_CLR = 1'b0 ;

  // submodule xbar_lower_lower_f
  assign xbar_lower_lower_f_D_IN = 610'h0 ;
  assign xbar_lower_lower_f_ENQ = 1'b0 ;
  assign xbar_lower_lower_f_DEQ = WILL_FIRE_RL_xbar_lower_route_1 ;
  assign xbar_lower_lower_f_CLR = 1'b0 ;

  // submodule xbar_lower_merges_1_fi0
  assign xbar_lower_merges_1_fi0_D_IN = xbar_lower_lower_f_D_OUT ;
  assign xbar_lower_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_route_1 &&
	     xbar_lower_lower_f_D_OUT[578] ;
  assign xbar_lower_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     (xbar_lower_merges_1_routeFrom[1] &&
	      !xbar_lower_merges_1_routeFrom[0] ||
	      !xbar_lower_merges_1_routeFrom[1] &&
	      xbar_lower_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty ;
  assign xbar_lower_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_merges_1_fi1
  assign xbar_lower_merges_1_fi1_D_IN = xbar_lower_upper_f_D_OUT ;
  assign xbar_lower_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_route && xbar_lower_upper_f_D_OUT[578] ;
  assign xbar_lower_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     (xbar_lower_merges_1_routeFrom[1] &&
	      xbar_lower_merges_1_routeFrom[0] ||
	      !xbar_lower_merges_1_routeFrom[1] &&
	      !xbar_lower_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty ;
  assign xbar_lower_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_merges_1_fo
  always@(MUX_xbar_lower_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty or
	  xbar_lower_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty or
	  xbar_lower_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_1_fo_enq_1__SEL_1:
	  xbar_lower_merges_1_fo_D_IN =
	      MUX_xbar_lower_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty:
	  xbar_lower_merges_1_fo_D_IN = xbar_lower_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty:
	  xbar_lower_merges_1_fo_D_IN = xbar_lower_merges_1_fi1_D_OUT;
      default: xbar_lower_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	     (xbar_lower_merges_1_routeFrom[1] ||
	      IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2494) ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_1_fi0_is_empty ;
  assign xbar_lower_merges_1_fo_DEQ = WILL_FIRE_RL_xbar_route_3 ;
  assign xbar_lower_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_lower_merges_fi0
  assign xbar_lower_merges_fi0_D_IN = xbar_lower_upper_f_D_OUT ;
  assign xbar_lower_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_lower_route && !xbar_lower_upper_f_D_OUT[578] ;
  assign xbar_lower_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     (xbar_lower_merges_routeFrom[1] &&
	      !xbar_lower_merges_routeFrom[0] ||
	      !xbar_lower_merges_routeFrom[1] &&
	      xbar_lower_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty ;
  assign xbar_lower_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_lower_merges_fi1
  assign xbar_lower_merges_fi1_D_IN = xbar_lower_lower_f_D_OUT ;
  assign xbar_lower_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_lower_route_1 &&
	     !xbar_lower_lower_f_D_OUT[578] ;
  assign xbar_lower_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     (xbar_lower_merges_routeFrom[1] &&
	      xbar_lower_merges_routeFrom[0] ||
	      !xbar_lower_merges_routeFrom[1] &&
	      !xbar_lower_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty ;
  assign xbar_lower_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_lower_merges_fo
  always@(MUX_xbar_lower_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_lower_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty or
	  xbar_lower_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty or
	  xbar_lower_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_lower_merges_fo_enq_1__SEL_1:
	  xbar_lower_merges_fo_D_IN = MUX_xbar_lower_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty:
	  xbar_lower_merges_fo_D_IN = xbar_lower_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty:
	  xbar_lower_merges_fo_D_IN = xbar_lower_merges_fi1_D_OUT;
      default: xbar_lower_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_lower_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	     (xbar_lower_merges_routeFrom[1] ||
	      IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2419) ||
	     WILL_FIRE_RL_xbar_lower_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_lower_merges_fi0_is_empty ;
  assign xbar_lower_merges_fo_DEQ = WILL_FIRE_RL_xbar_route_2 ;
  assign xbar_lower_merges_fo_CLR = 1'b0 ;

  // submodule xbar_lower_upper_f
  assign xbar_lower_upper_f_D_IN = input_queues_2_readServer_readData_get ;
  assign xbar_lower_upper_f_ENQ =
	     input_queues_2_RDY_readServer_readData_get &&
	     xbar_lower_upper_f_FULL_N ;
  assign xbar_lower_upper_f_DEQ = WILL_FIRE_RL_xbar_lower_route ;
  assign xbar_lower_upper_f_CLR = 1'b0 ;

  // submodule xbar_merges_1_fi0
  assign xbar_merges_1_fi0_D_IN = xbar_upper_merges_1_fo_D_OUT ;
  assign xbar_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_1 && !xbar_upper_merges_1_fo_D_OUT[579] ;
  assign xbar_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     (xbar_merges_1_routeFrom[1] && !xbar_merges_1_routeFrom[0] ||
	      !xbar_merges_1_routeFrom[1] && xbar_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_1_fi1_is_empty ;
  assign xbar_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_1_fi1
  assign xbar_merges_1_fi1_D_IN = xbar_lower_merges_1_fo_D_OUT ;
  assign xbar_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_3 && !xbar_lower_merges_1_fo_D_OUT[579] ;
  assign xbar_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     (xbar_merges_1_routeFrom[1] && xbar_merges_1_routeFrom[0] ||
	      !xbar_merges_1_routeFrom[1] && !xbar_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_1_fi0_is_empty ;
  assign xbar_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_1_fo
  always@(MUX_xbar_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_1_fi1_is_empty or
	  xbar_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_1_fi0_is_empty or xbar_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_1_fo_enq_1__SEL_1:
	  xbar_merges_1_fo_D_IN = MUX_xbar_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_1_fi1_is_empty:
	  xbar_merges_1_fo_D_IN = xbar_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_1_fi0_is_empty:
	  xbar_merges_1_fo_D_IN = xbar_merges_1_fi1_D_OUT;
      default: xbar_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	     (xbar_merges_1_routeFrom[1] ||
	      IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2666) ||
	     WILL_FIRE_RL_xbar_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_1_fi0_is_empty ;
  assign xbar_merges_1_fo_DEQ =
	     output_queues_1_RDY_writeServer_enq && xbar_merges_1_fo_EMPTY_N ;
  assign xbar_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_merges_2_fi0
  assign xbar_merges_2_fi0_D_IN = xbar_lower_merges_fo_D_OUT ;
  assign xbar_merges_2_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_2 && xbar_lower_merges_fo_D_OUT[579] ;
  assign xbar_merges_2_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     (xbar_merges_2_routeFrom[1] && !xbar_merges_2_routeFrom[0] ||
	      !xbar_merges_2_routeFrom[1] && xbar_merges_2_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_2_fi1_is_empty ;
  assign xbar_merges_2_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_2_fi1
  assign xbar_merges_2_fi1_D_IN = xbar_upper_merges_fo_D_OUT ;
  assign xbar_merges_2_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route && xbar_upper_merges_fo_D_OUT[579] ;
  assign xbar_merges_2_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     (xbar_merges_2_routeFrom[1] && xbar_merges_2_routeFrom[0] ||
	      !xbar_merges_2_routeFrom[1] && !xbar_merges_2_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_2_fi0_is_empty ;
  assign xbar_merges_2_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_2_fo
  always@(MUX_xbar_merges_2_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_2_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_2_fi1_is_empty or
	  xbar_merges_2_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_2_fi0_is_empty or xbar_merges_2_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_2_fo_enq_1__SEL_1:
	  xbar_merges_2_fo_D_IN = MUX_xbar_merges_2_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_2_fi1_is_empty:
	  xbar_merges_2_fo_D_IN = xbar_merges_2_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_2_fi0_is_empty:
	  xbar_merges_2_fo_D_IN = xbar_merges_2_fi1_D_OUT;
      default: xbar_merges_2_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_2_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	     (xbar_merges_2_routeFrom[1] ||
	      IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2741) ||
	     WILL_FIRE_RL_xbar_merges_2_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_2_fi0_is_empty ;
  assign xbar_merges_2_fo_DEQ =
	     output_queues_2_RDY_writeServer_enq && xbar_merges_2_fo_EMPTY_N ;
  assign xbar_merges_2_fo_CLR = 1'b0 ;

  // submodule xbar_merges_3_fi0
  assign xbar_merges_3_fi0_D_IN = xbar_lower_merges_1_fo_D_OUT ;
  assign xbar_merges_3_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route_3 && xbar_lower_merges_1_fo_D_OUT[579] ;
  assign xbar_merges_3_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     (xbar_merges_3_routeFrom[1] && !xbar_merges_3_routeFrom[0] ||
	      !xbar_merges_3_routeFrom[1] && xbar_merges_3_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_3_fi1_is_empty ;
  assign xbar_merges_3_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_3_fi1
  assign xbar_merges_3_fi1_D_IN = xbar_upper_merges_1_fo_D_OUT ;
  assign xbar_merges_3_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_1 && xbar_upper_merges_1_fo_D_OUT[579] ;
  assign xbar_merges_3_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     (xbar_merges_3_routeFrom[1] && xbar_merges_3_routeFrom[0] ||
	      !xbar_merges_3_routeFrom[1] && !xbar_merges_3_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_3_fi0_is_empty ;
  assign xbar_merges_3_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_3_fo
  always@(MUX_xbar_merges_3_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_3_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_3_fi1_is_empty or
	  xbar_merges_3_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_3_fi0_is_empty or xbar_merges_3_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_3_fo_enq_1__SEL_1:
	  xbar_merges_3_fo_D_IN = MUX_xbar_merges_3_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_3_fi1_is_empty:
	  xbar_merges_3_fo_D_IN = xbar_merges_3_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_3_fi0_is_empty:
	  xbar_merges_3_fo_D_IN = xbar_merges_3_fi1_D_OUT;
      default: xbar_merges_3_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_3_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	     (xbar_merges_3_routeFrom[1] ||
	      IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2816) ||
	     WILL_FIRE_RL_xbar_merges_3_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_3_fi0_is_empty ;
  assign xbar_merges_3_fo_DEQ =
	     output_queues_3_RDY_writeServer_enq && xbar_merges_3_fo_EMPTY_N ;
  assign xbar_merges_3_fo_CLR = 1'b0 ;

  // submodule xbar_merges_fi0
  assign xbar_merges_fi0_D_IN = xbar_upper_merges_fo_D_OUT ;
  assign xbar_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_route && !xbar_upper_merges_fo_D_OUT[579] ;
  assign xbar_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     (xbar_merges_routeFrom[1] && !xbar_merges_routeFrom[0] ||
	      !xbar_merges_routeFrom[1] && xbar_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_fi1_is_empty ;
  assign xbar_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_merges_fi1
  assign xbar_merges_fi1_D_IN = xbar_lower_merges_fo_D_OUT ;
  assign xbar_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_route_2 && !xbar_lower_merges_fo_D_OUT[579] ;
  assign xbar_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     (xbar_merges_routeFrom[1] && xbar_merges_routeFrom[0] ||
	      !xbar_merges_routeFrom[1] && !xbar_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_merges_fi0_is_empty ;
  assign xbar_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_merges_fo
  always@(MUX_xbar_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_merges_fi1_is_empty or
	  xbar_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_merges_fi0_is_empty or xbar_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_merges_fo_enq_1__SEL_1:
	  xbar_merges_fo_D_IN = MUX_xbar_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_merges_fi1_is_empty:
	  xbar_merges_fo_D_IN = xbar_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_merges_fi0_is_empty:
	  xbar_merges_fo_D_IN = xbar_merges_fi1_D_OUT;
      default: xbar_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_merges_both_have_data &&
	     (xbar_merges_routeFrom[1] ||
	      IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2591) ||
	     WILL_FIRE_RL_xbar_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_merges_fi0_is_empty ;
  assign xbar_merges_fo_DEQ =
	     output_queues_0_RDY_writeServer_enq && xbar_merges_fo_EMPTY_N ;
  assign xbar_merges_fo_CLR = 1'b0 ;

  // submodule xbar_upper_lower_f
  assign xbar_upper_lower_f_D_IN = input_queues_1_readServer_readData_get ;
  assign xbar_upper_lower_f_ENQ =
	     input_queues_1_RDY_readServer_readData_get &&
	     xbar_upper_lower_f_FULL_N ;
  assign xbar_upper_lower_f_DEQ = WILL_FIRE_RL_xbar_upper_route_1 ;
  assign xbar_upper_lower_f_CLR = 1'b0 ;

  // submodule xbar_upper_merges_1_fi0
  assign xbar_upper_merges_1_fi0_D_IN = xbar_upper_lower_f_D_OUT ;
  assign xbar_upper_merges_1_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_route_1 &&
	     xbar_upper_lower_f_D_OUT[578] ;
  assign xbar_upper_merges_1_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     (xbar_upper_merges_1_routeFrom[1] &&
	      !xbar_upper_merges_1_routeFrom[0] ||
	      !xbar_upper_merges_1_routeFrom[1] &&
	      xbar_upper_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty ;
  assign xbar_upper_merges_1_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_merges_1_fi1
  assign xbar_upper_merges_1_fi1_D_IN = xbar_upper_upper_f_D_OUT ;
  assign xbar_upper_merges_1_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_route && xbar_upper_upper_f_D_OUT[578] ;
  assign xbar_upper_merges_1_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     (xbar_upper_merges_1_routeFrom[1] &&
	      xbar_upper_merges_1_routeFrom[0] ||
	      !xbar_upper_merges_1_routeFrom[1] &&
	      !xbar_upper_merges_1_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty ;
  assign xbar_upper_merges_1_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_merges_1_fo
  always@(MUX_xbar_upper_merges_1_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_merges_1_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty or
	  xbar_upper_merges_1_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty or
	  xbar_upper_merges_1_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_1_fo_enq_1__SEL_1:
	  xbar_upper_merges_1_fo_D_IN =
	      MUX_xbar_upper_merges_1_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty:
	  xbar_upper_merges_1_fo_D_IN = xbar_upper_merges_1_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty:
	  xbar_upper_merges_1_fo_D_IN = xbar_upper_merges_1_fi1_D_OUT;
      default: xbar_upper_merges_1_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_1_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	     (xbar_upper_merges_1_routeFrom[1] ||
	      IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2320) ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_1_fi0_is_empty ;
  assign xbar_upper_merges_1_fo_DEQ = WILL_FIRE_RL_xbar_route_1 ;
  assign xbar_upper_merges_1_fo_CLR = 1'b0 ;

  // submodule xbar_upper_merges_fi0
  assign xbar_upper_merges_fi0_D_IN = xbar_upper_upper_f_D_OUT ;
  assign xbar_upper_merges_fi0_ENQ =
	     WILL_FIRE_RL_xbar_upper_route && !xbar_upper_upper_f_D_OUT[578] ;
  assign xbar_upper_merges_fi0_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     (xbar_upper_merges_routeFrom[1] &&
	      !xbar_upper_merges_routeFrom[0] ||
	      !xbar_upper_merges_routeFrom[1] &&
	      xbar_upper_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty ;
  assign xbar_upper_merges_fi0_CLR = 1'b0 ;

  // submodule xbar_upper_merges_fi1
  assign xbar_upper_merges_fi1_D_IN = xbar_upper_lower_f_D_OUT ;
  assign xbar_upper_merges_fi1_ENQ =
	     WILL_FIRE_RL_xbar_upper_route_1 &&
	     !xbar_upper_lower_f_D_OUT[578] ;
  assign xbar_upper_merges_fi1_DEQ =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     (xbar_upper_merges_routeFrom[1] &&
	      xbar_upper_merges_routeFrom[0] ||
	      !xbar_upper_merges_routeFrom[1] &&
	      !xbar_upper_merges_fi0HasPrio) ||
	     WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty ;
  assign xbar_upper_merges_fi1_CLR = 1'b0 ;

  // submodule xbar_upper_merges_fo
  always@(MUX_xbar_upper_merges_fo_enq_1__SEL_1 or
	  MUX_xbar_upper_merges_fo_enq_1__VAL_1 or
	  WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty or
	  xbar_upper_merges_fi0_D_OUT or
	  WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty or
	  xbar_upper_merges_fi1_D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_xbar_upper_merges_fo_enq_1__SEL_1:
	  xbar_upper_merges_fo_D_IN = MUX_xbar_upper_merges_fo_enq_1__VAL_1;
      WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty:
	  xbar_upper_merges_fo_D_IN = xbar_upper_merges_fi0_D_OUT;
      WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty:
	  xbar_upper_merges_fo_D_IN = xbar_upper_merges_fi1_D_OUT;
      default: xbar_upper_merges_fo_D_IN =
		   610'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign xbar_upper_merges_fo_ENQ =
	     WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	     (xbar_upper_merges_routeFrom[1] ||
	      IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2245) ||
	     WILL_FIRE_RL_xbar_upper_merges_fi1_is_empty ||
	     WILL_FIRE_RL_xbar_upper_merges_fi0_is_empty ;
  assign xbar_upper_merges_fo_DEQ = WILL_FIRE_RL_xbar_route ;
  assign xbar_upper_merges_fo_CLR = 1'b0 ;

  // submodule xbar_upper_upper_f
  assign xbar_upper_upper_f_D_IN = input_queues_0_readServer_readData_get ;
  assign xbar_upper_upper_f_ENQ =
	     input_queues_0_RDY_readServer_readData_get &&
	     xbar_upper_upper_f_FULL_N ;
  assign xbar_upper_upper_f_DEQ = WILL_FIRE_RL_xbar_upper_route ;
  assign xbar_upper_upper_f_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_ringToMac_0_fifoTxData_read_block_271_THEN__ETC___d1309 =
	     ringToMac_0_fifoTxData_read_block ? mask__h50060 : mask__h49951 ;
  assign IF_ringToMac_1_fifoTxData_read_block_715_THEN__ETC___d1753 =
	     ringToMac_1_fifoTxData_read_block ? mask__h68694 : mask__h68585 ;
  assign IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_NOT_ETC___d2480 =
	     (xbar_lower_merges_1_fi0HasPrio ?
		!xbar_lower_merges_1_fi0_D_OUT[1] :
		!xbar_lower_merges_1_fi1_D_OUT[1]) ||
	     xbar_lower_merges_1_fo_FULL_N ;
  assign IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2481 =
	     (xbar_lower_merges_1_fi0HasPrio ?
		xbar_lower_merges_1_fi0_EMPTY_N :
		xbar_lower_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_NOT_ETC___d2480 ;
  assign IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2494 =
	     xbar_lower_merges_1_fi0HasPrio ?
	       xbar_lower_merges_1_fi0_D_OUT[1] :
	       xbar_lower_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2506 =
	     IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2494 &&
	     (xbar_lower_merges_1_fi0HasPrio ?
		!xbar_lower_merges_1_fi0_D_OUT[0] :
		!xbar_lower_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2511 =
	     xbar_lower_merges_1_fi0HasPrio ?
	       xbar_lower_merges_1_fi0_D_OUT[0] :
	       xbar_lower_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_lower_merges_1_routeFrom_468_BIT_0_470_ETC___d2501 =
	     xbar_lower_merges_1_routeFrom[0] ?
	       xbar_lower_merges_1_fi1_D_OUT[0] :
	       xbar_lower_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_lower_merges_fi0HasPrio_398_THEN_NOT_x_ETC___d2405 =
	     (xbar_lower_merges_fi0HasPrio ?
		!xbar_lower_merges_fi0_D_OUT[1] :
		!xbar_lower_merges_fi1_D_OUT[1]) ||
	     xbar_lower_merges_fo_FULL_N ;
  assign IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2406 =
	     (xbar_lower_merges_fi0HasPrio ?
		xbar_lower_merges_fi0_EMPTY_N :
		xbar_lower_merges_fi1_EMPTY_N) &&
	     IF_xbar_lower_merges_fi0HasPrio_398_THEN_NOT_x_ETC___d2405 ;
  assign IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2419 =
	     xbar_lower_merges_fi0HasPrio ?
	       xbar_lower_merges_fi0_D_OUT[1] :
	       xbar_lower_merges_fi1_D_OUT[1] ;
  assign IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2431 =
	     IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2419 &&
	     (xbar_lower_merges_fi0HasPrio ?
		!xbar_lower_merges_fi0_D_OUT[0] :
		!xbar_lower_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2436 =
	     xbar_lower_merges_fi0HasPrio ?
	       xbar_lower_merges_fi0_D_OUT[0] :
	       xbar_lower_merges_fi1_D_OUT[0] ;
  assign IF_xbar_lower_merges_routeFrom_393_BIT_0_395_T_ETC___d2426 =
	     xbar_lower_merges_routeFrom[0] ?
	       xbar_lower_merges_fi1_D_OUT[0] :
	       xbar_lower_merges_fi0_D_OUT[0] ;
  assign IF_xbar_merges_1_fi0HasPrio_645_THEN_NOT_xbar__ETC___d2652 =
	     (xbar_merges_1_fi0HasPrio ?
		!xbar_merges_1_fi0_D_OUT[1] :
		!xbar_merges_1_fi1_D_OUT[1]) ||
	     xbar_merges_1_fo_FULL_N ;
  assign IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2653 =
	     (xbar_merges_1_fi0HasPrio ?
		xbar_merges_1_fi0_EMPTY_N :
		xbar_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_merges_1_fi0HasPrio_645_THEN_NOT_xbar__ETC___d2652 ;
  assign IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2666 =
	     xbar_merges_1_fi0HasPrio ?
	       xbar_merges_1_fi0_D_OUT[1] :
	       xbar_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2678 =
	     IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2666 &&
	     (xbar_merges_1_fi0HasPrio ?
		!xbar_merges_1_fi0_D_OUT[0] :
		!xbar_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2683 =
	     xbar_merges_1_fi0HasPrio ?
	       xbar_merges_1_fi0_D_OUT[0] :
	       xbar_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_merges_1_routeFrom_640_BIT_0_642_THEN__ETC___d2673 =
	     xbar_merges_1_routeFrom[0] ?
	       xbar_merges_1_fi1_D_OUT[0] :
	       xbar_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_merges_2_fi0HasPrio_720_THEN_NOT_xbar__ETC___d2727 =
	     (xbar_merges_2_fi0HasPrio ?
		!xbar_merges_2_fi0_D_OUT[1] :
		!xbar_merges_2_fi1_D_OUT[1]) ||
	     xbar_merges_2_fo_FULL_N ;
  assign IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2728 =
	     (xbar_merges_2_fi0HasPrio ?
		xbar_merges_2_fi0_EMPTY_N :
		xbar_merges_2_fi1_EMPTY_N) &&
	     IF_xbar_merges_2_fi0HasPrio_720_THEN_NOT_xbar__ETC___d2727 ;
  assign IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2741 =
	     xbar_merges_2_fi0HasPrio ?
	       xbar_merges_2_fi0_D_OUT[1] :
	       xbar_merges_2_fi1_D_OUT[1] ;
  assign IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2753 =
	     IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2741 &&
	     (xbar_merges_2_fi0HasPrio ?
		!xbar_merges_2_fi0_D_OUT[0] :
		!xbar_merges_2_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2758 =
	     xbar_merges_2_fi0HasPrio ?
	       xbar_merges_2_fi0_D_OUT[0] :
	       xbar_merges_2_fi1_D_OUT[0] ;
  assign IF_xbar_merges_2_routeFrom_715_BIT_0_717_THEN__ETC___d2748 =
	     xbar_merges_2_routeFrom[0] ?
	       xbar_merges_2_fi1_D_OUT[0] :
	       xbar_merges_2_fi0_D_OUT[0] ;
  assign IF_xbar_merges_3_fi0HasPrio_795_THEN_NOT_xbar__ETC___d2802 =
	     (xbar_merges_3_fi0HasPrio ?
		!xbar_merges_3_fi0_D_OUT[1] :
		!xbar_merges_3_fi1_D_OUT[1]) ||
	     xbar_merges_3_fo_FULL_N ;
  assign IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2803 =
	     (xbar_merges_3_fi0HasPrio ?
		xbar_merges_3_fi0_EMPTY_N :
		xbar_merges_3_fi1_EMPTY_N) &&
	     IF_xbar_merges_3_fi0HasPrio_795_THEN_NOT_xbar__ETC___d2802 ;
  assign IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2816 =
	     xbar_merges_3_fi0HasPrio ?
	       xbar_merges_3_fi0_D_OUT[1] :
	       xbar_merges_3_fi1_D_OUT[1] ;
  assign IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2828 =
	     IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2816 &&
	     (xbar_merges_3_fi0HasPrio ?
		!xbar_merges_3_fi0_D_OUT[0] :
		!xbar_merges_3_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2833 =
	     xbar_merges_3_fi0HasPrio ?
	       xbar_merges_3_fi0_D_OUT[0] :
	       xbar_merges_3_fi1_D_OUT[0] ;
  assign IF_xbar_merges_3_routeFrom_790_BIT_0_792_THEN__ETC___d2823 =
	     xbar_merges_3_routeFrom[0] ?
	       xbar_merges_3_fi1_D_OUT[0] :
	       xbar_merges_3_fi0_D_OUT[0] ;
  assign IF_xbar_merges_fi0HasPrio_570_THEN_NOT_xbar_me_ETC___d2577 =
	     (xbar_merges_fi0HasPrio ?
		!xbar_merges_fi0_D_OUT[1] :
		!xbar_merges_fi1_D_OUT[1]) ||
	     xbar_merges_fo_FULL_N ;
  assign IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2578 =
	     (xbar_merges_fi0HasPrio ?
		xbar_merges_fi0_EMPTY_N :
		xbar_merges_fi1_EMPTY_N) &&
	     IF_xbar_merges_fi0HasPrio_570_THEN_NOT_xbar_me_ETC___d2577 ;
  assign IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2591 =
	     xbar_merges_fi0HasPrio ?
	       xbar_merges_fi0_D_OUT[1] :
	       xbar_merges_fi1_D_OUT[1] ;
  assign IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2603 =
	     IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2591 &&
	     (xbar_merges_fi0HasPrio ?
		!xbar_merges_fi0_D_OUT[0] :
		!xbar_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2608 =
	     xbar_merges_fi0HasPrio ?
	       xbar_merges_fi0_D_OUT[0] :
	       xbar_merges_fi1_D_OUT[0] ;
  assign IF_xbar_merges_routeFrom_565_BIT_0_567_THEN_xb_ETC___d2598 =
	     xbar_merges_routeFrom[0] ?
	       xbar_merges_fi1_D_OUT[0] :
	       xbar_merges_fi0_D_OUT[0] ;
  assign IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_NOT_ETC___d2306 =
	     (xbar_upper_merges_1_fi0HasPrio ?
		!xbar_upper_merges_1_fi0_D_OUT[1] :
		!xbar_upper_merges_1_fi1_D_OUT[1]) ||
	     xbar_upper_merges_1_fo_FULL_N ;
  assign IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2307 =
	     (xbar_upper_merges_1_fi0HasPrio ?
		xbar_upper_merges_1_fi0_EMPTY_N :
		xbar_upper_merges_1_fi1_EMPTY_N) &&
	     IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_NOT_ETC___d2306 ;
  assign IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2320 =
	     xbar_upper_merges_1_fi0HasPrio ?
	       xbar_upper_merges_1_fi0_D_OUT[1] :
	       xbar_upper_merges_1_fi1_D_OUT[1] ;
  assign IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2332 =
	     IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2320 &&
	     (xbar_upper_merges_1_fi0HasPrio ?
		!xbar_upper_merges_1_fi0_D_OUT[0] :
		!xbar_upper_merges_1_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2337 =
	     xbar_upper_merges_1_fi0HasPrio ?
	       xbar_upper_merges_1_fi0_D_OUT[0] :
	       xbar_upper_merges_1_fi1_D_OUT[0] ;
  assign IF_xbar_upper_merges_1_routeFrom_294_BIT_0_296_ETC___d2327 =
	     xbar_upper_merges_1_routeFrom[0] ?
	       xbar_upper_merges_1_fi1_D_OUT[0] :
	       xbar_upper_merges_1_fi0_D_OUT[0] ;
  assign IF_xbar_upper_merges_fi0HasPrio_224_THEN_NOT_x_ETC___d2231 =
	     (xbar_upper_merges_fi0HasPrio ?
		!xbar_upper_merges_fi0_D_OUT[1] :
		!xbar_upper_merges_fi1_D_OUT[1]) ||
	     xbar_upper_merges_fo_FULL_N ;
  assign IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2232 =
	     (xbar_upper_merges_fi0HasPrio ?
		xbar_upper_merges_fi0_EMPTY_N :
		xbar_upper_merges_fi1_EMPTY_N) &&
	     IF_xbar_upper_merges_fi0HasPrio_224_THEN_NOT_x_ETC___d2231 ;
  assign IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2245 =
	     xbar_upper_merges_fi0HasPrio ?
	       xbar_upper_merges_fi0_D_OUT[1] :
	       xbar_upper_merges_fi1_D_OUT[1] ;
  assign IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2257 =
	     IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2245 &&
	     (xbar_upper_merges_fi0HasPrio ?
		!xbar_upper_merges_fi0_D_OUT[0] :
		!xbar_upper_merges_fi1_D_OUT[0]) ;
  assign IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2262 =
	     xbar_upper_merges_fi0HasPrio ?
	       xbar_upper_merges_fi0_D_OUT[0] :
	       xbar_upper_merges_fi1_D_OUT[0] ;
  assign IF_xbar_upper_merges_routeFrom_219_BIT_0_221_T_ETC___d2252 =
	     xbar_upper_merges_routeFrom[0] ?
	       xbar_upper_merges_fi1_D_OUT[0] :
	       xbar_upper_merges_fi0_D_OUT[0] ;
  assign NOT_IF_ringToMac_0_fifoTxData_read_block_271_T_ETC___d1366 =
	     IF_ringToMac_0_fifoTxData_read_block_271_THEN__ETC___d1309 !=
	     8'd0 &&
	     (ringToMac_0_fifoTxData_read_block ?
		((!ringToMac_0_fifoTxData_elem1_status_1__read__2_ETC___d1284 &&
		  ringToMac_0_fifoTxData_elem1_status_0__read__2_ETC___d1286) ?
		   ringToMac_0_fifoTxData_block1[106] :
		   ringToMac_0_fifoTxData_block1[0]) :
		((!ringToMac_0_fifoTxData_elem0_status_1__read__2_ETC___d1275 &&
		  ringToMac_0_fifoTxData_elem0_status_0__read__2_ETC___d1277) ?
		   ringToMac_0_fifoTxData_block0[106] :
		   ringToMac_0_fifoTxData_block0[0])) ;
  assign NOT_IF_ringToMac_1_fifoTxData_read_block_715_T_ETC___d1810 =
	     IF_ringToMac_1_fifoTxData_read_block_715_THEN__ETC___d1753 !=
	     8'd0 &&
	     (ringToMac_1_fifoTxData_read_block ?
		((!ringToMac_1_fifoTxData_elem1_status_1__read__7_ETC___d1728 &&
		  ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d1730) ?
		   ringToMac_1_fifoTxData_block1[106] :
		   ringToMac_1_fifoTxData_block1[0]) :
		((!ringToMac_1_fifoTxData_elem0_status_1__read__7_ETC___d1719 &&
		  ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d1721) ?
		   ringToMac_1_fifoTxData_block0[106] :
		   ringToMac_1_fifoTxData_block0[0])) ;
  assign NOT_ringToMac_0_fifoTxData_read_block_271_272__ETC___d1294 =
	     (!ringToMac_0_fifoTxData_read_block && x__h47698 != 2'd3 ||
	      ringToMac_0_fifoTxData_read_block && x__h48077 != 2'd3) &&
	     !ringToMac_0_fifoTxData_dInReset_pre_isInReset ;
  assign NOT_ringToMac_0_fifoTxData_write_block_231_232_ETC___d1252 =
	     (!ringToMac_0_fifoTxData_write_block && x__h43450 == 2'd3 ||
	      ringToMac_0_fifoTxData_write_block && x__h43905 == 2'd3) &&
	     !ringToMac_0_fifoTxData_sInReset_pre_isInReset ;
  assign NOT_ringToMac_1_fifoTxData_read_block_715_716__ETC___d1738 =
	     (!ringToMac_1_fifoTxData_read_block && x__h66332 != 2'd3 ||
	      ringToMac_1_fifoTxData_read_block && x__h66711 != 2'd3) &&
	     !ringToMac_1_fifoTxData_dInReset_pre_isInReset ;
  assign NOT_ringToMac_1_fifoTxData_write_block_675_676_ETC___d1696 =
	     (!ringToMac_1_fifoTxData_write_block && x__h62087 == 2'd3 ||
	      ringToMac_1_fifoTxData_write_block && x__h62539 == 2'd3) &&
	     !ringToMac_1_fifoTxData_sInReset_pre_isInReset ;
  assign ab__h36853 = 2'd0 ;
  assign ab__h55490 = 2'd0 ;
  assign mask__h49951 =
	     (!ringToMac_0_fifoTxData_elem0_status_1__read__2_ETC___d1275 &&
	      ringToMac_0_fifoTxData_elem0_status_0__read__2_ETC___d1277) ?
	       ringToMac_0_fifoTxData_block0[115:108] :
	       ringToMac_0_fifoTxData_block0[9:2] ;
  assign mask__h50060 =
	     (!ringToMac_0_fifoTxData_elem1_status_1__read__2_ETC___d1284 &&
	      ringToMac_0_fifoTxData_elem1_status_0__read__2_ETC___d1286) ?
	       ringToMac_0_fifoTxData_block1[115:108] :
	       ringToMac_0_fifoTxData_block1[9:2] ;
  assign mask__h68585 =
	     (!ringToMac_1_fifoTxData_elem0_status_1__read__7_ETC___d1719 &&
	      ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d1721) ?
	       ringToMac_1_fifoTxData_block0[115:108] :
	       ringToMac_1_fifoTxData_block0[9:2] ;
  assign mask__h68694 =
	     (!ringToMac_1_fifoTxData_elem1_status_1__read__7_ETC___d1728 &&
	      ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d1730) ?
	       ringToMac_1_fifoTxData_block1[115:108] :
	       ringToMac_1_fifoTxData_block1[9:2] ;
  assign newPacketLen__h37823 = pktBuff_0_packetLen + { 11'd0, x__h37912 } ;
  assign newPacketLen__h56460 = pktBuff_1_packetLen + { 11'd0, x__h56549 } ;
  assign pktBuff_0_memBuffer_serverAdapterA_cnt_86_SLT_3___d1155 =
	     (pktBuff_0_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_0_memBuffer_serverAdapterB_cnt_051_PLU_ETC___d1057 =
	     pktBuff_0_memBuffer_serverAdapterB_cnt +
	     (pktBuff_0_memBuffer_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_pktBuff_0_dequeue_next_beat ? 3'd7 : 3'd0) ;
  assign pktBuff_0_memBuffer_serverAdapterB_cnt_051_SLT_3___d1181 =
	     (pktBuff_0_memBuffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_1_memBuffer_serverAdapterA_cnt_430_SLT_3___d1599 =
	     (pktBuff_1_memBuffer_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign pktBuff_1_memBuffer_serverAdapterB_cnt_495_PLU_ETC___d1501 =
	     pktBuff_1_memBuffer_serverAdapterB_cnt +
	     (pktBuff_1_memBuffer_serverAdapterB_cnt_1_whas ? 3'd1 : 3'd0) +
	     (WILL_FIRE_RL_pktBuff_1_dequeue_next_beat ? 3'd7 : 3'd0) ;
  assign pktBuff_1_memBuffer_serverAdapterB_cnt_495_SLT_3___d1625 =
	     (pktBuff_1_memBuffer_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign ringToMac_0_fifoTxData_elem0_status_0__read__2_ETC___d1277 =
	     ringToMac_0_fifoTxData_elem0_status_0 ==
	     ringToMac_0_fifoTxData_block0_status ;
  assign ringToMac_0_fifoTxData_elem0_status_1__read__2_ETC___d1275 =
	     ringToMac_0_fifoTxData_elem0_status_1 ==
	     ringToMac_0_fifoTxData_block0_status ;
  assign ringToMac_0_fifoTxData_elem1_status_0__read__2_ETC___d1286 =
	     ringToMac_0_fifoTxData_elem1_status_0 ==
	     ringToMac_0_fifoTxData_block1_status ;
  assign ringToMac_0_fifoTxData_elem1_status_1__read__2_ETC___d1284 =
	     ringToMac_0_fifoTxData_elem1_status_1 ==
	     ringToMac_0_fifoTxData_block1_status ;
  assign ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d1721 =
	     ringToMac_1_fifoTxData_elem0_status_0 ==
	     ringToMac_1_fifoTxData_block0_status ;
  assign ringToMac_1_fifoTxData_elem0_status_1__read__7_ETC___d1719 =
	     ringToMac_1_fifoTxData_elem0_status_1 ==
	     ringToMac_1_fifoTxData_block0_status ;
  assign ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d1730 =
	     ringToMac_1_fifoTxData_elem1_status_0 ==
	     ringToMac_1_fifoTxData_block1_status ;
  assign ringToMac_1_fifoTxData_elem1_status_1__read__7_ETC___d1728 =
	     ringToMac_1_fifoTxData_elem1_status_1 ==
	     ringToMac_1_fifoTxData_block1_status ;
  assign verbose_ff_1_i_notFull__171_AND_verbose_ff_0_i_ETC___d3558 =
	     verbose_ff_1_FULL_N && verbose_ff_0_FULL_N &&
	     verbose_ff_0_3_FULL_N &&
	     verbose_ff_1_2_FULL_N &&
	     verbose_ff_0_2_FULL_N &&
	     verbose_ff_1_1_FULL_N &&
	     verbose_ff_2_FULL_N ;
  assign x__h15906 = x__h15921 + y__h15922 ;
  assign x__h15921 = x__h15933 + y__h15934 ;
  assign x__h15933 = x__h15945 + y__h15946 ;
  assign x__h15945 = x__h15957 + y__h15958 ;
  assign x__h15957 = x__h15969 + y__h15970 ;
  assign x__h15969 = x__h15981 + y__h15982 ;
  assign x__h15981 = x__h15993 + y__h15994 ;
  assign x__h15993 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[9] } ;
  assign x__h37912 = x__h37927 + y__h37928 ;
  assign x__h37927 = x__h37939 + y__h37940 ;
  assign x__h37939 = x__h37951 + y__h37952 ;
  assign x__h37951 = x__h37963 + y__h37964 ;
  assign x__h37963 = x__h37975 + y__h37976 ;
  assign x__h37975 = x__h37987 + y__h37988 ;
  assign x__h37987 = x__h37999 + y__h38000 ;
  assign x__h37999 = x__h38011 + y__h38012 ;
  assign x__h38011 = x__h38023 + y__h38024 ;
  assign x__h38023 = x__h38035 + y__h38036 ;
  assign x__h38035 = x__h38047 + y__h38048 ;
  assign x__h38047 = x__h38059 + y__h38060 ;
  assign x__h38059 = x__h38071 + y__h38072 ;
  assign x__h38071 = x__h38083 + y__h38084 ;
  assign x__h38083 = x__h38095 + y__h38096 ;
  assign x__h38095 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[17] } ;
  assign x__h43450 =
	     { ringToMac_0_fifoTxData_elem0_status_1 ==
	       ringToMac_0_fifoTxData_block0_status,
	       ringToMac_0_fifoTxData_elem0_status_0 ==
	       ringToMac_0_fifoTxData_block0_status } ;
  assign x__h43905 =
	     { ringToMac_0_fifoTxData_elem1_status_1 ==
	       ringToMac_0_fifoTxData_block1_status,
	       ringToMac_0_fifoTxData_elem1_status_0 ==
	       ringToMac_0_fifoTxData_block1_status } ;
  assign x__h47698 =
	     { ringToMac_0_fifoTxData_elem0_status_1__read__2_ETC___d1275,
	       ringToMac_0_fifoTxData_elem0_status_0__read__2_ETC___d1277 } ;
  assign x__h48077 =
	     { ringToMac_0_fifoTxData_elem1_status_1__read__2_ETC___d1284,
	       ringToMac_0_fifoTxData_elem1_status_0__read__2_ETC___d1286 } ;
  assign x__h50317 = x__h50333 + y__h50334 ;
  assign x__h50333 = x__h50345 + y__h50346 ;
  assign x__h50345 = x__h50357 + y__h50358 ;
  assign x__h50357 = x__h50369 + y__h50370 ;
  assign x__h50369 = x__h50381 + y__h50382 ;
  assign x__h50381 = x__h50393 + y__h50394 ;
  assign x__h50393 = x__h50405 + y__h50406 ;
  assign x__h50405 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_271_THEN__ETC___d1309[7] } ;
  assign x__h56549 = x__h56564 + y__h56565 ;
  assign x__h56564 = x__h56576 + y__h56577 ;
  assign x__h56576 = x__h56588 + y__h56589 ;
  assign x__h56588 = x__h56600 + y__h56601 ;
  assign x__h56600 = x__h56612 + y__h56613 ;
  assign x__h56612 = x__h56624 + y__h56625 ;
  assign x__h56624 = x__h56636 + y__h56637 ;
  assign x__h56636 = x__h56648 + y__h56649 ;
  assign x__h56648 = x__h56660 + y__h56661 ;
  assign x__h56660 = x__h56672 + y__h56673 ;
  assign x__h56672 = x__h56684 + y__h56685 ;
  assign x__h56684 = x__h56696 + y__h56697 ;
  assign x__h56696 = x__h56708 + y__h56709 ;
  assign x__h56708 = x__h56720 + y__h56721 ;
  assign x__h56720 = x__h56732 + y__h56733 ;
  assign x__h56732 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[17] } ;
  assign x__h62087 =
	     { ringToMac_1_fifoTxData_elem0_status_1 ==
	       ringToMac_1_fifoTxData_block0_status,
	       ringToMac_1_fifoTxData_elem0_status_0 ==
	       ringToMac_1_fifoTxData_block0_status } ;
  assign x__h62539 =
	     { ringToMac_1_fifoTxData_elem1_status_1 ==
	       ringToMac_1_fifoTxData_block1_status,
	       ringToMac_1_fifoTxData_elem1_status_0 ==
	       ringToMac_1_fifoTxData_block1_status } ;
  assign x__h66332 =
	     { ringToMac_1_fifoTxData_elem0_status_1__read__7_ETC___d1719,
	       ringToMac_1_fifoTxData_elem0_status_0__read__7_ETC___d1721 } ;
  assign x__h66711 =
	     { ringToMac_1_fifoTxData_elem1_status_1__read__7_ETC___d1728,
	       ringToMac_1_fifoTxData_elem1_status_0__read__7_ETC___d1730 } ;
  assign x__h68951 = x__h68967 + y__h68968 ;
  assign x__h68967 = x__h68979 + y__h68980 ;
  assign x__h68979 = x__h68991 + y__h68992 ;
  assign x__h68991 = x__h69003 + y__h69004 ;
  assign x__h69003 = x__h69015 + y__h69016 ;
  assign x__h69015 = x__h69027 + y__h69028 ;
  assign x__h69027 = x__h69039 + y__h69040 ;
  assign x__h69039 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_715_THEN__ETC___d1753[7] } ;
  assign x__h8912 = x__h8927 + y__h8928 ;
  assign x__h8927 = x__h8939 + y__h8940 ;
  assign x__h8939 = x__h8951 + y__h8952 ;
  assign x__h8951 = x__h8963 + y__h8964 ;
  assign x__h8963 = x__h8975 + y__h8976 ;
  assign x__h8975 = x__h8987 + y__h8988 ;
  assign x__h8987 = x__h8999 + y__h9000 ;
  assign x__h8999 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[9] } ;
  assign x_data__h10291 =
	     { macToRing_0_gearbox_in_ff_D_OUT[73:10],
	       macToRing_0_gearbox_v_prev[73:10] } ;
  assign x_data__h16327 = { 64'd0, macToRing_1_gearbox_in_ff_D_OUT[73:10] } ;
  assign x_data__h17285 =
	     { macToRing_1_gearbox_in_ff_D_OUT[73:10],
	       macToRing_1_gearbox_v_prev[73:10] } ;
  assign x_data__h9333 = { 64'd0, macToRing_0_gearbox_in_ff_D_OUT[73:10] } ;
  assign x_mask__h10292 =
	     { macToRing_0_gearbox_in_ff_D_OUT[9:2],
	       macToRing_0_gearbox_v_prev[9:2] } ;
  assign x_mask__h17286 =
	     { macToRing_1_gearbox_in_ff_D_OUT[9:2],
	       macToRing_1_gearbox_v_prev[9:2] } ;
  assign xbar_lower_merges_1_fo_i_notFull__456_AND_IF_x_ETC___d2472 =
	     xbar_lower_merges_1_fo_FULL_N &&
	     (xbar_lower_merges_1_routeFrom[0] ?
		xbar_lower_merges_1_fi1_EMPTY_N :
		xbar_lower_merges_1_fi0_EMPTY_N) ;
  assign xbar_lower_merges_1_routeFrom_468_BIT_1_469_AN_ETC___d2514 =
	     xbar_lower_merges_1_routeFrom[1] &&
	     IF_xbar_lower_merges_1_routeFrom_468_BIT_0_470_ETC___d2501 ||
	     !xbar_lower_merges_1_routeFrom[1] &&
	     IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2494 &&
	     IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2511 ;
  assign xbar_lower_merges_fo_i_notFull__381_AND_IF_xba_ETC___d2397 =
	     xbar_lower_merges_fo_FULL_N &&
	     (xbar_lower_merges_routeFrom[0] ?
		xbar_lower_merges_fi1_EMPTY_N :
		xbar_lower_merges_fi0_EMPTY_N) ;
  assign xbar_lower_merges_routeFrom_393_BIT_1_394_AND__ETC___d2439 =
	     xbar_lower_merges_routeFrom[1] &&
	     IF_xbar_lower_merges_routeFrom_393_BIT_0_395_T_ETC___d2426 ||
	     !xbar_lower_merges_routeFrom[1] &&
	     IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2419 &&
	     IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2436 ;
  assign xbar_merges_1_fo_i_notFull__628_AND_IF_xbar_me_ETC___d2644 =
	     xbar_merges_1_fo_FULL_N &&
	     (xbar_merges_1_routeFrom[0] ?
		xbar_merges_1_fi1_EMPTY_N :
		xbar_merges_1_fi0_EMPTY_N) ;
  assign xbar_merges_1_routeFrom_640_BIT_1_641_AND_IF_x_ETC___d2686 =
	     xbar_merges_1_routeFrom[1] &&
	     IF_xbar_merges_1_routeFrom_640_BIT_0_642_THEN__ETC___d2673 ||
	     !xbar_merges_1_routeFrom[1] &&
	     IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2666 &&
	     IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2683 ;
  assign xbar_merges_2_fo_i_notFull__703_AND_IF_xbar_me_ETC___d2719 =
	     xbar_merges_2_fo_FULL_N &&
	     (xbar_merges_2_routeFrom[0] ?
		xbar_merges_2_fi1_EMPTY_N :
		xbar_merges_2_fi0_EMPTY_N) ;
  assign xbar_merges_2_routeFrom_715_BIT_1_716_AND_IF_x_ETC___d2761 =
	     xbar_merges_2_routeFrom[1] &&
	     IF_xbar_merges_2_routeFrom_715_BIT_0_717_THEN__ETC___d2748 ||
	     !xbar_merges_2_routeFrom[1] &&
	     IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2741 &&
	     IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2758 ;
  assign xbar_merges_3_fo_i_notFull__778_AND_IF_xbar_me_ETC___d2794 =
	     xbar_merges_3_fo_FULL_N &&
	     (xbar_merges_3_routeFrom[0] ?
		xbar_merges_3_fi1_EMPTY_N :
		xbar_merges_3_fi0_EMPTY_N) ;
  assign xbar_merges_3_routeFrom_790_BIT_1_791_AND_IF_x_ETC___d2836 =
	     xbar_merges_3_routeFrom[1] &&
	     IF_xbar_merges_3_routeFrom_790_BIT_0_792_THEN__ETC___d2823 ||
	     !xbar_merges_3_routeFrom[1] &&
	     IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2816 &&
	     IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2833 ;
  assign xbar_merges_fo_i_notFull__553_AND_IF_xbar_merg_ETC___d2569 =
	     xbar_merges_fo_FULL_N &&
	     (xbar_merges_routeFrom[0] ?
		xbar_merges_fi1_EMPTY_N :
		xbar_merges_fi0_EMPTY_N) ;
  assign xbar_merges_routeFrom_565_BIT_1_566_AND_IF_xba_ETC___d2611 =
	     xbar_merges_routeFrom[1] &&
	     IF_xbar_merges_routeFrom_565_BIT_0_567_THEN_xb_ETC___d2598 ||
	     !xbar_merges_routeFrom[1] &&
	     IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2591 &&
	     IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2608 ;
  assign xbar_upper_merges_1_fo_i_notFull__282_AND_IF_x_ETC___d2298 =
	     xbar_upper_merges_1_fo_FULL_N &&
	     (xbar_upper_merges_1_routeFrom[0] ?
		xbar_upper_merges_1_fi1_EMPTY_N :
		xbar_upper_merges_1_fi0_EMPTY_N) ;
  assign xbar_upper_merges_1_routeFrom_294_BIT_1_295_AN_ETC___d2340 =
	     xbar_upper_merges_1_routeFrom[1] &&
	     IF_xbar_upper_merges_1_routeFrom_294_BIT_0_296_ETC___d2327 ||
	     !xbar_upper_merges_1_routeFrom[1] &&
	     IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2320 &&
	     IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2337 ;
  assign xbar_upper_merges_fo_i_notFull__207_AND_IF_xba_ETC___d2223 =
	     xbar_upper_merges_fo_FULL_N &&
	     (xbar_upper_merges_routeFrom[0] ?
		xbar_upper_merges_fi1_EMPTY_N :
		xbar_upper_merges_fi0_EMPTY_N) ;
  assign xbar_upper_merges_routeFrom_219_BIT_1_220_AND__ETC___d2265 =
	     xbar_upper_merges_routeFrom[1] &&
	     IF_xbar_upper_merges_routeFrom_219_BIT_0_221_T_ETC___d2252 ||
	     !xbar_upper_merges_routeFrom[1] &&
	     IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2245 &&
	     IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2262 ;
  assign y__h15903 = { 60'd0, x__h15906 } ;
  assign y__h15922 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[2] } ;
  assign y__h15934 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[3] } ;
  assign y__h15946 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[4] } ;
  assign y__h15958 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[5] } ;
  assign y__h15970 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[6] } ;
  assign y__h15982 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[7] } ;
  assign y__h15994 = { 3'd0, macToRing_1_gearbox_in_ff_D_OUT[8] } ;
  assign y__h37928 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[2] } ;
  assign y__h37940 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[3] } ;
  assign y__h37952 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[4] } ;
  assign y__h37964 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[5] } ;
  assign y__h37976 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[6] } ;
  assign y__h37988 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[7] } ;
  assign y__h38000 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[8] } ;
  assign y__h38012 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[9] } ;
  assign y__h38024 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[10] } ;
  assign y__h38036 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[11] } ;
  assign y__h38048 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[12] } ;
  assign y__h38060 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[13] } ;
  assign y__h38072 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[14] } ;
  assign y__h38084 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[15] } ;
  assign y__h38096 = { 4'd0, pktBuff_0_fifoWriteData_D_OUT[16] } ;
  assign y__h43278 = ringToMac_0_cycle_cnt - ringToMac_0_last_endofpacket ;
  assign y__h43365 = ringToMac_0_cycle_cnt - ringToMac_0_last_startofpacket ;
  assign y__h50313 = { 60'd0, x__h50317 } ;
  assign y__h50334 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_271_THEN__ETC___d1309[0] } ;
  assign y__h50346 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_271_THEN__ETC___d1309[1] } ;
  assign y__h50358 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_271_THEN__ETC___d1309[2] } ;
  assign y__h50370 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_271_THEN__ETC___d1309[3] } ;
  assign y__h50382 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_271_THEN__ETC___d1309[4] } ;
  assign y__h50394 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_271_THEN__ETC___d1309[5] } ;
  assign y__h50406 =
	     { 3'd0,
	       IF_ringToMac_0_fifoTxData_read_block_271_THEN__ETC___d1309[6] } ;
  assign y__h56565 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[2] } ;
  assign y__h56577 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[3] } ;
  assign y__h56589 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[4] } ;
  assign y__h56601 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[5] } ;
  assign y__h56613 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[6] } ;
  assign y__h56625 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[7] } ;
  assign y__h56637 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[8] } ;
  assign y__h56649 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[9] } ;
  assign y__h56661 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[10] } ;
  assign y__h56673 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[11] } ;
  assign y__h56685 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[12] } ;
  assign y__h56697 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[13] } ;
  assign y__h56709 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[14] } ;
  assign y__h56721 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[15] } ;
  assign y__h56733 = { 4'd0, pktBuff_1_fifoWriteData_D_OUT[16] } ;
  assign y__h61915 = ringToMac_1_cycle_cnt - ringToMac_1_last_endofpacket ;
  assign y__h62002 = ringToMac_1_cycle_cnt - ringToMac_1_last_startofpacket ;
  assign y__h68947 = { 60'd0, x__h68951 } ;
  assign y__h68968 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_715_THEN__ETC___d1753[0] } ;
  assign y__h68980 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_715_THEN__ETC___d1753[1] } ;
  assign y__h68992 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_715_THEN__ETC___d1753[2] } ;
  assign y__h69004 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_715_THEN__ETC___d1753[3] } ;
  assign y__h69016 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_715_THEN__ETC___d1753[4] } ;
  assign y__h69028 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_715_THEN__ETC___d1753[5] } ;
  assign y__h69040 =
	     { 3'd0,
	       IF_ringToMac_1_fifoTxData_read_block_715_THEN__ETC___d1753[6] } ;
  assign y__h8909 = { 60'd0, x__h8912 } ;
  assign y__h8928 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[2] } ;
  assign y__h8940 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[3] } ;
  assign y__h8952 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[4] } ;
  assign y__h8964 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[5] } ;
  assign y__h8976 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[6] } ;
  assign y__h8988 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[7] } ;
  assign y__h9000 = { 3'd0, macToRing_0_gearbox_in_ff_D_OUT[8] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (localReset_OUT_RST == `BSV_RESET_VALUE)
      begin
        hostchan_0_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hostchan_1_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_0_eopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_0_eopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_0_inPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_0_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_0_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_0_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_0_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_0_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_0_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_0_outPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_0_packetLen <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pktBuff_0_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_0_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_0_sopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_0_sopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_0_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_1_eopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_1_eopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_1_inPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_1_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_1_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_1_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_1_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	pktBuff_1_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_1_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pktBuff_1_outPacket <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_1_packetLen <= `BSV_ASSIGNMENT_DELAY 16'd0;
	pktBuff_1_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_1_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pktBuff_1_sopDeq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_1_sopEnq <= `BSV_ASSIGNMENT_DELAY 64'd0;
	pktBuff_1_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	pktBuff_2_readStarted <= `BSV_ASSIGNMENT_DELAY 1'd0;
	readStarted_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_cycle_cnt <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_goodputCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_idleCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_last_endofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_last_startofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_cycle_cnt <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_goodputCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_idleCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_last_endofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_last_startofpacket <= `BSV_ASSIGNMENT_DELAY 64'd0;
	xbar_lower_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_lower_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_lower_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_2_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_2_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_3_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_3_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
	xbar_upper_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY 1'd1;
	xbar_upper_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (hostchan_0_readStarted_EN)
	  hostchan_0_readStarted <= `BSV_ASSIGNMENT_DELAY
	      hostchan_0_readStarted_D_IN;
	if (hostchan_1_readStarted_EN)
	  hostchan_1_readStarted <= `BSV_ASSIGNMENT_DELAY
	      hostchan_1_readStarted_D_IN;
	if (pktBuff_0_eopDeq_EN)
	  pktBuff_0_eopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_0_eopDeq_D_IN;
	if (pktBuff_0_eopEnq_EN)
	  pktBuff_0_eopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_0_eopEnq_D_IN;
	if (pktBuff_0_inPacket_EN)
	  pktBuff_0_inPacket <= `BSV_ASSIGNMENT_DELAY pktBuff_0_inPacket_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterA_cnt_EN)
	  pktBuff_0_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterA_cnt_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterA_s1_EN)
	  pktBuff_0_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterA_s1_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterA_s2_EN)
	  pktBuff_0_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterA_s2_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterB_cnt_EN)
	  pktBuff_0_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterB_cnt_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterB_s1_EN)
	  pktBuff_0_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterB_s1_D_IN;
	if (pktBuff_0_memBuffer_serverAdapterB_s2_EN)
	  pktBuff_0_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_memBuffer_serverAdapterB_s2_D_IN;
	if (pktBuff_0_outPacket_EN)
	  pktBuff_0_outPacket <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_outPacket_D_IN;
	if (pktBuff_0_packetLen_EN)
	  pktBuff_0_packetLen <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_packetLen_D_IN;
	if (pktBuff_0_rdCurrPtr_EN)
	  pktBuff_0_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_rdCurrPtr_D_IN;
	if (pktBuff_0_readStarted_EN)
	  pktBuff_0_readStarted <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_readStarted_D_IN;
	if (pktBuff_0_sopDeq_EN)
	  pktBuff_0_sopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_0_sopDeq_D_IN;
	if (pktBuff_0_sopEnq_EN)
	  pktBuff_0_sopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_0_sopEnq_D_IN;
	if (pktBuff_0_wrCurrPtr_EN)
	  pktBuff_0_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_0_wrCurrPtr_D_IN;
	if (pktBuff_1_eopDeq_EN)
	  pktBuff_1_eopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_1_eopDeq_D_IN;
	if (pktBuff_1_eopEnq_EN)
	  pktBuff_1_eopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_1_eopEnq_D_IN;
	if (pktBuff_1_inPacket_EN)
	  pktBuff_1_inPacket <= `BSV_ASSIGNMENT_DELAY pktBuff_1_inPacket_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterA_cnt_EN)
	  pktBuff_1_memBuffer_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterA_cnt_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterA_s1_EN)
	  pktBuff_1_memBuffer_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterA_s1_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterA_s2_EN)
	  pktBuff_1_memBuffer_serverAdapterA_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterA_s2_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterB_cnt_EN)
	  pktBuff_1_memBuffer_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterB_cnt_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterB_s1_EN)
	  pktBuff_1_memBuffer_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterB_s1_D_IN;
	if (pktBuff_1_memBuffer_serverAdapterB_s2_EN)
	  pktBuff_1_memBuffer_serverAdapterB_s2 <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_memBuffer_serverAdapterB_s2_D_IN;
	if (pktBuff_1_outPacket_EN)
	  pktBuff_1_outPacket <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_outPacket_D_IN;
	if (pktBuff_1_packetLen_EN)
	  pktBuff_1_packetLen <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_packetLen_D_IN;
	if (pktBuff_1_rdCurrPtr_EN)
	  pktBuff_1_rdCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_rdCurrPtr_D_IN;
	if (pktBuff_1_readStarted_EN)
	  pktBuff_1_readStarted <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_readStarted_D_IN;
	if (pktBuff_1_sopDeq_EN)
	  pktBuff_1_sopDeq <= `BSV_ASSIGNMENT_DELAY pktBuff_1_sopDeq_D_IN;
	if (pktBuff_1_sopEnq_EN)
	  pktBuff_1_sopEnq <= `BSV_ASSIGNMENT_DELAY pktBuff_1_sopEnq_D_IN;
	if (pktBuff_1_wrCurrPtr_EN)
	  pktBuff_1_wrCurrPtr <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_1_wrCurrPtr_D_IN;
	if (pktBuff_2_readStarted_EN)
	  pktBuff_2_readStarted <= `BSV_ASSIGNMENT_DELAY
	      pktBuff_2_readStarted_D_IN;
	if (readStarted_0_EN)
	  readStarted_0 <= `BSV_ASSIGNMENT_DELAY readStarted_0_D_IN;
	if (ringToMac_0_cycle_cnt_EN)
	  ringToMac_0_cycle_cnt <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_cycle_cnt_D_IN;
	if (ringToMac_0_goodputCount_EN)
	  ringToMac_0_goodputCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_goodputCount_D_IN;
	if (ringToMac_0_idleCount_EN)
	  ringToMac_0_idleCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_idleCount_D_IN;
	if (ringToMac_0_last_endofpacket_EN)
	  ringToMac_0_last_endofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_last_endofpacket_D_IN;
	if (ringToMac_0_last_startofpacket_EN)
	  ringToMac_0_last_startofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_last_startofpacket_D_IN;
	if (ringToMac_1_cycle_cnt_EN)
	  ringToMac_1_cycle_cnt <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_cycle_cnt_D_IN;
	if (ringToMac_1_goodputCount_EN)
	  ringToMac_1_goodputCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_goodputCount_D_IN;
	if (ringToMac_1_idleCount_EN)
	  ringToMac_1_idleCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_idleCount_D_IN;
	if (ringToMac_1_last_endofpacket_EN)
	  ringToMac_1_last_endofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_last_endofpacket_D_IN;
	if (ringToMac_1_last_startofpacket_EN)
	  ringToMac_1_last_startofpacket <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_last_startofpacket_D_IN;
	if (xbar_lower_merges_1_fi0HasPrio_EN)
	  xbar_lower_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_1_fi0HasPrio_D_IN;
	if (xbar_lower_merges_1_routeFrom_EN)
	  xbar_lower_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_1_routeFrom_D_IN;
	if (xbar_lower_merges_fi0HasPrio_EN)
	  xbar_lower_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_fi0HasPrio_D_IN;
	if (xbar_lower_merges_routeFrom_EN)
	  xbar_lower_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_lower_merges_routeFrom_D_IN;
	if (xbar_merges_1_fi0HasPrio_EN)
	  xbar_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_1_fi0HasPrio_D_IN;
	if (xbar_merges_1_routeFrom_EN)
	  xbar_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_1_routeFrom_D_IN;
	if (xbar_merges_2_fi0HasPrio_EN)
	  xbar_merges_2_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_2_fi0HasPrio_D_IN;
	if (xbar_merges_2_routeFrom_EN)
	  xbar_merges_2_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_2_routeFrom_D_IN;
	if (xbar_merges_3_fi0HasPrio_EN)
	  xbar_merges_3_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_3_fi0HasPrio_D_IN;
	if (xbar_merges_3_routeFrom_EN)
	  xbar_merges_3_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_3_routeFrom_D_IN;
	if (xbar_merges_fi0HasPrio_EN)
	  xbar_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_fi0HasPrio_D_IN;
	if (xbar_merges_routeFrom_EN)
	  xbar_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_merges_routeFrom_D_IN;
	if (xbar_upper_merges_1_fi0HasPrio_EN)
	  xbar_upper_merges_1_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_1_fi0HasPrio_D_IN;
	if (xbar_upper_merges_1_routeFrom_EN)
	  xbar_upper_merges_1_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_1_routeFrom_D_IN;
	if (xbar_upper_merges_fi0HasPrio_EN)
	  xbar_upper_merges_fi0HasPrio <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_fi0HasPrio_D_IN;
	if (xbar_upper_merges_routeFrom_EN)
	  xbar_upper_merges_routeFrom <= `BSV_ASSIGNMENT_DELAY
	      xbar_upper_merges_routeFrom_D_IN;
      end
    if (cf_verbosity_EN)
      cf_verbosity <= `BSV_ASSIGNMENT_DELAY cf_verbosity_D_IN;
    if (cf_verbosity_0_EN)
      cf_verbosity_0 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_0_D_IN;
    if (cf_verbosity_0_1_EN)
      cf_verbosity_0_1 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_0_1_D_IN;
    if (cf_verbosity_0_2_EN)
      cf_verbosity_0_2 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_0_2_D_IN;
    if (cf_verbosity_0_3_EN)
      cf_verbosity_0_3 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_0_3_D_IN;
    if (cf_verbosity_1_EN)
      cf_verbosity_1 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_1_D_IN;
    if (cf_verbosity_1_1_EN)
      cf_verbosity_1_1 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_1_1_D_IN;
    if (cf_verbosity_1_2_EN)
      cf_verbosity_1_2 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_1_2_D_IN;
    if (cf_verbosity_2_EN)
      cf_verbosity_2 <= `BSV_ASSIGNMENT_DELAY cf_verbosity_2_D_IN;
    if (hostchan_0_cf_verbosity_EN)
      hostchan_0_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  hostchan_0_cf_verbosity_D_IN;
    if (hostchan_1_cf_verbosity_EN)
      hostchan_1_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  hostchan_1_cf_verbosity_D_IN;
    if (pktBuff_0_cf_verbosity_EN)
      pktBuff_0_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_0_cf_verbosity_D_IN;
    if (pktBuff_0_cf_verbosity_1_EN)
      pktBuff_0_cf_verbosity_1 <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_0_cf_verbosity_1_D_IN;
    if (pktBuff_1_cf_verbosity_EN)
      pktBuff_1_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_1_cf_verbosity_D_IN;
    if (pktBuff_1_cf_verbosity_1_EN)
      pktBuff_1_cf_verbosity_1 <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_1_cf_verbosity_1_D_IN;
    if (pktBuff_2_cf_verbosity_EN)
      pktBuff_2_cf_verbosity <= `BSV_ASSIGNMENT_DELAY
	  pktBuff_2_cf_verbosity_D_IN;
  end

  always@(posedge CLK_p0)
  begin
    if (RST_N_p1 == `BSV_RESET_VALUE)
      begin
        macToRing_0_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_0_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_0_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_0_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_0_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY 1'd0;
	macToRing_0_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY 1'd1;
	macToRing_0_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_0_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY 106'd0;
	macToRing_0_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY 1'd0;
	macToRing_1_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY 1'd1;
	macToRing_1_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	macToRing_1_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY 106'd0;
	macToRing_1_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (macToRing_0_data_bytes_EN)
	  macToRing_0_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_data_bytes_D_IN;
	if (macToRing_0_gearbox_data_bytes_EN)
	  macToRing_0_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_data_bytes_D_IN;
	if (macToRing_0_gearbox_eopCount_EN)
	  macToRing_0_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_eopCount_D_IN;
	if (macToRing_0_gearbox_idle_cycles_EN)
	  macToRing_0_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_idle_cycles_D_IN;
	if (macToRing_0_gearbox_inProgress_EN)
	  macToRing_0_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_inProgress_D_IN;
	if (macToRing_0_gearbox_oddBeat_EN)
	  macToRing_0_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_oddBeat_D_IN;
	if (macToRing_0_gearbox_sopCount_EN)
	  macToRing_0_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_sopCount_D_IN;
	if (macToRing_0_gearbox_v_prev_EN)
	  macToRing_0_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_gearbox_v_prev_D_IN;
	if (macToRing_0_total_cycles_EN)
	  macToRing_0_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_0_total_cycles_D_IN;
	if (macToRing_1_data_bytes_EN)
	  macToRing_1_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_data_bytes_D_IN;
	if (macToRing_1_gearbox_data_bytes_EN)
	  macToRing_1_gearbox_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_data_bytes_D_IN;
	if (macToRing_1_gearbox_eopCount_EN)
	  macToRing_1_gearbox_eopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_eopCount_D_IN;
	if (macToRing_1_gearbox_idle_cycles_EN)
	  macToRing_1_gearbox_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_idle_cycles_D_IN;
	if (macToRing_1_gearbox_inProgress_EN)
	  macToRing_1_gearbox_inProgress <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_inProgress_D_IN;
	if (macToRing_1_gearbox_oddBeat_EN)
	  macToRing_1_gearbox_oddBeat <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_oddBeat_D_IN;
	if (macToRing_1_gearbox_sopCount_EN)
	  macToRing_1_gearbox_sopCount <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_sopCount_D_IN;
	if (macToRing_1_gearbox_v_prev_EN)
	  macToRing_1_gearbox_v_prev <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_gearbox_v_prev_D_IN;
	if (macToRing_1_total_cycles_EN)
	  macToRing_1_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      macToRing_1_total_cycles_D_IN;
      end
  end

  always@(posedge CLK_p2)
  begin
    if (RST_N_p3 == `BSV_RESET_VALUE)
      begin
        ringToMac_0_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_0_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_0_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_0_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_0_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_data_bytes <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_eopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_1_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY 212'd0;
	ringToMac_1_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ringToMac_1_idle_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_sopCount <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ringToMac_1_total_cycles <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (ringToMac_0_data_bytes_EN)
	  ringToMac_0_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_data_bytes_D_IN;
	if (ringToMac_0_eopCount_EN)
	  ringToMac_0_eopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_eopCount_D_IN;
	if (ringToMac_0_fifoTxData_block0_EN)
	  ringToMac_0_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_block0_D_IN;
	if (ringToMac_0_fifoTxData_block0_status_EN)
	  ringToMac_0_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_block0_status_D_IN;
	if (ringToMac_0_fifoTxData_block1_EN)
	  ringToMac_0_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_block1_D_IN;
	if (ringToMac_0_fifoTxData_block1_status_EN)
	  ringToMac_0_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_block1_status_D_IN;
	if (ringToMac_0_fifoTxData_elem0_status_0_EN)
	  ringToMac_0_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_elem0_status_0_D_IN;
	if (ringToMac_0_fifoTxData_elem0_status_1_EN)
	  ringToMac_0_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_elem0_status_1_D_IN;
	if (ringToMac_0_fifoTxData_elem1_status_0_EN)
	  ringToMac_0_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_elem1_status_0_D_IN;
	if (ringToMac_0_fifoTxData_elem1_status_1_EN)
	  ringToMac_0_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_elem1_status_1_D_IN;
	if (ringToMac_0_fifoTxData_read_block_EN)
	  ringToMac_0_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_read_block_D_IN;
	if (ringToMac_0_fifoTxData_write_block_EN)
	  ringToMac_0_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_fifoTxData_write_block_D_IN;
	if (ringToMac_0_idle_cycles_EN)
	  ringToMac_0_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_idle_cycles_D_IN;
	if (ringToMac_0_sopCount_EN)
	  ringToMac_0_sopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_sopCount_D_IN;
	if (ringToMac_0_total_cycles_EN)
	  ringToMac_0_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_0_total_cycles_D_IN;
	if (ringToMac_1_data_bytes_EN)
	  ringToMac_1_data_bytes <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_data_bytes_D_IN;
	if (ringToMac_1_eopCount_EN)
	  ringToMac_1_eopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_eopCount_D_IN;
	if (ringToMac_1_fifoTxData_block0_EN)
	  ringToMac_1_fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_block0_D_IN;
	if (ringToMac_1_fifoTxData_block0_status_EN)
	  ringToMac_1_fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_block0_status_D_IN;
	if (ringToMac_1_fifoTxData_block1_EN)
	  ringToMac_1_fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_block1_D_IN;
	if (ringToMac_1_fifoTxData_block1_status_EN)
	  ringToMac_1_fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_block1_status_D_IN;
	if (ringToMac_1_fifoTxData_elem0_status_0_EN)
	  ringToMac_1_fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_elem0_status_0_D_IN;
	if (ringToMac_1_fifoTxData_elem0_status_1_EN)
	  ringToMac_1_fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_elem0_status_1_D_IN;
	if (ringToMac_1_fifoTxData_elem1_status_0_EN)
	  ringToMac_1_fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_elem1_status_0_D_IN;
	if (ringToMac_1_fifoTxData_elem1_status_1_EN)
	  ringToMac_1_fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_elem1_status_1_D_IN;
	if (ringToMac_1_fifoTxData_read_block_EN)
	  ringToMac_1_fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_read_block_D_IN;
	if (ringToMac_1_fifoTxData_write_block_EN)
	  ringToMac_1_fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_fifoTxData_write_block_D_IN;
	if (ringToMac_1_idle_cycles_EN)
	  ringToMac_1_idle_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_idle_cycles_D_IN;
	if (ringToMac_1_sopCount_EN)
	  ringToMac_1_sopCount <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_sopCount_D_IN;
	if (ringToMac_1_total_cycles_EN)
	  ringToMac_1_total_cycles <= `BSV_ASSIGNMENT_DELAY
	      ringToMac_1_total_cycles_D_IN;
      end
  end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_0_fifoTxData_dCombinedReset_RST_OUT)
  if (ringToMac_0_fifoTxData_dCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_0_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_0_fifoTxData_dInReset_pre_isInReset_EN)
	ringToMac_0_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_0_fifoTxData_dInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_0_fifoTxData_sCombinedReset_RST_OUT)
  if (ringToMac_0_fifoTxData_sCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_0_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_0_fifoTxData_sInReset_pre_isInReset_EN)
	ringToMac_0_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_0_fifoTxData_sInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_1_fifoTxData_dCombinedReset_RST_OUT)
  if (ringToMac_1_fifoTxData_dCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_1_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_1_fifoTxData_dInReset_pre_isInReset_EN)
	ringToMac_1_fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_1_fifoTxData_dInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK_p2 or
	  `BSV_RESET_EDGE ringToMac_1_fifoTxData_sCombinedReset_RST_OUT)
  if (ringToMac_1_fifoTxData_sCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      ringToMac_1_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
    end
  else
    begin
      if (ringToMac_1_fifoTxData_sInReset_pre_isInReset_EN)
	ringToMac_1_fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    ringToMac_1_fifoTxData_sInReset_pre_isInReset_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cf_verbosity = 32'hAAAAAAAA;
    cf_verbosity_0 = 32'hAAAAAAAA;
    cf_verbosity_0_1 = 32'hAAAAAAAA;
    cf_verbosity_0_2 = 32'hAAAAAAAA;
    cf_verbosity_0_3 = 32'hAAAAAAAA;
    cf_verbosity_1 = 32'hAAAAAAAA;
    cf_verbosity_1_1 = 32'hAAAAAAAA;
    cf_verbosity_1_2 = 32'hAAAAAAAA;
    cf_verbosity_2 = 32'hAAAAAAAA;
    hostchan_0_cf_verbosity = 32'hAAAAAAAA;
    hostchan_0_readStarted = 1'h0;
    hostchan_1_cf_verbosity = 32'hAAAAAAAA;
    hostchan_1_readStarted = 1'h0;
    macToRing_0_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_0_gearbox_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_0_gearbox_eopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_0_gearbox_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_0_gearbox_inProgress = 1'h0;
    macToRing_0_gearbox_oddBeat = 1'h0;
    macToRing_0_gearbox_sopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_0_gearbox_v_prev = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    macToRing_0_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_gearbox_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_gearbox_eopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_gearbox_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_gearbox_inProgress = 1'h0;
    macToRing_1_gearbox_oddBeat = 1'h0;
    macToRing_1_gearbox_sopCount = 64'hAAAAAAAAAAAAAAAA;
    macToRing_1_gearbox_v_prev = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    macToRing_1_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_0_cf_verbosity = 32'hAAAAAAAA;
    pktBuff_0_cf_verbosity_1 = 32'hAAAAAAAA;
    pktBuff_0_eopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_0_eopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_0_inPacket = 1'h0;
    pktBuff_0_memBuffer_serverAdapterA_cnt = 3'h2;
    pktBuff_0_memBuffer_serverAdapterA_s1 = 2'h2;
    pktBuff_0_memBuffer_serverAdapterA_s2 = 2'h2;
    pktBuff_0_memBuffer_serverAdapterB_cnt = 3'h2;
    pktBuff_0_memBuffer_serverAdapterB_s1 = 2'h2;
    pktBuff_0_memBuffer_serverAdapterB_s2 = 2'h2;
    pktBuff_0_outPacket = 1'h0;
    pktBuff_0_packetLen = 16'hAAAA;
    pktBuff_0_rdCurrPtr = 8'hAA;
    pktBuff_0_readStarted = 1'h0;
    pktBuff_0_sopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_0_sopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_0_wrCurrPtr = 8'hAA;
    pktBuff_1_cf_verbosity = 32'hAAAAAAAA;
    pktBuff_1_cf_verbosity_1 = 32'hAAAAAAAA;
    pktBuff_1_eopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_1_eopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_1_inPacket = 1'h0;
    pktBuff_1_memBuffer_serverAdapterA_cnt = 3'h2;
    pktBuff_1_memBuffer_serverAdapterA_s1 = 2'h2;
    pktBuff_1_memBuffer_serverAdapterA_s2 = 2'h2;
    pktBuff_1_memBuffer_serverAdapterB_cnt = 3'h2;
    pktBuff_1_memBuffer_serverAdapterB_s1 = 2'h2;
    pktBuff_1_memBuffer_serverAdapterB_s2 = 2'h2;
    pktBuff_1_outPacket = 1'h0;
    pktBuff_1_packetLen = 16'hAAAA;
    pktBuff_1_rdCurrPtr = 8'hAA;
    pktBuff_1_readStarted = 1'h0;
    pktBuff_1_sopDeq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_1_sopEnq = 64'hAAAAAAAAAAAAAAAA;
    pktBuff_1_wrCurrPtr = 8'hAA;
    pktBuff_2_cf_verbosity = 32'hAAAAAAAA;
    pktBuff_2_readStarted = 1'h0;
    readStarted_0 = 1'h0;
    ringToMac_0_cycle_cnt = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_eopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_fifoTxData_block0 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_0_fifoTxData_block0_status = 1'h0;
    ringToMac_0_fifoTxData_block1 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_0_fifoTxData_block1_status = 1'h0;
    ringToMac_0_fifoTxData_dInReset_pre_isInReset = 1'h0;
    ringToMac_0_fifoTxData_elem0_status_0 = 1'h0;
    ringToMac_0_fifoTxData_elem0_status_1 = 1'h0;
    ringToMac_0_fifoTxData_elem1_status_0 = 1'h0;
    ringToMac_0_fifoTxData_elem1_status_1 = 1'h0;
    ringToMac_0_fifoTxData_read_block = 1'h0;
    ringToMac_0_fifoTxData_sInReset_pre_isInReset = 1'h0;
    ringToMac_0_fifoTxData_write_block = 1'h0;
    ringToMac_0_goodputCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_idleCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_last_endofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_last_startofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_sopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_0_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_cycle_cnt = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_data_bytes = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_eopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_fifoTxData_block0 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_1_fifoTxData_block0_status = 1'h0;
    ringToMac_1_fifoTxData_block1 =
	212'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ringToMac_1_fifoTxData_block1_status = 1'h0;
    ringToMac_1_fifoTxData_dInReset_pre_isInReset = 1'h0;
    ringToMac_1_fifoTxData_elem0_status_0 = 1'h0;
    ringToMac_1_fifoTxData_elem0_status_1 = 1'h0;
    ringToMac_1_fifoTxData_elem1_status_0 = 1'h0;
    ringToMac_1_fifoTxData_elem1_status_1 = 1'h0;
    ringToMac_1_fifoTxData_read_block = 1'h0;
    ringToMac_1_fifoTxData_sInReset_pre_isInReset = 1'h0;
    ringToMac_1_fifoTxData_write_block = 1'h0;
    ringToMac_1_goodputCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_idleCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_idle_cycles = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_last_endofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_last_startofpacket = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_sopCount = 64'hAAAAAAAAAAAAAAAA;
    ringToMac_1_total_cycles = 64'hAAAAAAAAAAAAAAAA;
    xbar_lower_merges_1_fi0HasPrio = 1'h0;
    xbar_lower_merges_1_routeFrom = 2'h2;
    xbar_lower_merges_fi0HasPrio = 1'h0;
    xbar_lower_merges_routeFrom = 2'h2;
    xbar_merges_1_fi0HasPrio = 1'h0;
    xbar_merges_1_routeFrom = 2'h2;
    xbar_merges_2_fi0HasPrio = 1'h0;
    xbar_merges_2_routeFrom = 2'h2;
    xbar_merges_3_fi0HasPrio = 1'h0;
    xbar_merges_3_routeFrom = 2'h2;
    xbar_merges_fi0HasPrio = 1'h0;
    xbar_merges_routeFrom = 2'h2;
    xbar_upper_merges_1_fi0HasPrio = 1'h0;
    xbar_upper_merges_1_routeFrom = 2'h2;
    xbar_upper_merges_fi0HasPrio = 1'h0;
    xbar_upper_merges_routeFrom = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (EN_set_verbosity)
	begin
	  v__h113231 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (EN_set_verbosity)
	$display("(%0d) set verbosity to %d",
		 v__h113231,
		 $signed(set_verbosity_verbosity));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	begin
	  v___1__h100946 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write("(%0d) ", v___1__h100946);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write(" data=0x%x",
	       output_queues_0_readServer_readData_get[577:66],
	       " mask=0x%x",
	       output_queues_0_readServer_readData_get[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write(" user=0x%x",
	       output_queues_0_readServer_readData_get[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write(" sop=%d", output_queues_0_readServer_readData_get[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write(" eop=%d", output_queues_0_readServer_readData_get[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_0_RDY_readServer_readData_get)
	$write(" > /dev/null", "\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_3_RDY_readServer_readData_get)
	begin
	  v___1__h101203 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_3_RDY_readServer_readData_get)
	$write("(%0d) ", v___1__h101203);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_3_RDY_readServer_readData_get)
	$write(" data=0x%x",
	       output_queues_3_readServer_readData_get[577:66],
	       " mask=0x%x",
	       output_queues_3_readServer_readData_get[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_3_RDY_readServer_readData_get)
	$write(" user=0x%x",
	       output_queues_3_readServer_readData_get[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_3_RDY_readServer_readData_get)
	$write(" sop=%d", output_queues_3_readServer_readData_get[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_3_RDY_readServer_readData_get)
	$write(" eop=%d", output_queues_3_readServer_readData_get[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (output_queues_3_RDY_readServer_readData_get)
	$write(" > /dev/null", "\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_0_memBuffer_serverAdapterA_s2[1] &&
	  !pktBuff_0_memBuffer_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_0_memBuffer_serverAdapterB_s2[1] &&
	  !pktBuff_0_memBuffer_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_1_memBuffer_serverAdapterA_s2[1] &&
	  !pktBuff_1_memBuffer_serverAdapterA_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (pktBuff_1_memBuffer_serverAdapterB_s2[1] &&
	  !pktBuff_1_memBuffer_serverAdapterB_outDataCore_FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	begin
	  v__h83030 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h83030,
	       xbar_upper_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_routeFrom[0] ?
		 xbar_upper_merges_fi1_D_OUT[577:66] :
		 xbar_upper_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_routeFrom[0] ?
		 xbar_upper_merges_fi1_D_OUT[65:2] :
		 xbar_upper_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_routeFrom[0] ?
		 xbar_upper_merges_fi1_D_OUT[609:578] :
		 xbar_upper_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_merges_routeFrom[0] ?
		 xbar_upper_merges_fi1_D_OUT[1] :
		 xbar_upper_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_routeFrom_219_BIT_0_221_T_ETC___d2252);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  xbar_upper_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	begin
	  v__h83097 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h83097);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_fi0HasPrio ?
		 xbar_upper_merges_fi0_D_OUT[577:66] :
		 xbar_upper_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_fi0HasPrio ?
		 xbar_upper_merges_fi0_D_OUT[65:2] :
		 xbar_upper_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_fi0HasPrio ?
		 xbar_upper_merges_fi0_D_OUT[609:578] :
		 xbar_upper_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2245);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_fi0HasPrio_224_THEN_xbar__ETC___d2262);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_both_have_data &&
	  !xbar_upper_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	begin
	  v__h84077 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h84077,
	       xbar_upper_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_1_routeFrom[0] ?
		 xbar_upper_merges_1_fi1_D_OUT[577:66] :
		 xbar_upper_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_1_routeFrom[0] ?
		 xbar_upper_merges_1_fi1_D_OUT[65:2] :
		 xbar_upper_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_1_routeFrom[0] ?
		 xbar_upper_merges_1_fi1_D_OUT[609:578] :
		 xbar_upper_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_upper_merges_1_routeFrom[0] ?
		 xbar_upper_merges_1_fi1_D_OUT[1] :
		 xbar_upper_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_1_routeFrom_294_BIT_0_296_ETC___d2327);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  xbar_upper_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	begin
	  v__h84143 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h84143);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_upper_merges_1_fi0HasPrio ?
		 xbar_upper_merges_1_fi0_D_OUT[577:66] :
		 xbar_upper_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_upper_merges_1_fi0HasPrio ?
		 xbar_upper_merges_1_fi0_D_OUT[65:2] :
		 xbar_upper_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_upper_merges_1_fi0HasPrio ?
		 xbar_upper_merges_1_fi0_D_OUT[609:578] :
		 xbar_upper_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2320);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_upper_merges_1_fi0HasPrio_299_THEN_xba_ETC___d2337);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_merges_1_both_have_data &&
	  !xbar_upper_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route)
	$display("%x %x %d",
		 xbar_upper_upper_f_D_OUT[609:578],
		 32'd0,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route && xbar_upper_upper_f_D_OUT[578])
	begin
	  v__h84785 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route && xbar_upper_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h84785,
		 $signed(32'd1),
		 xbar_upper_upper_f_D_OUT[578],
		 xbar_upper_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route && !xbar_upper_upper_f_D_OUT[578])
	begin
	  v__h84726 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route && !xbar_upper_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h84726,
		 $signed(32'd0),
		 xbar_upper_upper_f_D_OUT[578],
		 xbar_upper_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_1)
	$display("%x %x %d",
		 xbar_upper_lower_f_D_OUT[609:578],
		 32'd1,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_1 && xbar_upper_lower_f_D_OUT[578])
	begin
	  v__h85142 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_1 && xbar_upper_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h85142,
		 $signed(32'd1),
		 !xbar_upper_lower_f_D_OUT[578],
		 xbar_upper_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_1 && !xbar_upper_lower_f_D_OUT[578])
	begin
	  v__h85195 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_upper_route_1 && !xbar_upper_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h85195,
		 $signed(32'd0),
		 !xbar_upper_lower_f_D_OUT[578],
		 xbar_upper_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	begin
	  v__h86237 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h86237,
	       xbar_lower_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_routeFrom[0] ?
		 xbar_lower_merges_fi1_D_OUT[577:66] :
		 xbar_lower_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_routeFrom[0] ?
		 xbar_lower_merges_fi1_D_OUT[65:2] :
		 xbar_lower_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_routeFrom[0] ?
		 xbar_lower_merges_fi1_D_OUT[609:578] :
		 xbar_lower_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_merges_routeFrom[0] ?
		 xbar_lower_merges_fi1_D_OUT[1] :
		 xbar_lower_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_routeFrom_393_BIT_0_395_T_ETC___d2426);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  xbar_lower_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	begin
	  v__h86303 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h86303);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_fi0HasPrio ?
		 xbar_lower_merges_fi0_D_OUT[577:66] :
		 xbar_lower_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_fi0HasPrio ?
		 xbar_lower_merges_fi0_D_OUT[65:2] :
		 xbar_lower_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_fi0HasPrio ?
		 xbar_lower_merges_fi0_D_OUT[609:578] :
		 xbar_lower_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2419);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_fi0HasPrio_398_THEN_xbar__ETC___d2436);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_both_have_data &&
	  !xbar_lower_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	begin
	  v__h87283 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ",
	       v__h87283,
	       xbar_lower_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_1_routeFrom[0] ?
		 xbar_lower_merges_1_fi1_D_OUT[577:66] :
		 xbar_lower_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_1_routeFrom[0] ?
		 xbar_lower_merges_1_fi1_D_OUT[65:2] :
		 xbar_lower_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_1_routeFrom[0] ?
		 xbar_lower_merges_1_fi1_D_OUT[609:578] :
		 xbar_lower_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_lower_merges_1_routeFrom[0] ?
		 xbar_lower_merges_1_fi1_D_OUT[1] :
		 xbar_lower_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_1_routeFrom_468_BIT_0_470_ETC___d2501);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  xbar_lower_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	begin
	  v__h87349 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h87349);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_lower_merges_1_fi0HasPrio ?
		 xbar_lower_merges_1_fi0_D_OUT[577:66] :
		 xbar_lower_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_lower_merges_1_fi0HasPrio ?
		 xbar_lower_merges_1_fi0_D_OUT[65:2] :
		 xbar_lower_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_lower_merges_1_fi0HasPrio ?
		 xbar_lower_merges_1_fi0_D_OUT[609:578] :
		 xbar_lower_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2494);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_lower_merges_1_fi0HasPrio_473_THEN_xba_ETC___d2511);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_merges_1_both_have_data &&
	  !xbar_lower_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route)
	$display("%x %x %d",
		 xbar_lower_upper_f_D_OUT[609:578],
		 32'd0,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route && xbar_lower_upper_f_D_OUT[578])
	begin
	  v__h87991 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route && xbar_lower_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h87991,
		 $signed(32'd1),
		 xbar_lower_upper_f_D_OUT[578],
		 xbar_lower_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route && !xbar_lower_upper_f_D_OUT[578])
	begin
	  v__h87932 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route && !xbar_lower_upper_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h87932,
		 $signed(32'd0),
		 xbar_lower_upper_f_D_OUT[578],
		 xbar_lower_upper_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_1)
	$display("%x %x %d",
		 xbar_lower_lower_f_D_OUT[609:578],
		 32'd1,
		 $signed(32'd1));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_1 && xbar_lower_lower_f_D_OUT[578])
	begin
	  v__h88348 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_1 && xbar_lower_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h88348,
		 $signed(32'd1),
		 !xbar_lower_lower_f_D_OUT[578],
		 xbar_lower_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_1 && !xbar_lower_lower_f_D_OUT[578])
	begin
	  v__h88401 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_lower_route_1 && !xbar_lower_lower_f_D_OUT[578])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h88401,
		 $signed(32'd0),
		 !xbar_lower_lower_f_D_OUT[578],
		 xbar_lower_lower_f_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	begin
	  v__h89205 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write("(%0d) both avail %d ", v__h89205, xbar_merges_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_routeFrom[0] ?
		 xbar_merges_fi1_D_OUT[577:66] :
		 xbar_merges_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_routeFrom[0] ?
		 xbar_merges_fi1_D_OUT[65:2] :
		 xbar_merges_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_routeFrom[0] ?
		 xbar_merges_fi1_D_OUT[609:578] :
		 xbar_merges_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_routeFrom[0] ?
		 xbar_merges_fi1_D_OUT[1] :
		 xbar_merges_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_routeFrom_565_BIT_0_567_THEN_xb_ETC___d2598);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data && xbar_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	begin
	  v__h89271 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write("(%0d) both avail ", v__h89271);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_fi0HasPrio ?
		 xbar_merges_fi0_D_OUT[577:66] :
		 xbar_merges_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_fi0HasPrio ?
		 xbar_merges_fi0_D_OUT[65:2] :
		 xbar_merges_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_fi0HasPrio ?
		 xbar_merges_fi0_D_OUT[609:578] :
		 xbar_merges_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2591);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_fi0HasPrio_570_THEN_xbar_merges_ETC___d2608);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_both_have_data &&
	  !xbar_merges_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	begin
	  v__h90251 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write("(%0d) both avail %d ", v__h90251, xbar_merges_1_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_1_routeFrom[0] ?
		 xbar_merges_1_fi1_D_OUT[577:66] :
		 xbar_merges_1_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_1_routeFrom[0] ?
		 xbar_merges_1_fi1_D_OUT[65:2] :
		 xbar_merges_1_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_1_routeFrom[0] ?
		 xbar_merges_1_fi1_D_OUT[609:578] :
		 xbar_merges_1_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_1_routeFrom[0] ?
		 xbar_merges_1_fi1_D_OUT[1] :
		 xbar_merges_1_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_1_routeFrom_640_BIT_0_642_THEN__ETC___d2673);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  xbar_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	begin
	  v__h90317 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write("(%0d) both avail ", v__h90317);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_1_fi0HasPrio ?
		 xbar_merges_1_fi0_D_OUT[577:66] :
		 xbar_merges_1_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_1_fi0HasPrio ?
		 xbar_merges_1_fi0_D_OUT[65:2] :
		 xbar_merges_1_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_1_fi0HasPrio ?
		 xbar_merges_1_fi0_D_OUT[609:578] :
		 xbar_merges_1_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2666);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_1_fi0HasPrio_645_THEN_xbar_merg_ETC___d2683);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_1_both_have_data &&
	  !xbar_merges_1_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	begin
	  v__h91297 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write("(%0d) both avail %d ", v__h91297, xbar_merges_2_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_2_routeFrom[0] ?
		 xbar_merges_2_fi1_D_OUT[577:66] :
		 xbar_merges_2_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_2_routeFrom[0] ?
		 xbar_merges_2_fi1_D_OUT[65:2] :
		 xbar_merges_2_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_2_routeFrom[0] ?
		 xbar_merges_2_fi1_D_OUT[609:578] :
		 xbar_merges_2_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_2_routeFrom[0] ?
		 xbar_merges_2_fi1_D_OUT[1] :
		 xbar_merges_2_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_2_routeFrom_715_BIT_0_717_THEN__ETC___d2748);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  xbar_merges_2_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	begin
	  v__h91363 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write("(%0d) both avail ", v__h91363);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_2_fi0HasPrio ?
		 xbar_merges_2_fi0_D_OUT[577:66] :
		 xbar_merges_2_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_2_fi0HasPrio ?
		 xbar_merges_2_fi0_D_OUT[65:2] :
		 xbar_merges_2_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_2_fi0HasPrio ?
		 xbar_merges_2_fi0_D_OUT[609:578] :
		 xbar_merges_2_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2741);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_2_fi0HasPrio_720_THEN_xbar_merg_ETC___d2758);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_2_both_have_data &&
	  !xbar_merges_2_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route)
	$display("%x %x %d",
		 xbar_upper_merges_fo_D_OUT[609:578],
		 32'd0,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route && xbar_upper_merges_fo_D_OUT[579])
	begin
	  v__h93082 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route && xbar_upper_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h93082,
		 $signed(32'd2),
		 xbar_upper_merges_fo_D_OUT[579],
		 xbar_upper_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route && !xbar_upper_merges_fo_D_OUT[579])
	begin
	  v__h93023 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route && !xbar_upper_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h93023,
		 $signed(32'd0),
		 xbar_upper_merges_fo_D_OUT[579],
		 xbar_upper_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_2)
	$display("%x %x %d",
		 xbar_lower_merges_fo_D_OUT[609:578],
		 32'd2,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_2 && xbar_lower_merges_fo_D_OUT[579])
	begin
	  v__h93904 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_2 && xbar_lower_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h93904,
		 $signed(32'd2),
		 !xbar_lower_merges_fo_D_OUT[579],
		 xbar_lower_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_2 && !xbar_lower_merges_fo_D_OUT[579])
	begin
	  v__h93957 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_2 && !xbar_lower_merges_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h93957,
		 $signed(32'd0),
		 !xbar_lower_merges_fo_D_OUT[579],
		 xbar_lower_merges_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	begin
	  v__h92343 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write("(%0d) both avail %d ", v__h92343, xbar_merges_3_routeFrom[0]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_3_routeFrom[0] ?
		 xbar_merges_3_fi1_D_OUT[577:66] :
		 xbar_merges_3_fi0_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_3_routeFrom[0] ?
		 xbar_merges_3_fi1_D_OUT[65:2] :
		 xbar_merges_3_fi0_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_3_routeFrom[0] ?
		 xbar_merges_3_fi1_D_OUT[609:578] :
		 xbar_merges_3_fi0_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write(" sop=%d",
	       xbar_merges_3_routeFrom[0] ?
		 xbar_merges_3_fi1_D_OUT[1] :
		 xbar_merges_3_fi0_D_OUT[1]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_3_routeFrom_790_BIT_0_792_THEN__ETC___d2823);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  xbar_merges_3_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	begin
	  v__h92409 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write("(%0d) both avail ", v__h92409);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write(" data=0x%x",
	       xbar_merges_3_fi0HasPrio ?
		 xbar_merges_3_fi0_D_OUT[577:66] :
		 xbar_merges_3_fi1_D_OUT[577:66],
	       " mask=0x%x",
	       xbar_merges_3_fi0HasPrio ?
		 xbar_merges_3_fi0_D_OUT[65:2] :
		 xbar_merges_3_fi1_D_OUT[65:2]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write(" user=0x%x",
	       xbar_merges_3_fi0HasPrio ?
		 xbar_merges_3_fi0_D_OUT[609:578] :
		 xbar_merges_3_fi1_D_OUT[609:578]);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write(" sop=%d",
	       IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2816);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write(" eop=%d",
	       IF_xbar_merges_3_fi0HasPrio_795_THEN_xbar_merg_ETC___d2833);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_merges_3_both_have_data &&
	  !xbar_merges_3_routeFrom[1])
	$write("\n");
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_1)
	$display("%x %x %d",
		 xbar_upper_merges_1_fo_D_OUT[609:578],
		 32'd1,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_1 && xbar_upper_merges_1_fo_D_OUT[579])
	begin
	  v__h93510 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_1 && xbar_upper_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h93510,
		 $signed(32'd3),
		 xbar_upper_merges_1_fo_D_OUT[579],
		 xbar_upper_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_1 && !xbar_upper_merges_1_fo_D_OUT[579])
	begin
	  v__h93456 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_1 && !xbar_upper_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h93456,
		 $signed(32'd1),
		 xbar_upper_merges_1_fo_D_OUT[579],
		 xbar_upper_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_3)
	$display("%x %x %d",
		 xbar_lower_merges_1_fo_D_OUT[609:578],
		 32'd3,
		 $signed(32'd2));
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_3 && xbar_lower_merges_1_fo_D_OUT[579])
	begin
	  v__h94330 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_3 && xbar_lower_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h94330,
		 $signed(32'd3),
		 !xbar_lower_merges_1_fo_D_OUT[579],
		 xbar_lower_merges_1_fo_D_OUT);
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_3 && !xbar_lower_merges_1_fo_D_OUT[579])
	begin
	  v__h94383 = $time;
	  #0;
	end
    if (localReset_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_xbar_route_3 && !xbar_lower_merges_1_fo_D_OUT[579])
	$display("(%0d) XBar out =%0d flip=%d %h",
		 v__h94383,
		 $signed(32'd1),
		 !xbar_lower_merges_1_fo_D_OUT[579],
		 xbar_lower_merges_1_fo_D_OUT);
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge CLK_p0)
  begin
    #0;
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_0_writeData &&
	  macToRing_0_gearbox_out_ff_D_OUT[1])
	begin
	  v__h11023 = $time;
	  #0;
	end
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_0_writeData &&
	  macToRing_0_gearbox_out_ff_D_OUT[1])
	$display("(%0d) packet_in: Rx MAC", v__h11023);
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_1_writeData &&
	  macToRing_1_gearbox_out_ff_D_OUT[1])
	begin
	  v__h18017 = $time;
	  #0;
	end
    if (RST_N_p1 != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macToRing_1_writeData &&
	  macToRing_1_gearbox_out_ff_D_OUT[1])
	$display("(%0d) packet_in: Rx MAC", v__h18017);
  end
  // synopsys translate_on
endmodule  // mkRuntime_2_2_1

