//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Wed May 31 23:19:35 CST 2017
//
// BVI format method schedule info:
// schedule metadata_enq  CF ( writeServer_enq,
// 			    writeServer_notFull,
// 			    writeClient_first,
// 			    writeClient_deq,
// 			    writeClient_notEmpty,
// 			    set_verbosity,
// 			    read_perf_info );
// schedule metadata_enq  C ( metadata_enq );
//
// schedule metadata_notFull  CF ( metadata_notFull,
// 				writeServer_enq,
// 				writeServer_notFull,
// 				writeClient_first,
// 				writeClient_deq,
// 				writeClient_notEmpty,
// 				set_verbosity,
// 				read_perf_info );
// schedule metadata_notFull  SB ( metadata_enq );
//
// schedule writeServer_enq  CF ( metadata_enq,
// 			       metadata_notFull,
// 			       writeClient_first,
// 			       writeClient_deq,
// 			       writeClient_notEmpty,
// 			       set_verbosity,
// 			       read_perf_info );
// schedule writeServer_enq  C ( writeServer_enq );
//
// schedule writeServer_notFull  CF ( metadata_enq,
// 				   metadata_notFull,
// 				   writeServer_notFull,
// 				   writeClient_first,
// 				   writeClient_deq,
// 				   writeClient_notEmpty,
// 				   set_verbosity,
// 				   read_perf_info );
// schedule writeServer_notFull  SB ( writeServer_enq );
//
// schedule writeClient_first  CF ( metadata_enq,
// 				 metadata_notFull,
// 				 writeServer_enq,
// 				 writeServer_notFull,
// 				 writeClient_first,
// 				 writeClient_notEmpty,
// 				 set_verbosity,
// 				 read_perf_info );
// schedule writeClient_first  SB ( writeClient_deq );
//
// schedule writeClient_deq  CF ( metadata_enq,
// 			       metadata_notFull,
// 			       writeServer_enq,
// 			       writeServer_notFull,
// 			       set_verbosity,
// 			       read_perf_info );
// schedule writeClient_deq  C ( writeClient_deq );
//
// schedule writeClient_notEmpty  CF ( metadata_enq,
// 				    metadata_notFull,
// 				    writeServer_enq,
// 				    writeServer_notFull,
// 				    writeClient_first,
// 				    writeClient_notEmpty,
// 				    set_verbosity,
// 				    read_perf_info );
// schedule writeClient_notEmpty  SB ( writeClient_deq );
//
// schedule set_verbosity  CF ( metadata_enq,
// 			     metadata_notFull,
// 			     writeServer_enq,
// 			     writeServer_notFull,
// 			     writeClient_first,
// 			     writeClient_deq,
// 			     writeClient_notEmpty,
// 			     read_perf_info );
// schedule set_verbosity  SBR ( set_verbosity );
//
// schedule read_perf_info  CF ( metadata_enq,
// 			      metadata_notFull,
// 			      writeServer_enq,
// 			      writeServer_notFull,
// 			      writeClient_first,
// 			      writeClient_deq,
// 			      writeClient_notEmpty,
// 			      set_verbosity,
// 			      read_perf_info );
//
//
// Ports:
// Name                         I/O  size props
// RDY_metadata_enq               O     1 reg
// metadata_notFull               O     1 reg
// RDY_metadata_notFull           O     1 const
// RDY_writeServer_enq            O     1 reg
// writeServer_notFull            O     1 reg
// RDY_writeServer_notFull        O     1 const
// writeClient_first              O   178 reg
// RDY_writeClient_first          O     1 reg
// RDY_writeClient_deq            O     1 reg
// writeClient_notEmpty           O     1 reg
// RDY_writeClient_notEmpty       O     1 const
// RDY_set_verbosity              O     1 const
// read_perf_info                 O    64 const
// RDY_read_perf_info             O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// metadata_enq_v                 I   761 reg
// writeServer_enq_v              I   178 reg
// set_verbosity_verbosity        I    32 reg
// EN_metadata_enq                I     1
// EN_writeServer_enq             I     1
// EN_writeClient_deq             I     1
// EN_set_verbosity               I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDeparser(CLK,
		  RST_N,

		  metadata_enq_v,
		  EN_metadata_enq,
		  RDY_metadata_enq,

		  metadata_notFull,
		  RDY_metadata_notFull,

		  writeServer_enq_v,
		  EN_writeServer_enq,
		  RDY_writeServer_enq,

		  writeServer_notFull,
		  RDY_writeServer_notFull,

		  writeClient_first,
		  RDY_writeClient_first,

		  EN_writeClient_deq,
		  RDY_writeClient_deq,

		  writeClient_notEmpty,
		  RDY_writeClient_notEmpty,

		  set_verbosity_verbosity,
		  EN_set_verbosity,
		  RDY_set_verbosity,

		  read_perf_info,
		  RDY_read_perf_info);
  input  CLK;
  input  RST_N;

  // action method metadata_enq
  input  [760 : 0] metadata_enq_v;
  input  EN_metadata_enq;
  output RDY_metadata_enq;

  // value method metadata_notFull
  output metadata_notFull;
  output RDY_metadata_notFull;

  // action method writeServer_enq
  input  [177 : 0] writeServer_enq_v;
  input  EN_writeServer_enq;
  output RDY_writeServer_enq;

  // value method writeServer_notFull
  output writeServer_notFull;
  output RDY_writeServer_notFull;

  // value method writeClient_first
  output [177 : 0] writeClient_first;
  output RDY_writeClient_first;

  // action method writeClient_deq
  input  EN_writeClient_deq;
  output RDY_writeClient_deq;

  // value method writeClient_notEmpty
  output writeClient_notEmpty;
  output RDY_writeClient_notEmpty;

  // action method set_verbosity
  input  [31 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // value method read_perf_info
  output [63 : 0] read_perf_info;
  output RDY_read_perf_info;

  // signals for module outputs
  wire [177 : 0] writeClient_first;
  wire [63 : 0] read_perf_info;
  wire RDY_metadata_enq,
       RDY_metadata_notFull,
       RDY_read_perf_info,
       RDY_set_verbosity,
       RDY_writeClient_deq,
       RDY_writeClient_first,
       RDY_writeClient_notEmpty,
       RDY_writeServer_enq,
       RDY_writeServer_notFull,
       metadata_notFull,
       writeClient_notEmpty,
       writeServer_notFull;

  // inlined wires
  reg [511 : 0] rg_tmp_port0__write_1;
  reg [9 : 0] rg_buffered_port0__write_1,
	      rg_next_header_len_port0__write_1,
	      rg_processed_port0__write_1;
  wire [760 : 0] meta_port0__write_1, meta_port1__read, meta_port2__read;
  wire [511 : 0] rg_tmp_port1__read;
  wire [9 : 0] rg_buffered_port1__read, rg_next_header_len_port1__read;
  wire [2 : 0] deparse_state_ff_rv_port1__read,
	       deparse_state_ff_rv_port1__write_1,
	       deparse_state_ff_rv_port2__read;
  wire deparse_done_EN_port1__write,
       deparse_done_port2__read,
       deparse_state_ff_rv_EN_port0__write,
       deparse_state_ff_rv_EN_port1__write,
       header_done_port1__read,
       header_done_port2__read,
       meta_EN_port0__write,
       rg_buffered_EN_port0__write,
       rg_next_header_len_EN_port0__write,
       rg_processed_EN_port0__write,
       rg_tmp_EN_port0__write,
       w_ethernet_whas,
       w_ipv4_whas;

  // register cf_verbosity
  reg [31 : 0] cf_verbosity;
  wire [31 : 0] cf_verbosity_D_IN;
  wire cf_verbosity_EN;

  // register data_in_tmp
  reg [177 : 0] data_in_tmp;
  wire [177 : 0] data_in_tmp_D_IN;
  wire data_in_tmp_EN;

  // register data_valid
  reg data_valid;
  wire data_valid_D_IN, data_valid_EN;

  // register deparse_done
  reg deparse_done;
  wire deparse_done_D_IN, deparse_done_EN;

  // register deparse_send_r
  reg [177 : 0] deparse_send_r;
  reg [177 : 0] deparse_send_r_D_IN;
  wire deparse_send_r_EN;

  // register deparse_state_ff_rv
  reg [2 : 0] deparse_state_ff_rv;
  wire [2 : 0] deparse_state_ff_rv_D_IN;
  wire deparse_state_ff_rv_EN;

  // register header_done
  reg header_done;
  wire header_done_D_IN, header_done_EN;

  // register meta
  reg [760 : 0] meta;
  wire [760 : 0] meta_D_IN;
  wire meta_EN;

  // register rg_buffered
  reg [9 : 0] rg_buffered;
  wire [9 : 0] rg_buffered_D_IN;
  wire rg_buffered_EN;

  // register rg_next_header_len
  reg [9 : 0] rg_next_header_len;
  wire [9 : 0] rg_next_header_len_D_IN;
  wire rg_next_header_len_EN;

  // register rg_processed
  reg [9 : 0] rg_processed;
  wire [9 : 0] rg_processed_D_IN;
  wire rg_processed_EN;

  // register rg_tmp
  reg [511 : 0] rg_tmp;
  wire [511 : 0] rg_tmp_D_IN;
  wire rg_tmp_EN;

  // ports of submodule data_in_ff
  wire [177 : 0] data_in_ff_D_IN, data_in_ff_D_OUT;
  wire data_in_ff_CLR,
       data_in_ff_DEQ,
       data_in_ff_EMPTY_N,
       data_in_ff_ENQ,
       data_in_ff_FULL_N;

  // ports of submodule data_out_ff
  wire [177 : 0] data_out_ff_D_IN, data_out_ff_D_OUT;
  wire data_out_ff_CLR,
       data_out_ff_DEQ,
       data_out_ff_EMPTY_N,
       data_out_ff_ENQ,
       data_out_ff_FULL_N;

  // ports of submodule flit_ff
  wire flit_ff_CLR, flit_ff_DEQ, flit_ff_EMPTY_N, flit_ff_ENQ, flit_ff_FULL_N;

  // ports of submodule meta_in_ff
  wire [760 : 0] meta_in_ff_D_IN, meta_in_ff_D_OUT;
  wire meta_in_ff_CLR,
       meta_in_ff_DEQ,
       meta_in_ff_EMPTY_N,
       meta_in_ff_ENQ,
       meta_in_ff_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_deparse_done,
       WILL_FIRE_RL_fsmrl_rl_deparse_load,
       WILL_FIRE_RL_fsmrl_rl_deparse_load_1,
       WILL_FIRE_RL_fsmrl_rl_deparse_next,
       WILL_FIRE_RL_fsmrl_rl_deparse_next_1,
       WILL_FIRE_RL_fsmrl_rl_deparse_send,
       WILL_FIRE_RL_fsmrl_rl_deparse_send_1,
       WILL_FIRE_RL_rl_deparse_done,
       WILL_FIRE_RL_rl_deparse_payload,
       WILL_FIRE_RL_rl_deparse_send,
       WILL_FIRE_RL_rl_deparse_start,
       WILL_FIRE_RL_rl_reset;

  // inputs to muxes for submodule ports
  wire [760 : 0] MUX_meta_port0__write_1__VAL_1,
		 MUX_meta_port0__write_1__VAL_2;
  wire [511 : 0] MUX_rg_tmp_port0__write_1__VAL_1,
		 MUX_rg_tmp_port0__write_1__VAL_2;
  wire [177 : 0] MUX_deparse_send_r_write_1__VAL_2,
		 MUX_deparse_send_r_write_1__VAL_3;
  wire [9 : 0] MUX_rg_buffered_port0__write_1__VAL_2,
	       MUX_rg_buffered_port0__write_1__VAL_3,
	       MUX_rg_processed_port0__write_1__VAL_2,
	       MUX_rg_processed_port0__write_1__VAL_3,
	       MUX_rg_processed_port0__write_1__VAL_4;
  wire MUX_data_in_tmp_write_1__SEL_1,
       MUX_rg_buffered_port0__write_1__SEL_1,
       MUX_rg_buffered_port0__write_1__SEL_3;

  // remaining internal signals
  wire [511 : 0] v__h7355, x__h10888, x__h10891, x__h7346;
  wire [127 : 0] data_data__h6278, data_mask__h6243;
  wire [15 : 0] mask_out__h6244, mask_out__h7088;
  wire [9 : 0] _theResult____h7086, len__h10987, x__h6983;
  wire [7 : 0] value__h11036;
  wire [4 : 0] value__h11076,
	       x__h11122,
	       x__h11134,
	       x__h11146,
	       x__h11158,
	       x__h11170,
	       x__h11182,
	       x__h11194,
	       x__h11206,
	       x__h11218,
	       x__h11230,
	       x__h11242,
	       x__h11254,
	       x__h11266,
	       x__h11278,
	       x__h11290,
	       y__h11123,
	       y__h11135,
	       y__h11147,
	       y__h11159,
	       y__h11171,
	       y__h11183,
	       y__h11195,
	       y__h11207,
	       y__h11219,
	       y__h11231,
	       y__h11243,
	       y__h11255,
	       y__h11267,
	       y__h11279,
	       y__h11291;
  wire [1 : 0] IF_meta_in_ff_first__3_BIT_760_4_AND_meta_in_f_ETC___d117,
	       IF_meta_port0__read__90_BIT_644_11_AND_meta_po_ETC___d376,
	       IF_meta_port0__read__90_BIT_760_91_AND_meta_po_ETC___d199;
  wire rg_buffered_port0__read__34_ULT_112___d364,
       rg_buffered_port0__read__34_ULT_160___d184;

  // action method metadata_enq
  assign RDY_metadata_enq = meta_in_ff_FULL_N ;

  // value method metadata_notFull
  assign metadata_notFull = meta_in_ff_FULL_N ;
  assign RDY_metadata_notFull = 1'd1 ;

  // action method writeServer_enq
  assign RDY_writeServer_enq = data_in_ff_FULL_N ;

  // value method writeServer_notFull
  assign writeServer_notFull = data_in_ff_FULL_N ;
  assign RDY_writeServer_notFull = 1'd1 ;

  // value method writeClient_first
  assign writeClient_first = data_out_ff_D_OUT ;
  assign RDY_writeClient_first = data_out_ff_EMPTY_N ;

  // action method writeClient_deq
  assign RDY_writeClient_deq = data_out_ff_EMPTY_N ;

  // value method writeClient_notEmpty
  assign writeClient_notEmpty = data_out_ff_EMPTY_N ;
  assign RDY_writeClient_notEmpty = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;

  // value method read_perf_info
  assign read_perf_info = 64'hAAAAAAAAAAAAAAAA ;
  assign RDY_read_perf_info = 1'd1 ;

  // submodule data_in_ff
  FIFO2 #(.width(32'd178), .guarded(32'd1)) data_in_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(data_in_ff_D_IN),
						       .ENQ(data_in_ff_ENQ),
						       .DEQ(data_in_ff_DEQ),
						       .CLR(data_in_ff_CLR),
						       .D_OUT(data_in_ff_D_OUT),
						       .FULL_N(data_in_ff_FULL_N),
						       .EMPTY_N(data_in_ff_EMPTY_N));

  // submodule data_out_ff
  FIFO2 #(.width(32'd178), .guarded(32'd1)) data_out_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(data_out_ff_D_IN),
							.ENQ(data_out_ff_ENQ),
							.DEQ(data_out_ff_DEQ),
							.CLR(data_out_ff_CLR),
							.D_OUT(data_out_ff_D_OUT),
							.FULL_N(data_out_ff_FULL_N),
							.EMPTY_N(data_out_ff_EMPTY_N));

  // submodule flit_ff
  FIFO20 #(.guarded(32'd1)) flit_ff(.RST(RST_N),
				    .CLK(CLK),
				    .ENQ(flit_ff_ENQ),
				    .DEQ(flit_ff_DEQ),
				    .CLR(flit_ff_CLR),
				    .FULL_N(flit_ff_FULL_N),
				    .EMPTY_N(flit_ff_EMPTY_N));

  // submodule meta_in_ff
  SizedFIFO #(.p1width(32'd761),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) meta_in_ff(.RST(RST_N),
					  .CLK(CLK),
					  .D_IN(meta_in_ff_D_IN),
					  .ENQ(meta_in_ff_ENQ),
					  .DEQ(meta_in_ff_DEQ),
					  .CLR(meta_in_ff_CLR),
					  .D_OUT(meta_in_ff_D_OUT),
					  .FULL_N(meta_in_ff_FULL_N),
					  .EMPTY_N(meta_in_ff_EMPTY_N));

  // rule RL_rl_deparse_send
  assign WILL_FIRE_RL_rl_deparse_send =
	     flit_ff_FULL_N && !deparse_done && rg_processed != 10'd0 ;

  // rule RL_fsmrl_rl_deparse_send
  assign WILL_FIRE_RL_fsmrl_rl_deparse_send =
	     deparse_state_ff_rv[2] && deparse_state_ff_rv[1:0] == 2'd2 &&
	     !rg_buffered_port0__read__34_ULT_160___d184 &&
	     !WILL_FIRE_RL_rl_deparse_send &&
	     !WILL_FIRE_RL_rl_deparse_start ;

  // rule RL_fsmrl_rl_deparse_send_1
  assign WILL_FIRE_RL_fsmrl_rl_deparse_send_1 =
	     deparse_state_ff_rv[2] && deparse_state_ff_rv[1:0] == 2'd1 &&
	     !rg_buffered_port0__read__34_ULT_112___d364 &&
	     !WILL_FIRE_RL_rl_deparse_send &&
	     !WILL_FIRE_RL_rl_deparse_start ;

  // rule RL_rl_deparse_payload
  assign WILL_FIRE_RL_rl_deparse_payload =
	     data_in_ff_EMPTY_N && flit_ff_FULL_N && deparse_done &&
	     !data_in_tmp[0] &&
	     !WILL_FIRE_RL_rl_deparse_start ;

  // rule RL_rl_reset
  assign WILL_FIRE_RL_rl_reset =
	     flit_ff_FULL_N && deparse_done && data_in_tmp[0] ;

  // rule RL_rl_deparse_start
  assign WILL_FIRE_RL_rl_deparse_start =
	     meta_in_ff_EMPTY_N && data_in_ff_EMPTY_N && deparse_done &&
	     data_in_ff_D_OUT[1] ;

  // rule RL_rl_deparse_done
  assign CAN_FIRE_RL_rl_deparse_done =
	     WILL_FIRE_RL_rl_deparse_start &&
	     { meta_in_ff_D_OUT[644] && meta_in_ff_D_OUT[643:641] == 3'd1,
	       meta_in_ff_D_OUT[760] && meta_in_ff_D_OUT[759:757] == 3'd1 } ==
	     2'd0 ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_send &&
	     { 1'd0, meta[760] && meta[759:757] == 3'd1 } == 2'd0 ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_send_1 &&
	     { meta[644] && meta[643:641] == 3'd1, 1'd0 } == 2'd0 ;
  assign WILL_FIRE_RL_rl_deparse_done =
	     CAN_FIRE_RL_rl_deparse_done && !WILL_FIRE_RL_rl_deparse_start ;

  // rule RL_fsmrl_rl_deparse_load
  assign WILL_FIRE_RL_fsmrl_rl_deparse_load =
	     deparse_state_ff_rv[2] && data_in_ff_EMPTY_N &&
	     deparse_state_ff_rv[1:0] == 2'd2 &&
	     rg_buffered_port0__read__34_ULT_160___d184 &&
	     !WILL_FIRE_RL_rl_deparse_send &&
	     !WILL_FIRE_RL_rl_reset &&
	     !WILL_FIRE_RL_rl_deparse_payload ;

  // rule RL_fsmrl_rl_deparse_load_1
  assign WILL_FIRE_RL_fsmrl_rl_deparse_load_1 =
	     deparse_state_ff_rv[2] && data_in_ff_EMPTY_N &&
	     deparse_state_ff_rv[1:0] == 2'd1 &&
	     rg_buffered_port0__read__34_ULT_112___d364 &&
	     !WILL_FIRE_RL_rl_deparse_send &&
	     !WILL_FIRE_RL_rl_reset &&
	     !WILL_FIRE_RL_rl_deparse_payload ;

  // rule RL_fsmrl_rl_deparse_next
  assign WILL_FIRE_RL_fsmrl_rl_deparse_next =
	     !deparse_state_ff_rv_port1__read[2] && w_ipv4_whas ;

  // rule RL_fsmrl_rl_deparse_next_1
  assign WILL_FIRE_RL_fsmrl_rl_deparse_next_1 =
	     !deparse_state_ff_rv_port1__read[2] && w_ethernet_whas &&
	     !WILL_FIRE_RL_fsmrl_rl_deparse_next ;

  // inputs to muxes for submodule ports
  assign MUX_data_in_tmp_write_1__SEL_1 =
	     WILL_FIRE_RL_fsmrl_rl_deparse_load_1 ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_load ||
	     WILL_FIRE_RL_rl_deparse_payload ;
  assign MUX_rg_buffered_port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_deparse_payload && rg_buffered != 10'd0 ;
  assign MUX_rg_buffered_port0__write_1__SEL_3 =
	     WILL_FIRE_RL_fsmrl_rl_deparse_load_1 ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_load ;
  assign MUX_deparse_send_r_write_1__VAL_2 =
	     (rg_buffered == 10'd0) ?
	       data_in_tmp :
	       { data_in_tmp[177:146],
		 data_data__h6278,
		 mask_out__h6244,
		 data_in_tmp[1:0] } ;
  assign MUX_deparse_send_r_write_1__VAL_3 =
	     { data_in_tmp[177:146],
	       x__h7346[127:0],
	       mask_out__h7088,
	       data_in_tmp[1:0] } ;
  assign MUX_meta_port0__write_1__VAL_1 =
	     { meta[760:645],
	       meta[644] ?
		 { 4'd8, meta[640:481] } :
		 164'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,
	       meta[480:0] } ;
  assign MUX_meta_port0__write_1__VAL_2 =
	     { meta[760] ?
		 { 4'd8, meta[756:645] } :
		 116'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAA,
	       meta[644:0] } ;
  assign MUX_rg_buffered_port0__write_1__VAL_2 =
	     rg_buffered - _theResult____h7086 ;
  assign MUX_rg_buffered_port0__write_1__VAL_3 = rg_buffered + len__h10987 ;
  assign MUX_rg_processed_port0__write_1__VAL_2 = rg_processed + 10'd112 ;
  assign MUX_rg_processed_port0__write_1__VAL_3 = rg_processed + 10'd160 ;
  assign MUX_rg_processed_port0__write_1__VAL_4 =
	     rg_processed - _theResult____h7086 ;
  assign MUX_rg_tmp_port0__write_1__VAL_1 = x__h10888 | rg_tmp ;
  assign MUX_rg_tmp_port0__write_1__VAL_2 = rg_tmp >> _theResult____h7086 ;

  // inlined wires
  assign w_ethernet_whas =
	     WILL_FIRE_RL_rl_deparse_start &&
	     { meta_in_ff_D_OUT[644] && meta_in_ff_D_OUT[643:641] == 3'd1,
	       meta_in_ff_D_OUT[760] && meta_in_ff_D_OUT[759:757] == 3'd1 } !=
	     2'd0 &&
	     IF_meta_in_ff_first__3_BIT_760_4_AND_meta_in_f_ETC___d117 ==
	     2'd1 ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_send &&
	     { 1'd0, meta[760] && meta[759:757] == 3'd1 } != 2'd0 &&
	     IF_meta_port0__read__90_BIT_760_91_AND_meta_po_ETC___d199 ==
	     2'd1 ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_send_1 &&
	     { meta[644] && meta[643:641] == 3'd1, 1'd0 } != 2'd0 &&
	     IF_meta_port0__read__90_BIT_644_11_AND_meta_po_ETC___d376 ==
	     2'd1 ;
  assign w_ipv4_whas =
	     WILL_FIRE_RL_rl_deparse_start &&
	     { meta_in_ff_D_OUT[644] && meta_in_ff_D_OUT[643:641] == 3'd1,
	       meta_in_ff_D_OUT[760] && meta_in_ff_D_OUT[759:757] == 3'd1 } !=
	     2'd0 &&
	     IF_meta_in_ff_first__3_BIT_760_4_AND_meta_in_f_ETC___d117 ==
	     2'd2 ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_send &&
	     { 1'd0, meta[760] && meta[759:757] == 3'd1 } != 2'd0 &&
	     IF_meta_port0__read__90_BIT_760_91_AND_meta_po_ETC___d199 ==
	     2'd2 ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_send_1 &&
	     { meta[644] && meta[643:641] == 3'd1, 1'd0 } != 2'd0 &&
	     IF_meta_port0__read__90_BIT_644_11_AND_meta_po_ETC___d376 ==
	     2'd2 ;
  assign deparse_state_ff_rv_EN_port0__write =
	     WILL_FIRE_RL_fsmrl_rl_deparse_send_1 ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_send ;
  assign deparse_state_ff_rv_port1__read =
	     deparse_state_ff_rv_EN_port0__write ?
	       3'd2 :
	       deparse_state_ff_rv ;
  assign deparse_state_ff_rv_EN_port1__write =
	     WILL_FIRE_RL_fsmrl_rl_deparse_next_1 ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_next ;
  assign deparse_state_ff_rv_port1__write_1 =
	     WILL_FIRE_RL_fsmrl_rl_deparse_next_1 ? 3'd5 : 3'd6 ;
  assign deparse_state_ff_rv_port2__read =
	     deparse_state_ff_rv_EN_port1__write ?
	       deparse_state_ff_rv_port1__write_1 :
	       deparse_state_ff_rv_port1__read ;
  assign rg_next_header_len_EN_port0__write =
	     WILL_FIRE_RL_rl_deparse_done ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_next_1 ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_next ;
  always@(WILL_FIRE_RL_fsmrl_rl_deparse_next_1 or
	  WILL_FIRE_RL_fsmrl_rl_deparse_next or WILL_FIRE_RL_rl_deparse_done)
  case (1'b1)
    WILL_FIRE_RL_fsmrl_rl_deparse_next_1:
	rg_next_header_len_port0__write_1 = 10'd112;
    WILL_FIRE_RL_fsmrl_rl_deparse_next:
	rg_next_header_len_port0__write_1 = 10'd160;
    WILL_FIRE_RL_rl_deparse_done: rg_next_header_len_port0__write_1 = 10'd0;
    default: rg_next_header_len_port0__write_1 =
		 10'b1010101010 /* unspecified value */ ;
  endcase
  assign rg_next_header_len_port1__read =
	     rg_next_header_len_EN_port0__write ?
	       rg_next_header_len_port0__write_1 :
	       rg_next_header_len ;
  assign rg_processed_EN_port0__write =
	     WILL_FIRE_RL_rl_deparse_send ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_send_1 ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_send ||
	     WILL_FIRE_RL_rl_reset ;
  always@(WILL_FIRE_RL_rl_reset or
	  WILL_FIRE_RL_fsmrl_rl_deparse_send_1 or
	  MUX_rg_processed_port0__write_1__VAL_2 or
	  WILL_FIRE_RL_fsmrl_rl_deparse_send or
	  MUX_rg_processed_port0__write_1__VAL_3 or
	  WILL_FIRE_RL_rl_deparse_send or
	  MUX_rg_processed_port0__write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_rl_reset: rg_processed_port0__write_1 = 10'd0;
    WILL_FIRE_RL_fsmrl_rl_deparse_send_1:
	rg_processed_port0__write_1 = MUX_rg_processed_port0__write_1__VAL_2;
    WILL_FIRE_RL_fsmrl_rl_deparse_send:
	rg_processed_port0__write_1 = MUX_rg_processed_port0__write_1__VAL_3;
    WILL_FIRE_RL_rl_deparse_send:
	rg_processed_port0__write_1 = MUX_rg_processed_port0__write_1__VAL_4;
    default: rg_processed_port0__write_1 =
		 10'b1010101010 /* unspecified value */ ;
  endcase
  assign rg_buffered_EN_port0__write =
	     WILL_FIRE_RL_rl_deparse_payload && rg_buffered != 10'd0 ||
	     WILL_FIRE_RL_rl_deparse_send ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_load_1 ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_load ||
	     WILL_FIRE_RL_rl_reset ;
  always@(WILL_FIRE_RL_rl_deparse_send or
	  MUX_rg_buffered_port0__write_1__VAL_2 or
	  MUX_rg_buffered_port0__write_1__SEL_3 or
	  MUX_rg_buffered_port0__write_1__VAL_3 or
	  MUX_rg_buffered_port0__write_1__SEL_1 or WILL_FIRE_RL_rl_reset)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_deparse_send:
	  rg_buffered_port0__write_1 = MUX_rg_buffered_port0__write_1__VAL_2;
      MUX_rg_buffered_port0__write_1__SEL_3:
	  rg_buffered_port0__write_1 = MUX_rg_buffered_port0__write_1__VAL_3;
      MUX_rg_buffered_port0__write_1__SEL_1 || WILL_FIRE_RL_rl_reset:
	  rg_buffered_port0__write_1 = 10'd0;
      default: rg_buffered_port0__write_1 =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign rg_buffered_port1__read =
	     rg_buffered_EN_port0__write ?
	       rg_buffered_port0__write_1 :
	       rg_buffered ;
  assign rg_tmp_EN_port0__write =
	     WILL_FIRE_RL_fsmrl_rl_deparse_load_1 ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_load ||
	     WILL_FIRE_RL_rl_deparse_send ||
	     WILL_FIRE_RL_rl_reset ;
  always@(MUX_rg_buffered_port0__write_1__SEL_3 or
	  MUX_rg_tmp_port0__write_1__VAL_1 or
	  WILL_FIRE_RL_rl_deparse_send or
	  MUX_rg_tmp_port0__write_1__VAL_2 or WILL_FIRE_RL_rl_reset)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_buffered_port0__write_1__SEL_3:
	  rg_tmp_port0__write_1 = MUX_rg_tmp_port0__write_1__VAL_1;
      WILL_FIRE_RL_rl_deparse_send:
	  rg_tmp_port0__write_1 = MUX_rg_tmp_port0__write_1__VAL_2;
      WILL_FIRE_RL_rl_reset: rg_tmp_port0__write_1 = 512'd0;
      default: rg_tmp_port0__write_1 =
		   512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_tmp_port1__read =
	     rg_tmp_EN_port0__write ? rg_tmp_port0__write_1 : rg_tmp ;
  assign deparse_done_EN_port1__write =
	     WILL_FIRE_RL_rl_deparse_start ||
	     !deparse_done && header_done_port1__read && x__h6983 == 10'd0 ;
  assign deparse_done_port2__read =
	     deparse_done_EN_port1__write ?
	       !WILL_FIRE_RL_rl_deparse_start :
	       deparse_done ;
  assign header_done_port1__read =
	     WILL_FIRE_RL_rl_deparse_done || header_done ;
  assign header_done_port2__read =
	     !WILL_FIRE_RL_rl_deparse_start && header_done_port1__read ;
  assign meta_EN_port0__write =
	     WILL_FIRE_RL_fsmrl_rl_deparse_send ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_send_1 ;
  assign meta_port0__write_1 =
	     WILL_FIRE_RL_fsmrl_rl_deparse_send ?
	       MUX_meta_port0__write_1__VAL_1 :
	       MUX_meta_port0__write_1__VAL_2 ;
  assign meta_port1__read =
	     meta_EN_port0__write ? meta_port0__write_1 : meta ;
  assign meta_port2__read =
	     WILL_FIRE_RL_rl_deparse_start ?
	       meta_in_ff_D_OUT :
	       meta_port1__read ;

  // register cf_verbosity
  assign cf_verbosity_D_IN = set_verbosity_verbosity ;
  assign cf_verbosity_EN = EN_set_verbosity ;

  // register data_in_tmp
  assign data_in_tmp_D_IN =
	     MUX_data_in_tmp_write_1__SEL_1 ? data_in_ff_D_OUT : 178'd0 ;
  assign data_in_tmp_EN =
	     WILL_FIRE_RL_fsmrl_rl_deparse_load_1 ||
	     WILL_FIRE_RL_fsmrl_rl_deparse_load ||
	     WILL_FIRE_RL_rl_deparse_payload ||
	     WILL_FIRE_RL_rl_reset ;

  // register data_valid
  assign data_valid_D_IN = data_valid ;
  assign data_valid_EN = 1'b1 ;

  // register deparse_done
  assign deparse_done_D_IN = deparse_done_port2__read ;
  assign deparse_done_EN = 1'b1 ;

  // register deparse_send_r
  always@(WILL_FIRE_RL_rl_reset or
	  data_in_tmp or
	  WILL_FIRE_RL_rl_deparse_payload or
	  MUX_deparse_send_r_write_1__VAL_2 or
	  WILL_FIRE_RL_rl_deparse_send or MUX_deparse_send_r_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_reset: deparse_send_r_D_IN = data_in_tmp;
      WILL_FIRE_RL_rl_deparse_payload:
	  deparse_send_r_D_IN = MUX_deparse_send_r_write_1__VAL_2;
      WILL_FIRE_RL_rl_deparse_send:
	  deparse_send_r_D_IN = MUX_deparse_send_r_write_1__VAL_3;
      default: deparse_send_r_D_IN =
		   178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign deparse_send_r_EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_deparse_payload ||
	     WILL_FIRE_RL_rl_deparse_send ;

  // register deparse_state_ff_rv
  assign deparse_state_ff_rv_D_IN = deparse_state_ff_rv_port2__read ;
  assign deparse_state_ff_rv_EN = 1'b1 ;

  // register header_done
  assign header_done_D_IN = header_done_port2__read ;
  assign header_done_EN = 1'b1 ;

  // register meta
  assign meta_D_IN = meta_port2__read ;
  assign meta_EN = 1'b1 ;

  // register rg_buffered
  assign rg_buffered_D_IN = rg_buffered_port1__read ;
  assign rg_buffered_EN = 1'b1 ;

  // register rg_next_header_len
  assign rg_next_header_len_D_IN = rg_next_header_len_port1__read ;
  assign rg_next_header_len_EN = 1'b1 ;

  // register rg_processed
  assign rg_processed_D_IN = x__h6983 ;
  assign rg_processed_EN = 1'b1 ;

  // register rg_tmp
  assign rg_tmp_D_IN = rg_tmp_port1__read ;
  assign rg_tmp_EN = 1'b1 ;

  // submodule data_in_ff
  assign data_in_ff_D_IN = writeServer_enq_v ;
  assign data_in_ff_ENQ = EN_writeServer_enq ;
  assign data_in_ff_DEQ = MUX_data_in_tmp_write_1__SEL_1 ;
  assign data_in_ff_CLR = 1'b0 ;

  // submodule data_out_ff
  assign data_out_ff_D_IN = deparse_send_r ;
  assign data_out_ff_ENQ = flit_ff_EMPTY_N && data_out_ff_FULL_N ;
  assign data_out_ff_DEQ = EN_writeClient_deq ;
  assign data_out_ff_CLR = 1'b0 ;

  // submodule flit_ff
  assign flit_ff_ENQ =
	     WILL_FIRE_RL_rl_deparse_send || WILL_FIRE_RL_rl_reset ||
	     WILL_FIRE_RL_rl_deparse_payload ;
  assign flit_ff_DEQ = flit_ff_EMPTY_N && data_out_ff_FULL_N ;
  assign flit_ff_CLR = 1'b0 ;

  // submodule meta_in_ff
  assign meta_in_ff_D_IN = metadata_enq_v ;
  assign meta_in_ff_ENQ = EN_metadata_enq ;
  assign meta_in_ff_DEQ = WILL_FIRE_RL_rl_deparse_start ;
  assign meta_in_ff_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_meta_in_ff_first__3_BIT_760_4_AND_meta_in_f_ETC___d117 =
	     ((meta_in_ff_D_OUT[760] && meta_in_ff_D_OUT[759:757] == 3'd1) ?
		2'd1 :
		((meta_in_ff_D_OUT[644] &&
		  meta_in_ff_D_OUT[643:641] == 3'd1) ?
		   2'd2 :
		   2'd3)) %
	     2'd3 ;
  assign IF_meta_port0__read__90_BIT_644_11_AND_meta_po_ETC___d376 =
	     ((meta[644] && meta[643:641] == 3'd1) ? 2'd2 : 2'd3) % 2'd3 ;
  assign IF_meta_port0__read__90_BIT_760_91_AND_meta_po_ETC___d199 =
	     ((meta[760] && meta[759:757] == 3'd1) ? 2'd1 : 2'd3) % 2'd3 ;
  assign _theResult____h7086 =
	     (rg_processed < 10'd128) ? rg_processed : 10'd128 ;
  assign data_data__h6278 = rg_tmp[127:0] & data_mask__h6243 ;
  assign data_mask__h6243 = (128'd1 << rg_buffered[7:0]) - 128'd1 ;
  assign len__h10987 = { 2'd0, value__h11036 } ;
  assign mask_out__h6244 = (16'd1 << rg_buffered[7:3]) - 16'd1 ;
  assign mask_out__h7088 = (16'd1 << _theResult____h7086[7:3]) - 16'd1 ;
  assign rg_buffered_port0__read__34_ULT_112___d364 = rg_buffered < 10'd112 ;
  assign rg_buffered_port0__read__34_ULT_160___d184 = rg_buffered < 10'd160 ;
  assign v__h7355 = (512'd1 << _theResult____h7086) - 512'd1 ;
  assign value__h11036 = { value__h11076, 3'd0 } ;
  assign value__h11076 = x__h11122 + y__h11123 ;
  assign x__h10888 = x__h10891 << rg_buffered ;
  assign x__h10891 = { 384'd0, data_in_tmp[145:18] } ;
  assign x__h11122 = x__h11134 + y__h11135 ;
  assign x__h11134 = x__h11146 + y__h11147 ;
  assign x__h11146 = x__h11158 + y__h11159 ;
  assign x__h11158 = x__h11170 + y__h11171 ;
  assign x__h11170 = x__h11182 + y__h11183 ;
  assign x__h11182 = x__h11194 + y__h11195 ;
  assign x__h11194 = x__h11206 + y__h11207 ;
  assign x__h11206 = x__h11218 + y__h11219 ;
  assign x__h11218 = x__h11230 + y__h11231 ;
  assign x__h11230 = x__h11242 + y__h11243 ;
  assign x__h11242 = x__h11254 + y__h11255 ;
  assign x__h11254 = x__h11266 + y__h11267 ;
  assign x__h11266 = x__h11278 + y__h11279 ;
  assign x__h11278 = x__h11290 + y__h11291 ;
  assign x__h11290 = { 4'd0, data_in_ff_D_OUT[17] } ;
  assign x__h6983 =
	     rg_processed_EN_port0__write ?
	       rg_processed_port0__write_1 :
	       rg_processed ;
  assign x__h7346 = rg_tmp & v__h7355 ;
  assign y__h11123 = { 4'd0, data_in_ff_D_OUT[2] } ;
  assign y__h11135 = { 4'd0, data_in_ff_D_OUT[3] } ;
  assign y__h11147 = { 4'd0, data_in_ff_D_OUT[4] } ;
  assign y__h11159 = { 4'd0, data_in_ff_D_OUT[5] } ;
  assign y__h11171 = { 4'd0, data_in_ff_D_OUT[6] } ;
  assign y__h11183 = { 4'd0, data_in_ff_D_OUT[7] } ;
  assign y__h11195 = { 4'd0, data_in_ff_D_OUT[8] } ;
  assign y__h11207 = { 4'd0, data_in_ff_D_OUT[9] } ;
  assign y__h11219 = { 4'd0, data_in_ff_D_OUT[10] } ;
  assign y__h11231 = { 4'd0, data_in_ff_D_OUT[11] } ;
  assign y__h11243 = { 4'd0, data_in_ff_D_OUT[12] } ;
  assign y__h11255 = { 4'd0, data_in_ff_D_OUT[13] } ;
  assign y__h11267 = { 4'd0, data_in_ff_D_OUT[14] } ;
  assign y__h11279 = { 4'd0, data_in_ff_D_OUT[15] } ;
  assign y__h11291 = { 4'd0, data_in_ff_D_OUT[16] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        data_in_tmp <= `BSV_ASSIGNMENT_DELAY 178'd0;
	data_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	deparse_done <= `BSV_ASSIGNMENT_DELAY 1'd1;
	deparse_send_r <= `BSV_ASSIGNMENT_DELAY 178'd0;
	deparse_state_ff_rv <= `BSV_ASSIGNMENT_DELAY 3'd2;
	header_done <= `BSV_ASSIGNMENT_DELAY 1'd1;
	meta <= `BSV_ASSIGNMENT_DELAY
	    761'h05555555555555555555555555555455555555555555555555555555555555555555554AAAAAAAA55555555154AAAAAAAA2A8AA2A955555554AAAAAAAA15554AAAAAAAA55555555155552AAAAAAA8AAAA9555555555554AAAAAAAA55550AAAA;
	rg_buffered <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_next_header_len <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_processed <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_tmp <= `BSV_ASSIGNMENT_DELAY 512'd0;
      end
    else
      begin
        if (data_in_tmp_EN)
	  data_in_tmp <= `BSV_ASSIGNMENT_DELAY data_in_tmp_D_IN;
	if (data_valid_EN)
	  data_valid <= `BSV_ASSIGNMENT_DELAY data_valid_D_IN;
	if (deparse_done_EN)
	  deparse_done <= `BSV_ASSIGNMENT_DELAY deparse_done_D_IN;
	if (deparse_send_r_EN)
	  deparse_send_r <= `BSV_ASSIGNMENT_DELAY deparse_send_r_D_IN;
	if (deparse_state_ff_rv_EN)
	  deparse_state_ff_rv <= `BSV_ASSIGNMENT_DELAY
	      deparse_state_ff_rv_D_IN;
	if (header_done_EN)
	  header_done <= `BSV_ASSIGNMENT_DELAY header_done_D_IN;
	if (meta_EN) meta <= `BSV_ASSIGNMENT_DELAY meta_D_IN;
	if (rg_buffered_EN)
	  rg_buffered <= `BSV_ASSIGNMENT_DELAY rg_buffered_D_IN;
	if (rg_next_header_len_EN)
	  rg_next_header_len <= `BSV_ASSIGNMENT_DELAY rg_next_header_len_D_IN;
	if (rg_processed_EN)
	  rg_processed <= `BSV_ASSIGNMENT_DELAY rg_processed_D_IN;
	if (rg_tmp_EN) rg_tmp <= `BSV_ASSIGNMENT_DELAY rg_tmp_D_IN;
      end
    if (cf_verbosity_EN)
      cf_verbosity <= `BSV_ASSIGNMENT_DELAY cf_verbosity_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cf_verbosity = 32'hAAAAAAAA;
    data_in_tmp = 178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    data_valid = 1'h0;
    deparse_done = 1'h0;
    deparse_send_r = 178'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    deparse_state_ff_rv = 3'h2;
    header_done = 1'h0;
    meta =
	761'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_buffered = 10'h2AA;
    rg_next_header_len = 10'h2AA;
    rg_processed = 10'h2AA;
    rg_tmp =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsmrl_rl_deparse_send &&
	  { 1'd0, meta[760] && meta[759:757] == 3'd1 } != 2'd0 &&
	  IF_meta_port0__read__90_BIT_760_91_AND_meta_po_ETC___d199 != 2'd1 &&
	  IF_meta_port0__read__90_BIT_760_91_AND_meta_po_ETC___d199 != 2'd2)
	$display("ERROR: unknown states.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsmrl_rl_deparse_send_1 &&
	  { meta[644] && meta[643:641] == 3'd1, 1'd0 } != 2'd0 &&
	  IF_meta_port0__read__90_BIT_644_11_AND_meta_po_ETC___d376 != 2'd1 &&
	  IF_meta_port0__read__90_BIT_644_11_AND_meta_po_ETC___d376 != 2'd2)
	$display("ERROR: unknown states.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_deparse_start &&
	  { meta_in_ff_D_OUT[644] && meta_in_ff_D_OUT[643:641] == 3'd1,
	    meta_in_ff_D_OUT[760] && meta_in_ff_D_OUT[759:757] == 3'd1 } !=
	  2'd0 &&
	  IF_meta_in_ff_first__3_BIT_760_4_AND_meta_in_f_ETC___d117 != 2'd1 &&
	  IF_meta_in_ff_first__3_BIT_760_4_AND_meta_in_f_ETC___d117 != 2'd2)
	$display("ERROR: unknown states.");
  end
  // synopsys translate_on
endmodule  // mkDeparser

