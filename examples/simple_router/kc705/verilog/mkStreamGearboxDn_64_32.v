//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Wed May 31 23:01:26 CST 2017
//
// BVI format method schedule info:
// schedule datain_put  CF ( dataout_get,
// 			  getEopCount,
// 			  getSopCount,
// 			  getIdleCount,
// 			  getDataCount );
// schedule datain_put  C ( datain_put );
//
// schedule dataout_get  CF ( datain_put,
// 			   getEopCount,
// 			   getSopCount,
// 			   getIdleCount,
// 			   getDataCount );
// schedule dataout_get  C ( dataout_get );
//
// schedule getEopCount  CF ( datain_put,
// 			   dataout_get,
// 			   getEopCount,
// 			   getSopCount,
// 			   getIdleCount,
// 			   getDataCount );
//
// schedule getSopCount  CF ( datain_put,
// 			   dataout_get,
// 			   getEopCount,
// 			   getSopCount,
// 			   getIdleCount,
// 			   getDataCount );
//
// schedule getIdleCount  CF ( datain_put,
// 			    dataout_get,
// 			    getEopCount,
// 			    getSopCount,
// 			    getIdleCount,
// 			    getDataCount );
//
// schedule getDataCount  CF ( datain_put,
// 			    dataout_get,
// 			    getEopCount,
// 			    getSopCount,
// 			    getIdleCount,
// 			    getDataCount );
//
//
// Ports:
// Name                         I/O  size props
// RDY_datain_put                 O     1 reg
// dataout_get                    O   322 reg
// RDY_dataout_get                O     1 reg
// getEopCount                    O    64 const
// RDY_getEopCount                O     1 const
// getSopCount                    O    64 const
// RDY_getSopCount                O     1 const
// getIdleCount                   O    64 const
// RDY_getIdleCount               O     1 const
// getDataCount                   O    64 const
// RDY_getDataCount               O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// datain_put                     I   610 reg
// EN_datain_put                  I     1
// EN_dataout_get                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkStreamGearboxDn_64_32(CLK,
			       RST_N,

			       datain_put,
			       EN_datain_put,
			       RDY_datain_put,

			       EN_dataout_get,
			       dataout_get,
			       RDY_dataout_get,

			       getEopCount,
			       RDY_getEopCount,

			       getSopCount,
			       RDY_getSopCount,

			       getIdleCount,
			       RDY_getIdleCount,

			       getDataCount,
			       RDY_getDataCount);
  input  CLK;
  input  RST_N;

  // action method datain_put
  input  [609 : 0] datain_put;
  input  EN_datain_put;
  output RDY_datain_put;

  // actionvalue method dataout_get
  input  EN_dataout_get;
  output [321 : 0] dataout_get;
  output RDY_dataout_get;

  // value method getEopCount
  output [63 : 0] getEopCount;
  output RDY_getEopCount;

  // value method getSopCount
  output [63 : 0] getSopCount;
  output RDY_getSopCount;

  // value method getIdleCount
  output [63 : 0] getIdleCount;
  output RDY_getIdleCount;

  // value method getDataCount
  output [63 : 0] getDataCount;
  output RDY_getDataCount;

  // signals for module outputs
  wire [321 : 0] dataout_get;
  wire [63 : 0] getDataCount, getEopCount, getIdleCount, getSopCount;
  wire RDY_datain_put,
       RDY_dataout_get,
       RDY_getDataCount,
       RDY_getEopCount,
       RDY_getIdleCount,
       RDY_getSopCount;

  // register fifoTxData_block0
  reg [643 : 0] fifoTxData_block0;
  wire [643 : 0] fifoTxData_block0_D_IN;
  wire fifoTxData_block0_EN;

  // register fifoTxData_block0_status
  reg fifoTxData_block0_status;
  wire fifoTxData_block0_status_D_IN, fifoTxData_block0_status_EN;

  // register fifoTxData_block1
  reg [643 : 0] fifoTxData_block1;
  wire [643 : 0] fifoTxData_block1_D_IN;
  wire fifoTxData_block1_EN;

  // register fifoTxData_block1_status
  reg fifoTxData_block1_status;
  wire fifoTxData_block1_status_D_IN, fifoTxData_block1_status_EN;

  // register fifoTxData_dInReset_pre_isInReset
  reg fifoTxData_dInReset_pre_isInReset;
  wire fifoTxData_dInReset_pre_isInReset_D_IN,
       fifoTxData_dInReset_pre_isInReset_EN;

  // register fifoTxData_elem0_status_0
  reg fifoTxData_elem0_status_0;
  wire fifoTxData_elem0_status_0_D_IN, fifoTxData_elem0_status_0_EN;

  // register fifoTxData_elem0_status_1
  reg fifoTxData_elem0_status_1;
  wire fifoTxData_elem0_status_1_D_IN, fifoTxData_elem0_status_1_EN;

  // register fifoTxData_elem1_status_0
  reg fifoTxData_elem1_status_0;
  wire fifoTxData_elem1_status_0_D_IN, fifoTxData_elem1_status_0_EN;

  // register fifoTxData_elem1_status_1
  reg fifoTxData_elem1_status_1;
  wire fifoTxData_elem1_status_1_D_IN, fifoTxData_elem1_status_1_EN;

  // register fifoTxData_read_block
  reg fifoTxData_read_block;
  wire fifoTxData_read_block_D_IN, fifoTxData_read_block_EN;

  // register fifoTxData_sInReset_pre_isInReset
  reg fifoTxData_sInReset_pre_isInReset;
  wire fifoTxData_sInReset_pre_isInReset_D_IN,
       fifoTxData_sInReset_pre_isInReset_EN;

  // register fifoTxData_write_block
  reg fifoTxData_write_block;
  wire fifoTxData_write_block_D_IN, fifoTxData_write_block_EN;

  // ports of submodule fifoTxData_dCombinedReset
  wire fifoTxData_dCombinedReset_RST_OUT;

  // ports of submodule fifoTxData_dCrossedsReset
  wire fifoTxData_dCrossedsReset_OUT_RST;

  // ports of submodule fifoTxData_sCombinedReset
  wire fifoTxData_sCombinedReset_RST_OUT;

  // ports of submodule fifoTxData_sCrosseddReset
  wire fifoTxData_sCrosseddReset_OUT_RST;

  // ports of submodule in_ff
  wire [609 : 0] in_ff_D_IN, in_ff_D_OUT;
  wire in_ff_CLR, in_ff_DEQ, in_ff_EMPTY_N, in_ff_ENQ, in_ff_FULL_N;

  // ports of submodule out_ff
  wire [321 : 0] out_ff_D_IN, out_ff_D_OUT;
  wire out_ff_CLR, out_ff_DEQ, out_ff_EMPTY_N, out_ff_ENQ, out_ff_FULL_N;

  // ports of submodule pipe_ff
  wire [321 : 0] pipe_ff_D_IN, pipe_ff_D_OUT;
  wire pipe_ff_CLR, pipe_ff_DEQ, pipe_ff_EMPTY_N, pipe_ff_ENQ, pipe_ff_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_process_incoming_packet,
       WILL_FIRE_RL_process_outgoing_packet;

  // remaining internal signals
  wire [1 : 0] x__h2467, x__h2922, x__h4552, x__h4931;
  wire NOT_fifoTxData_read_block_2_3_AND_NOT_fifoTxDa_ETC___d65,
       NOT_fifoTxData_write_block_AND_fifoTxData_elem_ETC___d24,
       fifoTxData_elem0_status_0__read__7_EQ_fifoTxDa_ETC___d48,
       fifoTxData_elem0_status_1__read__4_EQ_fifoTxDa_ETC___d46,
       fifoTxData_elem1_status_0__read__6_EQ_fifoTxDa_ETC___d57,
       fifoTxData_elem1_status_1__read__3_EQ_fifoTxDa_ETC___d55;

  // action method datain_put
  assign RDY_datain_put = in_ff_FULL_N ;

  // actionvalue method dataout_get
  assign dataout_get = out_ff_D_OUT ;
  assign RDY_dataout_get = out_ff_EMPTY_N ;

  // value method getEopCount
  assign getEopCount = 64'hAAAAAAAAAAAAAAAA ;
  assign RDY_getEopCount = 1'd1 ;

  // value method getSopCount
  assign getSopCount = 64'hAAAAAAAAAAAAAAAA ;
  assign RDY_getSopCount = 1'd1 ;

  // value method getIdleCount
  assign getIdleCount = 64'hAAAAAAAAAAAAAAAA ;
  assign RDY_getIdleCount = 1'd1 ;

  // value method getDataCount
  assign getDataCount = 64'hAAAAAAAAAAAAAAAA ;
  assign RDY_getDataCount = 1'd1 ;

  // submodule fifoTxData_dCombinedReset
  ResetEither fifoTxData_dCombinedReset(.A_RST(RST_N),
					.B_RST(fifoTxData_dCrossedsReset_OUT_RST),
					.RST_OUT(fifoTxData_dCombinedReset_RST_OUT));

  // submodule fifoTxData_dCrossedsReset
  SyncReset0 fifoTxData_dCrossedsReset(.IN_RST(RST_N),
				       .OUT_RST(fifoTxData_dCrossedsReset_OUT_RST));

  // submodule fifoTxData_sCombinedReset
  ResetEither fifoTxData_sCombinedReset(.A_RST(RST_N),
					.B_RST(fifoTxData_sCrosseddReset_OUT_RST),
					.RST_OUT(fifoTxData_sCombinedReset_RST_OUT));

  // submodule fifoTxData_sCrosseddReset
  SyncReset0 fifoTxData_sCrosseddReset(.IN_RST(RST_N),
				       .OUT_RST(fifoTxData_sCrosseddReset_OUT_RST));

  // submodule in_ff
  FIFO2 #(.width(32'd610), .guarded(32'd1)) in_ff(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(in_ff_D_IN),
						  .ENQ(in_ff_ENQ),
						  .DEQ(in_ff_DEQ),
						  .CLR(in_ff_CLR),
						  .D_OUT(in_ff_D_OUT),
						  .FULL_N(in_ff_FULL_N),
						  .EMPTY_N(in_ff_EMPTY_N));

  // submodule out_ff
  FIFO2 #(.width(32'd322), .guarded(32'd1)) out_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(out_ff_D_IN),
						   .ENQ(out_ff_ENQ),
						   .DEQ(out_ff_DEQ),
						   .CLR(out_ff_CLR),
						   .D_OUT(out_ff_D_OUT),
						   .FULL_N(out_ff_FULL_N),
						   .EMPTY_N(out_ff_EMPTY_N));

  // submodule pipe_ff
  FIFO2 #(.width(32'd322), .guarded(32'd1)) pipe_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(pipe_ff_D_IN),
						    .ENQ(pipe_ff_ENQ),
						    .DEQ(pipe_ff_DEQ),
						    .CLR(pipe_ff_CLR),
						    .D_OUT(pipe_ff_D_OUT),
						    .FULL_N(pipe_ff_FULL_N),
						    .EMPTY_N(pipe_ff_EMPTY_N));

  // rule RL_process_incoming_packet
  assign WILL_FIRE_RL_process_incoming_packet =
	     NOT_fifoTxData_write_block_AND_fifoTxData_elem_ETC___d24 &&
	     in_ff_EMPTY_N ;

  // rule RL_process_outgoing_packet
  assign WILL_FIRE_RL_process_outgoing_packet =
	     NOT_fifoTxData_read_block_2_3_AND_NOT_fifoTxDa_ETC___d65 &&
	     pipe_ff_FULL_N ;

  // register fifoTxData_block0
  assign fifoTxData_block0_D_IN =
	     { in_ff_D_OUT[609:322],
	       in_ff_D_OUT[65:34],
	       1'd0,
	       in_ff_D_OUT[0],
	       in_ff_D_OUT[609:578],
	       in_ff_D_OUT[321:66],
	       in_ff_D_OUT[33:1],
	       in_ff_D_OUT[65:34] == 32'd0 && in_ff_D_OUT[0] } ;
  assign fifoTxData_block0_EN =
	     WILL_FIRE_RL_process_incoming_packet && !fifoTxData_write_block ;

  // register fifoTxData_block0_status
  assign fifoTxData_block0_status_D_IN = !fifoTxData_block0_status ;
  assign fifoTxData_block0_status_EN =
	     WILL_FIRE_RL_process_incoming_packet && !fifoTxData_write_block ;

  // register fifoTxData_block1
  assign fifoTxData_block1_D_IN =
	     { in_ff_D_OUT[609:322],
	       in_ff_D_OUT[65:34],
	       1'd0,
	       in_ff_D_OUT[0],
	       in_ff_D_OUT[609:578],
	       in_ff_D_OUT[321:66],
	       in_ff_D_OUT[33:1],
	       in_ff_D_OUT[65:34] == 32'd0 && in_ff_D_OUT[0] } ;
  assign fifoTxData_block1_EN =
	     WILL_FIRE_RL_process_incoming_packet && fifoTxData_write_block ;

  // register fifoTxData_block1_status
  assign fifoTxData_block1_status_D_IN = !fifoTxData_block1_status ;
  assign fifoTxData_block1_status_EN =
	     WILL_FIRE_RL_process_incoming_packet && fifoTxData_write_block ;

  // register fifoTxData_dInReset_pre_isInReset
  assign fifoTxData_dInReset_pre_isInReset_D_IN = 1'd0 ;
  assign fifoTxData_dInReset_pre_isInReset_EN =
	     fifoTxData_dInReset_pre_isInReset ;

  // register fifoTxData_elem0_status_0
  assign fifoTxData_elem0_status_0_D_IN = fifoTxData_block0_status ;
  assign fifoTxData_elem0_status_0_EN =
	     WILL_FIRE_RL_process_outgoing_packet && !fifoTxData_read_block ;

  // register fifoTxData_elem0_status_1
  assign fifoTxData_elem0_status_1_D_IN = fifoTxData_elem0_status_0 ;
  assign fifoTxData_elem0_status_1_EN =
	     WILL_FIRE_RL_process_outgoing_packet && !fifoTxData_read_block ;

  // register fifoTxData_elem1_status_0
  assign fifoTxData_elem1_status_0_D_IN = fifoTxData_block1_status ;
  assign fifoTxData_elem1_status_0_EN =
	     WILL_FIRE_RL_process_outgoing_packet && fifoTxData_read_block ;

  // register fifoTxData_elem1_status_1
  assign fifoTxData_elem1_status_1_D_IN = fifoTxData_elem1_status_0 ;
  assign fifoTxData_elem1_status_1_EN =
	     WILL_FIRE_RL_process_outgoing_packet && fifoTxData_read_block ;

  // register fifoTxData_read_block
  assign fifoTxData_read_block_D_IN = !fifoTxData_read_block ;
  assign fifoTxData_read_block_EN =
	     WILL_FIRE_RL_process_outgoing_packet &&
	     (fifoTxData_read_block &&
	      fifoTxData_elem1_status_0__read__6_EQ_fifoTxDa_ETC___d57 ||
	      !fifoTxData_read_block &&
	      fifoTxData_elem0_status_0__read__7_EQ_fifoTxDa_ETC___d48) ;

  // register fifoTxData_sInReset_pre_isInReset
  assign fifoTxData_sInReset_pre_isInReset_D_IN = 1'd0 ;
  assign fifoTxData_sInReset_pre_isInReset_EN =
	     fifoTxData_sInReset_pre_isInReset ;

  // register fifoTxData_write_block
  assign fifoTxData_write_block_D_IN = ~fifoTxData_write_block ;
  assign fifoTxData_write_block_EN = WILL_FIRE_RL_process_incoming_packet ;

  // submodule in_ff
  assign in_ff_D_IN = datain_put ;
  assign in_ff_ENQ = EN_datain_put ;
  assign in_ff_DEQ =
	     NOT_fifoTxData_write_block_AND_fifoTxData_elem_ETC___d24 &&
	     in_ff_EMPTY_N ;
  assign in_ff_CLR = 1'b0 ;

  // submodule out_ff
  assign out_ff_D_IN = pipe_ff_D_OUT ;
  assign out_ff_ENQ =
	     pipe_ff_EMPTY_N &&
	     (pipe_ff_D_OUT[33:2] == 32'd0 || out_ff_FULL_N) &&
	     pipe_ff_D_OUT[33:2] != 32'd0 ;
  assign out_ff_DEQ = EN_dataout_get ;
  assign out_ff_CLR = 1'b0 ;

  // submodule pipe_ff
  assign pipe_ff_D_IN =
	     fifoTxData_read_block ?
	       ((!fifoTxData_elem1_status_1__read__3_EQ_fifoTxDa_ETC___d55 &&
		 fifoTxData_elem1_status_0__read__6_EQ_fifoTxDa_ETC___d57) ?
		  fifoTxData_block1[643:322] :
		  fifoTxData_block1[321:0]) :
	       ((!fifoTxData_elem0_status_1__read__4_EQ_fifoTxDa_ETC___d46 &&
		 fifoTxData_elem0_status_0__read__7_EQ_fifoTxDa_ETC___d48) ?
		  fifoTxData_block0[643:322] :
		  fifoTxData_block0[321:0]) ;
  assign pipe_ff_ENQ = WILL_FIRE_RL_process_outgoing_packet ;
  assign pipe_ff_DEQ =
	     pipe_ff_EMPTY_N &&
	     (pipe_ff_D_OUT[33:2] == 32'd0 || out_ff_FULL_N) ;
  assign pipe_ff_CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_fifoTxData_read_block_2_3_AND_NOT_fifoTxDa_ETC___d65 =
	     (!fifoTxData_read_block && x__h4552 != 2'd3 ||
	      fifoTxData_read_block && x__h4931 != 2'd3) &&
	     !fifoTxData_dInReset_pre_isInReset ;
  assign NOT_fifoTxData_write_block_AND_fifoTxData_elem_ETC___d24 =
	     (!fifoTxData_write_block && x__h2467 == 2'd3 ||
	      fifoTxData_write_block && x__h2922 == 2'd3) &&
	     !fifoTxData_sInReset_pre_isInReset ;
  assign fifoTxData_elem0_status_0__read__7_EQ_fifoTxDa_ETC___d48 =
	     fifoTxData_elem0_status_0 == fifoTxData_block0_status ;
  assign fifoTxData_elem0_status_1__read__4_EQ_fifoTxDa_ETC___d46 =
	     fifoTxData_elem0_status_1 == fifoTxData_block0_status ;
  assign fifoTxData_elem1_status_0__read__6_EQ_fifoTxDa_ETC___d57 =
	     fifoTxData_elem1_status_0 == fifoTxData_block1_status ;
  assign fifoTxData_elem1_status_1__read__3_EQ_fifoTxDa_ETC___d55 =
	     fifoTxData_elem1_status_1 == fifoTxData_block1_status ;
  assign x__h2467 =
	     { fifoTxData_elem0_status_1 == fifoTxData_block0_status,
	       fifoTxData_elem0_status_0 == fifoTxData_block0_status } ;
  assign x__h2922 =
	     { fifoTxData_elem1_status_1 == fifoTxData_block1_status,
	       fifoTxData_elem1_status_0 == fifoTxData_block1_status } ;
  assign x__h4552 =
	     { fifoTxData_elem0_status_1__read__4_EQ_fifoTxDa_ETC___d46,
	       fifoTxData_elem0_status_0__read__7_EQ_fifoTxDa_ETC___d48 } ;
  assign x__h4931 =
	     { fifoTxData_elem1_status_1__read__3_EQ_fifoTxDa_ETC___d55,
	       fifoTxData_elem1_status_0__read__6_EQ_fifoTxDa_ETC___d57 } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY 644'd0;
	fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY 644'd0;
	fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (fifoTxData_block0_EN)
	  fifoTxData_block0 <= `BSV_ASSIGNMENT_DELAY fifoTxData_block0_D_IN;
	if (fifoTxData_block0_status_EN)
	  fifoTxData_block0_status <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_block0_status_D_IN;
	if (fifoTxData_block1_EN)
	  fifoTxData_block1 <= `BSV_ASSIGNMENT_DELAY fifoTxData_block1_D_IN;
	if (fifoTxData_block1_status_EN)
	  fifoTxData_block1_status <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_block1_status_D_IN;
	if (fifoTxData_elem0_status_0_EN)
	  fifoTxData_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_elem0_status_0_D_IN;
	if (fifoTxData_elem0_status_1_EN)
	  fifoTxData_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_elem0_status_1_D_IN;
	if (fifoTxData_elem1_status_0_EN)
	  fifoTxData_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_elem1_status_0_D_IN;
	if (fifoTxData_elem1_status_1_EN)
	  fifoTxData_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_elem1_status_1_D_IN;
	if (fifoTxData_read_block_EN)
	  fifoTxData_read_block <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_read_block_D_IN;
	if (fifoTxData_write_block_EN)
	  fifoTxData_write_block <= `BSV_ASSIGNMENT_DELAY
	      fifoTxData_write_block_D_IN;
      end
  end

  always@(posedge CLK or `BSV_RESET_EDGE fifoTxData_dCombinedReset_RST_OUT)
  if (fifoTxData_dCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (fifoTxData_dInReset_pre_isInReset_EN)
	fifoTxData_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    fifoTxData_dInReset_pre_isInReset_D_IN;
    end

  always@(posedge CLK or `BSV_RESET_EDGE fifoTxData_sCombinedReset_RST_OUT)
  if (fifoTxData_sCombinedReset_RST_OUT == `BSV_RESET_VALUE)
    begin
      fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (fifoTxData_sInReset_pre_isInReset_EN)
	fifoTxData_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    fifoTxData_sInReset_pre_isInReset_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fifoTxData_block0 =
	644'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fifoTxData_block0_status = 1'h0;
    fifoTxData_block1 =
	644'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fifoTxData_block1_status = 1'h0;
    fifoTxData_dInReset_pre_isInReset = 1'h0;
    fifoTxData_elem0_status_0 = 1'h0;
    fifoTxData_elem0_status_1 = 1'h0;
    fifoTxData_elem1_status_0 = 1'h0;
    fifoTxData_elem1_status_1 = 1'h0;
    fifoTxData_read_block = 1'h0;
    fifoTxData_sInReset_pre_isInReset = 1'h0;
    fifoTxData_write_block = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkStreamGearboxDn_64_32

