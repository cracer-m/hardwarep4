=== Generated schedule for mkHeaderSerializer ===

Method schedule
---------------
Method: metadata_enq
Ready signal: meta_in_ff.i_notFull
Conflict-free: writeServer_enq,
	       writeServer_notFull,
	       writeClient_first,
	       writeClient_deq,
	       writeClient_notEmpty,
	       set_verbosity
Sequenced after: metadata_notFull
Conflicts: metadata_enq
 
Method: metadata_notFull
Ready signal: True
Conflict-free: metadata_notFull,
	       writeServer_enq,
	       writeServer_notFull,
	       writeClient_first,
	       writeClient_deq,
	       writeClient_notEmpty,
	       set_verbosity
Sequenced before: metadata_enq
 
Method: writeServer_enq
Ready signal: data_in_ff.i_notFull
Conflict-free: metadata_enq,
	       metadata_notFull,
	       writeClient_first,
	       writeClient_deq,
	       writeClient_notEmpty,
	       set_verbosity
Sequenced after: writeServer_notFull
Conflicts: writeServer_enq
 
Method: writeServer_notFull
Ready signal: True
Conflict-free: metadata_enq,
	       metadata_notFull,
	       writeServer_notFull,
	       writeClient_first,
	       writeClient_deq,
	       writeClient_notEmpty,
	       set_verbosity
Sequenced before: writeServer_enq
 
Method: writeClient_first
Ready signal: data_out_ff.i_notEmpty
Conflict-free: metadata_enq,
	       metadata_notFull,
	       writeServer_enq,
	       writeServer_notFull,
	       writeClient_first,
	       writeClient_notEmpty,
	       set_verbosity
Sequenced before: writeClient_deq
 
Method: writeClient_deq
Ready signal: data_out_ff.i_notEmpty
Conflict-free: metadata_enq,
	       metadata_notFull,
	       writeServer_enq,
	       writeServer_notFull,
	       set_verbosity
Sequenced after: writeClient_first, writeClient_notEmpty
Conflicts: writeClient_deq
 
Method: writeClient_notEmpty
Ready signal: True
Conflict-free: metadata_enq,
	       metadata_notFull,
	       writeServer_enq,
	       writeServer_notFull,
	       writeClient_first,
	       writeClient_notEmpty,
	       set_verbosity
Sequenced before: writeClient_deq
 
Method: set_verbosity
Ready signal: True
Conflict-free: metadata_enq,
	       metadata_notFull,
	       writeServer_enq,
	       writeServer_notFull,
	       writeClient_first,
	       writeClient_deq,
	       writeClient_notEmpty
Sequenced before (restricted): set_verbosity
 
Rule schedule
-------------
Rule: rl_serialize_stage0
Predicate: data_in_ff.i_notEmpty && stage0_ff.i_notFull
Blocking rules: (none)
 
Rule: rl_serialize_stage1
Predicate: stage0_ff.i_notEmpty &&
	   stage2_ff.i_notFull &&
	   (stage0_ff.first[0]
	    ? (stage0_ff.first[203:199] < 5'd16)
	      ? send_last1_ff.i_notFull
	      : send_last2_ff.i_notFull
	    : ((stage0_ff.first[203:199] < 5'd16)
	       ? buff_frame_ff.i_notFull
	       : send_frame_ff.i_notFull))
Blocking rules: (none)
 
Rule: rl_send_full_frame
Predicate: stage2_ff.i_notEmpty &&
	   send_frame_ff.i_notEmpty &&
	   data_out_ff.i_notFull && meta_in_ff.i_notEmpty &&
	   send_frame_ff.notEmpty
Blocking rules: (none)
 
Rule: rl_buffer_partial_frame
Predicate: stage2_ff.i_notEmpty && buff_frame_ff.i_notEmpty &&
	   buff_frame_ff.notEmpty
Blocking rules: (none)
 
Rule: rl_eop_full_frame
Predicate: stage2_ff.i_notEmpty &&
	   data_out_ff.i_notFull &&
	   meta_in_ff.i_notEmpty && send_last2_ff.i_notEmpty &&
	   send_last2_ff.notEmpty
Blocking rules: (none)
 
Rule: rl_eop_partial_frame
Predicate: stage2_ff.i_notEmpty &&
	   data_out_ff.i_notFull &&
	   meta_in_ff.i_notEmpty && send_last1_ff.i_notEmpty &&
	   send_last1_ff.notEmpty
Blocking rules: (none)
 
Rule: __me_check_2
Predicate: True
Blocking rules: (none)
 
Rule: __me_check_3
Predicate: True
Blocking rules: (none)
 
Rule: __me_check_4
Predicate: True
Blocking rules: (none)
 
Logical execution order: metadata_notFull,
			 metadata_enq,
			 writeServer_notFull,
			 writeServer_enq,
			 writeClient_first,
			 writeClient_notEmpty,
			 writeClient_deq,
			 set_verbosity,
			 rl_serialize_stage0,
			 rl_send_full_frame,
			 rl_buffer_partial_frame,
			 rl_eop_full_frame,
			 rl_eop_partial_frame,
			 __me_check_2,
			 __me_check_3,
			 __me_check_4,
			 rl_serialize_stage1

==================================================
