=== Generated schedule for mkPcieGearbox ===

Method schedule
---------------
Method: tlp_request_get
Ready signal: outFifo.i_notEmpty
Conflict-free: tlp_response_put, pci_request_put, pci_response_get
Conflicts: tlp_request_get
 
Method: tlp_response_put
Ready signal: inFifo.i_notFull
Conflict-free: tlp_request_get, pci_request_put, pci_response_get
Conflicts: tlp_response_put
 
Method: pci_request_put
Ready signal: (((! fifoTxData_write_block) &&
		({fifoTxData_elem0_status_1.crossed ==
		  fifoTxData_block0_status._read, fifoTxData_elem0_status_0.crossed ==
						  fifoTxData_block0_status._read} ==
		 2'd3)) ||
	       (fifoTxData_write_block &&
		({fifoTxData_elem1_status_1.crossed ==
		  fifoTxData_block1_status._read, fifoTxData_elem1_status_0.crossed ==
						  fifoTxData_block1_status._read} ==
		 2'd3))) &&
	      (! fifoTxData_sInReset.wget)
Conflict-free: tlp_request_get, tlp_response_put, pci_response_get
Conflicts: pci_request_put
 
Method: pci_response_get
Ready signal: (((! fifoRxData_read_block) &&
		({! (fifoRxData_elem0_status_1.crossed ==
		     fifoRxData_block0_status._read), ! (fifoRxData_elem0_status_0.crossed ==
							 fifoRxData_block0_status._read)} ==
		 2'd3)) ||
	       (fifoRxData_read_block &&
		({! (fifoRxData_elem1_status_1.crossed ==
		     fifoRxData_block1_status._read), ! (fifoRxData_elem1_status_0.crossed ==
							 fifoRxData_block1_status._read)} ==
		 2'd3))) &&
	      (! fifoRxData_dInReset.wget)
Conflict-free: tlp_request_get, tlp_response_put, pci_request_put
Conflicts: pci_response_get
 
Rule schedule
-------------
Rule: fifoRxData_sInReset_pre_isResetAssertedUpdate
Predicate: fifoRxData_sInReset_pre_isInReset
Blocking rules: (none)
 
Rule: fifoRxData_dInReset_pre_isResetAssertedUpdate
Predicate: fifoRxData_dInReset_pre_isInReset
Blocking rules: (none)
 
Rule: fifoRxData_launder_sInReset
Predicate: True
Blocking rules: (none)
 
Rule: fifoRxData_launder_dInReset
Predicate: True
Blocking rules: (none)
 
Rule: fifoTxData_sInReset_pre_isResetAssertedUpdate
Predicate: fifoTxData_sInReset_pre_isInReset
Blocking rules: (none)
 
Rule: fifoTxData_dInReset_pre_isResetAssertedUpdate
Predicate: fifoTxData_dInReset_pre_isInReset
Blocking rules: (none)
 
Rule: fifoTxData_launder_sInReset
Predicate: True
Blocking rules: (none)
 
Rule: fifoTxData_launder_dInReset
Predicate: True
Blocking rules: (none)
 
Rule: process_incoming_packets1
Predicate: (((! fifoRxData_write_block) &&
	     (! ({! (fifoRxData_elem0_status_1._read ==
		     fifoRxData_block0_status.crossed), ! (fifoRxData_elem0_status_0._read ==
							   fifoRxData_block0_status.crossed)} ==
		 2'd3))) ||
	    (fifoRxData_write_block &&
	     (! ({! (fifoRxData_elem1_status_1._read ==
		     fifoRxData_block1_status.crossed), ! (fifoRxData_elem1_status_0._read ==
							   fifoRxData_block1_status.crossed)} ==
		 2'd3)))) &&
	   (! fifoRxData_sInReset.wget) &&
	   inFifo.i_notEmpty &&
	   (! rSendInvalid)
Blocking rules: (none)
 
Rule: send_invalid_packets1
Predicate: (((! fifoRxData_write_block) &&
	     (! ({! (fifoRxData_elem0_status_1._read ==
		     fifoRxData_block0_status.crossed), ! (fifoRxData_elem0_status_0._read ==
							   fifoRxData_block0_status.crossed)} ==
		 2'd3))) ||
	    (fifoRxData_write_block &&
	     (! ({! (fifoRxData_elem1_status_1._read ==
		     fifoRxData_block1_status.crossed), ! (fifoRxData_elem1_status_0._read ==
							   fifoRxData_block1_status.crossed)} ==
		 2'd3)))) &&
	   (! fifoRxData_sInReset.wget) &&
	   rSendInvalid
Blocking rules: (none)
 
Rule: process_outgoing_packets
Predicate: (((! fifoTxData_read_block) &&
	     (! ({fifoTxData_elem0_status_1._read ==
		  fifoTxData_block0_status.crossed, fifoTxData_elem0_status_0._read ==
						    fifoTxData_block0_status.crossed} ==
		 2'd3))) ||
	    (fifoTxData_read_block &&
	     (! ({fifoTxData_elem1_status_1._read ==
		  fifoTxData_block1_status.crossed, fifoTxData_elem1_status_0._read ==
						    fifoTxData_block1_status.crossed} ==
		 2'd3)))) &&
	   (! fifoTxData_dInReset.wget) &&
	   (((fifoTxData_read_block
	      ? ((! (fifoTxData_elem1_status_1._read ==
		     fifoTxData_block1_status.crossed)) &&
		 (fifoTxData_elem1_status_0._read ==
		  fifoTxData_block1_status.crossed))
		? fifoTxData_block1.crossed[152:145]
		: ((fifoTxData_elem1_status_0._read ==
		    fifoTxData_block1_status.crossed)
		   ? (_ :: Bit 8)
		   : fifoTxData_block1.crossed[71:64])
	      : (((! (fifoTxData_elem0_status_1._read ==
		      fifoTxData_block0_status.crossed)) &&
		  (fifoTxData_elem0_status_0._read ==
		   fifoTxData_block0_status.crossed))
		 ? fifoTxData_block0.crossed[152:145]
		 : ((fifoTxData_elem0_status_0._read ==
		     fifoTxData_block0_status.crossed)
		    ? (_ :: Bit 8)
		    : fifoTxData_block0.crossed[71:64]))) ==
	     8'd0) ||
	    outFifo.i_notFull)
Blocking rules: (none)
 
Logical execution order: tlp_request_get,
			 tlp_response_put,
			 fifoRxData_launder_sInReset,
			 process_incoming_packets1,
			 send_invalid_packets1,
			 fifoRxData_launder_dInReset,
			 pci_response_get,
			 fifoRxData_sInReset_pre_isResetAssertedUpdate,
			 fifoRxData_dInReset_pre_isResetAssertedUpdate,
			 fifoTxData_launder_sInReset,
			 pci_request_put,
			 fifoTxData_launder_dInReset,
			 process_outgoing_packets,
			 fifoTxData_sInReset_pre_isResetAssertedUpdate,
			 fifoTxData_dInReset_pre_isResetAssertedUpdate

=============================================
