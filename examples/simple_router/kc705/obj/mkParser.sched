=== Generated schedule for mkParser ===

Method schedule
---------------
Method: frameIn_put
Ready signal: data_in_ff.i_notFull
Conflict-free: meta_get, set_verbosity, read_perf_info
Conflicts: frameIn_put
 
Method: meta_get
Ready signal: meta_in_ff.i_notEmpty
Conflict-free: frameIn_put, set_verbosity, read_perf_info
Conflicts: meta_get
 
Method: set_verbosity
Ready signal: True
Conflict-free: frameIn_put, meta_get, read_perf_info
Sequenced before (restricted): set_verbosity
 
Method: read_perf_info
Ready signal: True
Conflict-free: frameIn_put, meta_get, set_verbosity, read_perf_info
 
Rule schedule
-------------
Rule: data_ff_incCtr
Predicate: data_ff_x_wire.whas &&
	   data_ff_enqueueing.whas && (! data_ff_dequeueing.whas)
Blocking rules: (none)
 
Rule: data_ff_decCtr
Predicate: data_ff_dequeueing.whas && (! data_ff_enqueueing.whas)
Blocking rules: (none)
 
Rule: data_ff_both
Predicate: data_ff_x_wire.whas &&
	   data_ff_dequeueing.whas && data_ff_enqueueing.whas
Blocking rules: (none)
 
Rule: ethernet_out_ff_incCtr
Predicate: ethernet_out_ff_x_wire.whas &&
	   ethernet_out_ff_enqueueing.whas &&
	   (! ethernet_out_ff_dequeueing.whas)
Blocking rules: (none)
 
Rule: ethernet_out_ff_decCtr
Predicate: ethernet_out_ff_dequeueing.whas &&
	   (! ethernet_out_ff_enqueueing.whas)
Blocking rules: (none)
 
Rule: ethernet_out_ff_both
Predicate: ethernet_out_ff_x_wire.whas &&
	   ethernet_out_ff_dequeueing.whas && ethernet_out_ff_enqueueing.whas
Blocking rules: (none)
 
Rule: ipv4_out_ff_incCtr
Predicate: ipv4_out_ff_x_wire.whas &&
	   ipv4_out_ff_enqueueing.whas && (! ipv4_out_ff_dequeueing.whas)
Blocking rules: (none)
 
Rule: ipv4_out_ff_decCtr
Predicate: ipv4_out_ff_dequeueing.whas && (! ipv4_out_ff_enqueueing.whas)
Blocking rules: (none)
 
Rule: ipv4_out_ff_both
Predicate: ipv4_out_ff_x_wire.whas &&
	   ipv4_out_ff_dequeueing.whas && ipv4_out_ff_enqueueing.whas
Blocking rules: (none)
 
Rule: rl_data_ff_load
Predicate: (! parse_done.port1__read) &&
	   (rg_buffered.port1__read < rg_next_header_len.port1__read) &&
	   (w_parse_header_done.whas || w_load_header.whas)
Blocking rules: (none)
 
Rule: rl_start_state_deq
Predicate: (! parse_state_ff_rv.port1__read[3]) && data_in_ff.i_notEmpty &&
	   parse_done.port1__read && data_in_ff.first[1] &&
	   (! w_parse_header_done.whas)
Blocking rules: fsmrl_rl_cont, fsmrl_rl_extract_1, fsmrl_rl_extract
 
Rule: rl_start_state_idle
Predicate: data_in_ff.i_notEmpty &&
	   parse_done.port1__read &&
	   ((! data_in_ff.first[1]) || w_parse_header_done.whas)
Blocking rules: fsmrl_rl_extract_1, fsmrl_rl_extract
 
Rule: rl_delay
Predicate: delay_ff.i_notFull && w_parse_done.whas
Blocking rules: (none)
 
Rule: rl_accept
Predicate: delay_ff.i_notEmpty && meta_in_ff.i_notFull && delay_ff.notEmpty
Blocking rules: (none)
 
Rule: fsmrl_rl_extract
Predicate: parse_state_ff_rv.port0__read[3] &&
	   (! (ipv4_out_ff_cntr_r == 2'd2)) &&
	   ((! data_in_tmp.port0__read) || data_in_ff.i_notEmpty) &&
	   (parse_state_ff_rv.port0__read[2:0] == 3'd1)
Blocking rules: rl_accept
 
Rule: fsmrl_rl_accept
Predicate: w_parse_ethernet_accept.whas
Blocking rules: (none)
 
Rule: fsmrl_rl_cont
Predicate: (! parse_state_ff_rv.port1__read[3]) &&
	   w_parse_ethernet_parse_ipv4.whas
Blocking rules: (none)
 
Rule: fsmrl_rl_extract_1
Predicate: parse_state_ff_rv.port0__read[3] &&
	   (! (ethernet_out_ff_cntr_r == 2'd2)) &&
	   ((! data_in_tmp.port0__read) || data_in_ff.i_notEmpty) &&
	   (parse_state_ff_rv.port0__read[2:0] == 3'd0)
Blocking rules: rl_accept
 
Logical execution order: frameIn_put,
			 meta_get,
			 set_verbosity,
			 read_perf_info,
			 rl_accept,
			 data_ff_incCtr,
			 data_ff_decCtr,
			 data_ff_both,
			 fsmrl_rl_extract,
			 ipv4_out_ff_incCtr,
			 ipv4_out_ff_decCtr,
			 ipv4_out_ff_both,
			 fsmrl_rl_extract_1,
			 ethernet_out_ff_incCtr,
			 ethernet_out_ff_decCtr,
			 ethernet_out_ff_both,
			 fsmrl_rl_accept,
			 rl_delay,
			 fsmrl_rl_cont,
			 rl_data_ff_load,
			 rl_start_state_deq,
			 rl_start_state_idle

========================================
