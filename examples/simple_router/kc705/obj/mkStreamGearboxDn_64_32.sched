=== Generated schedule for mkStreamGearboxDn_64_32 ===

Method schedule
---------------
Method: datain_put
Ready signal: in_ff.i_notFull
Conflict-free: dataout_get,
	       getEopCount,
	       getSopCount,
	       getIdleCount,
	       getDataCount
Conflicts: datain_put
 
Method: dataout_get
Ready signal: out_ff.i_notEmpty
Conflict-free: datain_put,
	       getEopCount,
	       getSopCount,
	       getIdleCount,
	       getDataCount
Conflicts: dataout_get
 
Method: getEopCount
Ready signal: True
Conflict-free: datain_put,
	       dataout_get,
	       getEopCount,
	       getSopCount,
	       getIdleCount,
	       getDataCount
 
Method: getSopCount
Ready signal: True
Conflict-free: datain_put,
	       dataout_get,
	       getEopCount,
	       getSopCount,
	       getIdleCount,
	       getDataCount
 
Method: getIdleCount
Ready signal: True
Conflict-free: datain_put,
	       dataout_get,
	       getEopCount,
	       getSopCount,
	       getIdleCount,
	       getDataCount
 
Method: getDataCount
Ready signal: True
Conflict-free: datain_put,
	       dataout_get,
	       getEopCount,
	       getSopCount,
	       getIdleCount,
	       getDataCount
 
Rule schedule
-------------
Rule: fifoTxData_sInReset_pre_isResetAssertedUpdate
Predicate: fifoTxData_sInReset_pre_isInReset
Blocking rules: (none)
 
Rule: fifoTxData_dInReset_pre_isResetAssertedUpdate
Predicate: fifoTxData_dInReset_pre_isInReset
Blocking rules: (none)
 
Rule: fifoTxData_launder_sInReset
Predicate: True
Blocking rules: (none)
 
Rule: fifoTxData_launder_dInReset
Predicate: True
Blocking rules: (none)
 
Rule: process_incoming_packet
Predicate: (((! fifoTxData_write_block) &&
	     ({fifoTxData_elem0_status_1.crossed ==
	       fifoTxData_block0_status._read, fifoTxData_elem0_status_0.crossed ==
					       fifoTxData_block0_status._read} ==
	      2'd3)) ||
	    (fifoTxData_write_block &&
	     ({fifoTxData_elem1_status_1.crossed ==
	       fifoTxData_block1_status._read, fifoTxData_elem1_status_0.crossed ==
					       fifoTxData_block1_status._read} ==
	      2'd3))) &&
	   (! fifoTxData_sInReset.wget) &&
	   in_ff.i_notEmpty
Blocking rules: (none)
 
Rule: process_outgoing_packet
Predicate: (((! fifoTxData_read_block) &&
	     (! ({fifoTxData_elem0_status_1._read ==
		  fifoTxData_block0_status.crossed, fifoTxData_elem0_status_0._read ==
						    fifoTxData_block0_status.crossed} ==
		 2'd3))) ||
	    (fifoTxData_read_block &&
	     (! ({fifoTxData_elem1_status_1._read ==
		  fifoTxData_block1_status.crossed, fifoTxData_elem1_status_0._read ==
						    fifoTxData_block1_status.crossed} ==
		 2'd3)))) &&
	   (! fifoTxData_dInReset.wget) &&
	   pipe_ff.i_notFull
Blocking rules: (none)
 
Rule: send_data
Predicate: pipe_ff.i_notEmpty &&
	   ((pipe_ff.first[33:2] == 32'd0) || out_ff.i_notFull)
Blocking rules: (none)
 
Logical execution order: datain_put,
			 dataout_get,
			 getEopCount,
			 getSopCount,
			 getIdleCount,
			 getDataCount,
			 send_data,
			 fifoTxData_launder_sInReset,
			 process_incoming_packet,
			 fifoTxData_launder_dInReset,
			 process_outgoing_packet,
			 fifoTxData_sInReset_pre_isResetAssertedUpdate,
			 fifoTxData_dInReset_pre_isResetAssertedUpdate

=======================================================
