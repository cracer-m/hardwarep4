=== Generated schedule for mkMetaGenChannel ===

Method schedule
---------------
Method: writeData_enq
Ready signal: host_pktBuff.RDY_writeServer_enq
Conflict-free: next_first, next_deq, next_notEmpty, start, stop
Sequenced after: writeData_notFull
Conflicts: writeData_enq
 
Method: writeData_notFull
Ready signal: True
Conflict-free: writeData_notFull,
	       next_first,
	       next_deq,
	       next_notEmpty,
	       start,
	       stop
Sequenced before: writeData_enq
 
Method: next_first
Ready signal: meta_out_ff.i_notEmpty
Conflict-free: writeData_enq,
	       writeData_notFull,
	       next_first,
	       next_notEmpty,
	       start,
	       stop
Sequenced before: next_deq
 
Method: next_deq
Ready signal: meta_out_ff.i_notEmpty
Conflict-free: writeData_enq, writeData_notFull, start, stop
Sequenced after: next_first, next_notEmpty
Conflicts: next_deq
 
Method: next_notEmpty
Ready signal: True
Conflict-free: writeData_enq, writeData_notFull, next_first, next_notEmpty
Sequenced before: next_deq
Sequenced before (restricted): start, stop
 
Method: start
Ready signal: (! pktgen_running.notEmpty) && pktgen_running.i_notFull
Conflict-free: writeData_enq, writeData_notFull, next_first, next_deq, stop
Sequenced after (restricted): next_notEmpty
Conflicts: start
 
Method: stop
Ready signal: pktgen_running.notEmpty && pktgen_running.i_notEmpty
Conflict-free: writeData_enq, writeData_notFull, next_first, next_deq, start
Sequenced after (restricted): next_notEmpty
Conflicts: stop
 
Rule schedule
-------------
Rule: host_mkConnectionGetPut
Predicate: host_pktBuff.RDY_readServer_readReq_put &&
	   host_readReqFifo.i_notEmpty
Blocking rules: (none)
 
Rule: host_1_mkConnectionGetPut
Predicate: host_pktBuff.RDY_readServer_readData_get &&
	   host_readDataFifo.i_notFull
Blocking rules: (none)
 
Rule: host_2_mkConnectionGetPut
Predicate: host_pktBuff.RDY_readServer_readLen_get &&
	   host_readLenFifo.i_notFull
Blocking rules: (none)
 
Rule: host_packetReadStart
Predicate: host_readLenFifo.i_notEmpty &&
	   host_pktLenFifo.i_notFull && host_readReqFifo.i_notFull &&
	   (! host_readStarted)
Blocking rules: (none)
 
Rule: host_packetReadInProgress
Predicate: host_parser.RDY_frameIn_put &&
	   host_readDataFifo.i_notEmpty && host_writeDataFifo.i_notFull &&
	   host_readStarted
Blocking rules: (none)
 
Rule: host_dispatch_packet
Predicate: host_parser.RDY_meta_get &&
	   host_pktLenFifo.i_notEmpty && host_outReqFifo.i_notFull
Blocking rules: (none)
 
Rule: host_set_verbose
Predicate: host_verbose_ff.i_notEmpty && host_verbose_ff.notEmpty
Blocking rules: (none)
 
Rule: rl_drain_writeClient
Predicate: host_writeDataFifo.i_notEmpty
Blocking rules: (none)
 
Rule: mkConnectionGetPut
Predicate: host_outReqFifo.i_notEmpty && meta_in_ff.i_notFull
Blocking rules: (none)
 
Rule: rl_freq_ctrl
Predicate: meta_in_ff.notEmpty && pktgen_running.notEmpty
Blocking rules: (none)
 
Rule: rl_send_metadata
Predicate: meta_out_ff.i_notFull && meta_in_ff.i_notEmpty && w_send_meta.whas
Blocking rules: (none)
 
Logical execution order: writeData_notFull,
			 writeData_enq,
			 next_first,
			 next_notEmpty,
			 next_deq,
			 rl_drain_writeClient,
			 rl_freq_ctrl,
			 mkConnectionGetPut,
			 rl_send_metadata,
			 start,
			 stop,
			 host_mkConnectionGetPut,
			 host_packetReadStart,
			 host_packetReadInProgress,
			 host_dispatch_packet,
			 host_set_verbose,
			 host_1_mkConnectionGetPut,
			 host_2_mkConnectionGetPut

================================================
